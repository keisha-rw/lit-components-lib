{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/PdsElement.spec.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestElement",
          "members": [
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "'test'"
            },
            {
              "kind": "field",
              "name": "componentCategory",
              "type": {
                "text": "ComponentCategory"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "componentType",
              "type": {
                "text": "ComponentType"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "classNames",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "pds-test",
          "customElement": true,
          "attributes": [
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestElementSansClasses",
          "members": [
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "'test-sans-classes'"
            },
            {
              "kind": "field",
              "name": "componentCategory",
              "type": {
                "text": "ComponentCategory"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "componentType",
              "type": {
                "text": "ComponentType"
              },
              "default": "'component'"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "pds-test-sans-classes",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestElementSansClasses",
          "members": [
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "'test-sans-classes'"
            },
            {
              "kind": "field",
              "name": "componentCategory",
              "type": {
                "text": "ComponentCategory"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "componentType",
              "type": {
                "text": "ComponentType"
              },
              "default": "'recipe'"
            },
            {
              "kind": "field",
              "name": "testTrueBoolean",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "testFalseBoolean",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "testChangedBoolean",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "testProp",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "pds-test-sans-classes",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestSlotValidation",
          "members": [
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "'test-slot-validation'"
            },
            {
              "kind": "field",
              "name": "componentCategory",
              "type": {
                "text": "ComponentCategory"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "componentType",
              "type": {
                "text": "ComponentType"
              },
              "default": "'component'"
            },
            {
              "kind": "method",
              "name": "getSlotContent",
              "return": {
                "type": {
                  "text": "HTMLSlotElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "test-slot-validation",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestNoSlotValidation",
          "members": [
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "'test-no-slot-validation'"
            },
            {
              "kind": "field",
              "name": "componentCategory",
              "type": {
                "text": "ComponentCategory"
              },
              "default": "'component'"
            },
            {
              "kind": "field",
              "name": "componentType",
              "type": {
                "text": "ComponentType"
              },
              "default": "'component'"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "test-no-slot-validation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "pds-test",
          "declaration": {
            "name": "TestElement",
            "module": "packages/web-components/src/lib/components/PdsElement.spec.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-test-sans-classes",
          "declaration": {
            "name": "TestElementSansClasses",
            "module": "packages/web-components/src/lib/components/PdsElement.spec.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-sans-classes",
          "declaration": {
            "name": "TestElementSansClasses",
            "module": "packages/web-components/src/lib/components/PdsElement.spec.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-slot-validation",
          "declaration": {
            "name": "TestSlotValidation",
            "module": "packages/web-components/src/lib/components/PdsElement.spec.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-no-slot-validation",
          "declaration": {
            "name": "TestNoSlotValidation",
            "module": "packages/web-components/src/lib/components/PdsElement.spec.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/PdsElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A base element.",
          "name": "PdsElement",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes"
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier"
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element"
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name"
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty"
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty"
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization"
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element"
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler"
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views."
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup"
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot"
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsElement",
          "declaration": {
            "name": "PdsElement",
            "module": "packages/web-components/src/lib/components/PdsElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/avatar/avatar.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/avatar/avatar.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarCentered",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Centered',\n  args: { align: 'center' },\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: { inverted: true },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarWithColorBar",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Color bar',\n  args: { variant: 'color-bar' },\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarWithIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render: (args) =>\n    html`<pds-avatar>\n      <div slot=\"media\">\n        <pds-icon-user size=\"default\"></pds-icon-user>\n      </div>\n      <div slot=\"heading\">\n        <span>FirstName LastName</span>\n      </div>\n      <div slot=\"details\">Lorem ipsum dolor</div>\n    </pds-avatar>`,\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarH3Example",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H3 heading',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render: (args) =>\n    html`<pds-avatar>\n      <div slot=\"media\">\n        <img\n          src=\"${process.env.IMAGES_PATH}image_small_40x40.svg\"\n          alt=\"lorem ipsum\"\n        />\n      </div>\n      <div slot=\"heading\">\n        <pds-heading headingTag=\"h3\" variant=\"label-default\"\n          >FirstName LastName</pds-heading\n        >\n      </div>\n      <div slot=\"details\">Lorem ipsum dolor</div>\n    </pds-avatar>`,\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarLinkExample",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render: (args) =>\n    html`<pds-avatar>\n      <div slot=\"media\">\n        <img\n          src=\"${process.env.IMAGES_PATH}image_small_40x40.svg\"\n          alt=\"lorem ipsum\"\n        />\n      </div>\n      <div slot=\"heading\">\n        <pds-link href=\"\">FirstName LastName</pds-link>\n      </div>\n      <div slot=\"details\">Lorem ipsum dolor</div>\n    </pds-avatar>`,\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "AvatarInvertedLinkExample",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted with link',\n  render: (args) =>\n    html`<pds-avatar .inverted=\"${args.inverted}\">\n      <div slot=\"media\">\n        <img\n          src=\"${process.env.IMAGES_PATH}image_small_40x40.svg\"\n          alt=\"lorem ipsum\"\n        />\n      </div>\n      <div slot=\"heading\">\n        <pds-link href=\"\">FirstName LastName</pds-link>\n      </div>\n      <div slot=\"details\">Lorem ipsum dolor</div>\n    </pds-avatar>`,\n  args: {\n    inverted: true,\n  },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarCentered",
          "declaration": {
            "name": "AvatarCentered",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarInverted",
          "declaration": {
            "name": "AvatarInverted",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarWithColorBar",
          "declaration": {
            "name": "AvatarWithColorBar",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarWithIcon",
          "declaration": {
            "name": "AvatarWithIcon",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarH3Example",
          "declaration": {
            "name": "AvatarH3Example",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarLinkExample",
          "declaration": {
            "name": "AvatarLinkExample",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AvatarInvertedLinkExample",
          "declaration": {
            "name": "AvatarInvertedLinkExample",
            "module": "packages/web-components/src/lib/components/avatar/avatar.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsAvatar",
          "slots": [
            {
              "description": "This slot holds a div containing an avatar image or icon",
              "name": "media"
            },
            {
              "description": "This slot holds the heading elements",
              "name": "heading"
            },
            {
              "description": "This slot holds the details elements",
              "name": "details"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'color-bar' | 'default'"
              },
              "default": "'default'",
              "description": "Style variant\n- **color-bar** not supported with inverted=\"true\" and/or align=\"center\"",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "inverted"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'center' | 'default'"
              },
              "default": "'default'",
              "attribute": "align"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'color-bar' | 'default'"
              },
              "default": "'default'",
              "description": "Style variant\n- **color-bar** not supported with inverted=\"true\" and/or align=\"center\"",
              "fieldName": "variant"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "inverted"
            },
            {
              "name": "align",
              "type": {
                "text": "'center' | 'default'"
              },
              "default": "'default'",
              "fieldName": "align"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "An avatar image with descriptive text",
          "tagName": "pds-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsAvatar",
          "declaration": {
            "name": "PdsAvatar",
            "module": "packages/web-components/src/lib/components/avatar/avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-avatar",
          "declaration": {
            "name": "PdsAvatar",
            "module": "packages/web-components/src/lib/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/band/band.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/band/band.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render: (args) =>\n    html`<pds-band\n      ><placeholder-element tight=\"true\"\n        >for placeholder only</placeholder-element\n      ></pds-band\n    >`,\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "BrandDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Brand default',\n  args: {\n    variant: 'brand-default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SpacingSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spacing small',\n  args: {\n    variant: 'brand-default',\n    spacing: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SpacingLarge",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spacing large',\n  args: {\n    variant: 'brand-default',\n    spacing: 'lg',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SpacingNone",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spacing none',\n  render: (args) =>\n    html`<pds-band variant=\"${args.variant}\" spacing=\"${args.spacing}\"\n      ><placeholder-element inlineStyle=\"background: none\" tight=\"true\"\n        >for placeholder only (transparent)</placeholder-element\n      ></pds-band\n    >`,\n  args: {\n    variant: 'brand-default',\n    spacing: 'none',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Subtle",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle',\n  args: {\n    variant: 'subtle',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Strong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Strong',\n  args: {\n    variant: 'strong',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "BrandStrong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Brand strong',\n  args: {\n    variant: 'brand-strong',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "BrandXStrong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Brand xstrong',\n  args: {\n    variant: 'brand-xstrong',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "BrandGradientStrong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Brand gradient strong',\n  args: {\n    variant: 'brand-gradient-strong',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "BrandGradientXStrong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Brand gradient xstrong',\n  args: {\n    variant: 'brand-gradient-xstrong',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BrandDefault",
          "declaration": {
            "name": "BrandDefault",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SpacingSmall",
          "declaration": {
            "name": "SpacingSmall",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SpacingLarge",
          "declaration": {
            "name": "SpacingLarge",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SpacingNone",
          "declaration": {
            "name": "SpacingNone",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtle",
          "declaration": {
            "name": "Subtle",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Strong",
          "declaration": {
            "name": "Strong",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BrandStrong",
          "declaration": {
            "name": "BrandStrong",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BrandXStrong",
          "declaration": {
            "name": "BrandXStrong",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BrandGradientStrong",
          "declaration": {
            "name": "BrandGradientStrong",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BrandGradientXStrong",
          "declaration": {
            "name": "BrandGradientXStrong",
            "module": "packages/web-components/src/lib/components/band/band.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/band/band.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsBand",
          "slots": [
            {
              "description": "This slot holds the html elements within the band",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'default'\n    | 'subtle'\n    | 'strong'\n    | 'brand-default'\n    | 'brand-strong'\n    | 'brand-xstrong'\n    | 'brand-gradient-strong'\n    | 'brand-gradient-xstrong'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the band using no background\n- **subtle** renders the band using the subtle background token\n- **strong** renders the band using the strong background token\n- **brand-default** renders the band using the brand-default background token\n- **brand-strong** renders the band using the brand-strong background token\n- **brand-xstrong** renders the band using the brand-xstrong background token\n- **brand-gradient-strong** renders the band using the brand-gradient-strong background token\n- **brand-gradient-xstrong** renders the band using the brand-gradient-xstrong background token",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Rounded",
              "attribute": "rounded"
            },
            {
              "kind": "field",
              "name": "spacing",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "Spacing variants\n- default (no spacing property added) provides 64px of top/bottom padding on md/lg screens\n and 32px of top/bottom padding on sm screens\n- **none** renders no top and bottom padding. Content within the band will create the spacing\n- **sm** provides 32px of top/bottom padding on md/lg screens and 16px of top/bottom padding\n on sm screens\n- **lg** provides 128px of top/bottom padding on md/lg screens and 64px of top/bottom padding\n on sm screens",
              "attribute": "spacing"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "| 'default'\n    | 'subtle'\n    | 'strong'\n    | 'brand-default'\n    | 'brand-strong'\n    | 'brand-xstrong'\n    | 'brand-gradient-strong'\n    | 'brand-gradient-xstrong'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the band using no background\n- **subtle** renders the band using the subtle background token\n- **strong** renders the band using the strong background token\n- **brand-default** renders the band using the brand-default background token\n- **brand-strong** renders the band using the brand-strong background token\n- **brand-xstrong** renders the band using the brand-xstrong background token\n- **brand-gradient-strong** renders the band using the brand-gradient-strong background token\n- **brand-gradient-xstrong** renders the band using the brand-gradient-xstrong background token",
              "fieldName": "variant"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Rounded",
              "fieldName": "rounded"
            },
            {
              "name": "spacing",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "Spacing variants\n- default (no spacing property added) provides 64px of top/bottom padding on md/lg screens\n and 32px of top/bottom padding on sm screens\n- **none** renders no top and bottom padding. Content within the band will create the spacing\n- **sm** provides 32px of top/bottom padding on md/lg screens and 16px of top/bottom padding\n on sm screens\n- **lg** provides 128px of top/bottom padding on md/lg screens and 64px of top/bottom padding\n on sm screens",
              "fieldName": "spacing"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A styled band surrounding various html content",
          "tagName": "pds-band",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsBand",
          "declaration": {
            "name": "PdsBand",
            "module": "packages/web-components/src/lib/components/band/band.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-band",
          "declaration": {
            "name": "PdsBand",
            "module": "packages/web-components/src/lib/components/band/band.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu/action-menu.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: {\n    buttonVariant: 'icon-inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TextButtonDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Text button default',\n  args: {\n    buttonVariant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TextButtonInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Text button inverted',\n  args: {\n    buttonVariant: 'default-inverted',\n    buttonLabel: 'I want to...',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HideSeperator",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide Seperator',\n  args: {\n    hideSeparator: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextButtonDefault",
          "declaration": {
            "name": "TextButtonDefault",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextButtonInverted",
          "declaration": {
            "name": "TextButtonInverted",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HideSeperator",
          "declaration": {
            "name": "HideSeperator",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu/action-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsActionMenu",
          "slots": [
            {
              "description": "Accepts subcomponent menu-items to be displayed in the menulist, restricted to pds-action-menu-item",
              "name": "default"
            },
            {
              "description": "Accepts subcomponent menu-items to be displayed in the footer of the menulist i.e. after the seperator, restricted to pds-action-menu-item",
              "name": "footer"
            },
            {
              "description": "Accepts icons to be displayed in button, restricted to pds-icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "buttonVariant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'icon'",
              "description": "Style buttonVariant\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "attribute": "buttonVariant"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "Small button",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "hideSeparator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes a separator in the action menu item list",
              "attribute": "hideSeparator"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "'action menu'",
              "description": "Adds a aria-label to the action menu item",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Adds a label to action menu list",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "buttonLabel",
              "type": {
                "text": "string"
              },
              "default": "'I want to...'",
              "description": "Adds a label to trigger button",
              "attribute": "buttonLabel"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is used to open and close the action menu list",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createInstance"
            },
            {
              "kind": "method",
              "name": "showMenu"
            },
            {
              "kind": "method",
              "name": "hideMenu"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleOnClickOutsideActionMenuList",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderButton"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on triggerButton click",
              "name": "pds-button-click"
            },
            {
              "description": "A custom event dispatched on menu item click",
              "name": "pds-action-menu-item-click"
            }
          ],
          "attributes": [
            {
              "name": "buttonVariant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'icon'",
              "description": "Style buttonVariant\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "fieldName": "buttonVariant"
            },
            {
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "Small button",
              "fieldName": "size"
            },
            {
              "name": "hideSeparator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes a separator in the action menu item list",
              "fieldName": "hideSeparator"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "'action menu'",
              "description": "Adds a aria-label to the action menu item",
              "fieldName": "ariaLabel"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Adds a label to action menu list",
              "fieldName": "label"
            },
            {
              "name": "buttonLabel",
              "type": {
                "text": "string"
              },
              "default": "'I want to...'",
              "description": "Adds a label to trigger button",
              "fieldName": "buttonLabel"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is used to open and close the action menu list",
              "fieldName": "open"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component provides a set of menu items to the user when the action-menu button is clicked",
          "tagName": "pds-action-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsActionMenu",
          "declaration": {
            "name": "PdsActionMenu",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-action-menu",
          "declaration": {
            "name": "PdsActionMenu",
            "module": "packages/web-components/src/lib/components/action-menu/action-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/alert/alert.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/alert/alert.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Information",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Information',\n  args: {\n    variant: 'information',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "InformationNotDismissable",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Information not dismissable',\n  args: {\n    variant: 'information',\n    hideDismissButton: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Success",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Success',\n  args: {\n    variant: 'success',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Error',\n  args: {\n    variant: 'error',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Warning",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Warning',\n  args: {\n    variant: 'warning',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Banner",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Banner',\n  args: {\n    variant: 'banner',\n  },\n  render: (args) =>\n    html`<pds-alert variant=${args.variant}\n      ><span\n        >This is an alert message.\n        <pds-link variant=\"emphasis-inverted\" href=\"#\"\n          >This is a link.</pds-link\n        ></span\n      ></pds-alert\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "InformationalWithLayoutContainer",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Informational with layout-container',\n  args: {\n    variant: 'information',\n    layoutContainerVariant: 'default',\n    layoutContainerRemovePadding: 'md',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "BannerWithLayoutContainer",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Banner with layout-container',\n  args: {\n    variant: 'banner',\n    layoutContainerVariant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "hiddenAlert",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden on load',\n  args: { variant: 'information', hiddenOnPageLoad: true },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Information",
          "declaration": {
            "name": "Information",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InformationNotDismissable",
          "declaration": {
            "name": "InformationNotDismissable",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Success",
          "declaration": {
            "name": "Success",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Warning",
          "declaration": {
            "name": "Warning",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Banner",
          "declaration": {
            "name": "Banner",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InformationalWithLayoutContainer",
          "declaration": {
            "name": "InformationalWithLayoutContainer",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "BannerWithLayoutContainer",
          "declaration": {
            "name": "BannerWithLayoutContainer",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "hiddenAlert",
          "declaration": {
            "name": "hiddenAlert",
            "module": "packages/web-components/src/lib/components/alert/alert.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/alert/alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsAlert",
          "slots": [
            {
              "description": "The contents of the alert",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'information' | 'success' | 'error' | 'warning' | 'banner'"
              },
              "default": "'information'",
              "description": "Style variant\n- **information** default, renders the alert used for informational alerts\n- **success** renders the alert used for success alerts\n- **error** renders the alert used for error alerts, is not dismissible\n- **warning** renders the alert used for warning alerts\n- **banner** renders the alert used for banner alerts, by default includes a layout-container",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "description": "Determines if we should place the header in a layout container\nIf this property isn't passed, no layout container is used.",
              "attribute": "layoutContainerVariant"
            },
            {
              "kind": "field",
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding (only to be used if layoutContainerVariant has a value)\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "attribute": "layoutContainerRemovePadding"
            },
            {
              "kind": "field",
              "name": "hideDismissButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide dismiss button",
              "attribute": "hideDismissButton"
            },
            {
              "kind": "field",
              "name": "hiddenOnPageLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show or hide alert on page load",
              "attribute": "hiddenOnPageLoad"
            },
            {
              "kind": "method",
              "name": "showAlert"
            },
            {
              "kind": "method",
              "name": "hideAlert"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on a click on the alert dismiss button",
              "name": "pds-button-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'information' | 'success' | 'error' | 'warning' | 'banner'"
              },
              "default": "'information'",
              "description": "Style variant\n- **information** default, renders the alert used for informational alerts\n- **success** renders the alert used for success alerts\n- **error** renders the alert used for error alerts, is not dismissible\n- **warning** renders the alert used for warning alerts\n- **banner** renders the alert used for banner alerts, by default includes a layout-container",
              "fieldName": "variant"
            },
            {
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "description": "Determines if we should place the header in a layout container\nIf this property isn't passed, no layout container is used.",
              "fieldName": "layoutContainerVariant"
            },
            {
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding (only to be used if layoutContainerVariant has a value)\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "fieldName": "layoutContainerRemovePadding"
            },
            {
              "name": "hideDismissButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide dismiss button",
              "fieldName": "hideDismissButton"
            },
            {
              "name": "hiddenOnPageLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show or hide alert on page load",
              "fieldName": "hiddenOnPageLoad"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component provides feedback to the user about the state of their interaction with in a page or application.",
          "tagName": "pds-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsAlert",
          "declaration": {
            "name": "PdsAlert",
            "module": "packages/web-components/src/lib/components/alert/alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-alert",
          "declaration": {
            "name": "PdsAlert",
            "module": "packages/web-components/src/lib/components/alert/alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ItemButton",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button',\n  args: { ariaLabel: 'Action 1' },\n}"
        },
        {
          "kind": "variable",
          "name": "ItemLink",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  args: {\n    ariaLabel: 'Action 1',\n    linkHref: 'https://www.principal.com',\n    target: '_blank',\n  },\n  render: (args) => {\n    return html`<pds-action-menu-item\n      ariaLabel=\"${args.ariaLabel}\"\n      linkHref=\"${args.linkHref}\"\n      target=\"${args.target}\"\n      >Action 4</pds-action-menu-item\n    >`;\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ItemButton",
          "declaration": {
            "name": "ItemButton",
            "module": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ItemLink",
          "declaration": {
            "name": "ItemLink",
            "module": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsActionMenuItem",
          "slots": [
            {
              "description": "Accepts the label for the menu item",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Adds an aria-label to the link",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Adds a target to action menu link item",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "linkHref",
              "type": {
                "text": "string"
              },
              "description": "Adds a href to the link",
              "attribute": "linkHref"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "on menu-item click",
              "name": "pds-action-menu-item-click"
            }
          ],
          "attributes": [
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Adds an aria-label to the link",
              "fieldName": "ariaLabel"
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "fieldName": "rel"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Adds a target to action menu link item",
              "fieldName": "target"
            },
            {
              "name": "linkHref",
              "type": {
                "text": "string"
              },
              "description": "Adds a href to the link",
              "fieldName": "linkHref"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is a sub component of action-menu built upon li elements",
          "tagName": "pds-action-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsActionMenuItem",
          "declaration": {
            "name": "PdsActionMenuItem",
            "module": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-action-menu-item",
          "declaration": {
            "name": "PdsActionMenuItem",
            "module": "packages/web-components/src/lib/components/action-menu-item/action-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/box-button/box-button.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/box-button/box-button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Business",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Strong',\n  args: {\n    variant: 'strong',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "CenterContentVertically",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Center content vertically',\n  args: {\n    variant: 'default',\n    centerContentVertically: true,\n    labelVariant: 'xl',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"2up\"\n      ><pds-grid-item\n        ><pds-box-button\n          variant=\"${args.variant || nothing}\"\n          centerContentVertically=\"${args.centerContentVertically || nothing}\"\n          label=\"Some default content goes here\"\n          labelVariant=\"${args.labelVariant || nothing}\"\n          ><pds-text-passage slot=\"description\"\n            ><p>This description adds additional context</p></pds-text-passage\n          ></pds-box-button\n        ></pds-grid-item\n      ><pds-grid-item\n        ><pds-box-button\n          variant=\"${args.variant || nothing}\"\n          centerContentVertically=\"${args.centerContentVertically || nothing}\"\n          label=\"Some default content goes here\"\n          labelVariant=\"${args.labelVariant || nothing}\"\n          ><pds-text-passage slot=\"description\"\n            ><p>This description adds additional context</p>\n            <p>This description adds additional context</p></pds-text-passage\n          ></pds-box-button\n        ></pds-grid-item\n      ></pds-grid\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/box-button/box-button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/box-button/box-button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Business",
          "declaration": {
            "name": "Business",
            "module": "packages/web-components/src/lib/components/box-button/box-button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CenterContentVertically",
          "declaration": {
            "name": "CenterContentVertically",
            "module": "packages/web-components/src/lib/components/box-button/box-button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/box-button/box-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsBoxButton",
          "slots": [
            {
              "description": "The description of the box button",
              "name": "description"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'strong'"
              },
              "description": "Style variant\n- **default** box button has a lighter gradient background\n- **strong** renders a box button with a darker gradient background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "description": "The href attribute of the anchor tag that surrounds the box-button",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label text that appears on the box button",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelVariant",
              "type": {
                "text": "'sm' | 'default' | 'lg' | 'xl'"
              },
              "default": "'default'",
              "description": "Specifies the typography styles of the label",
              "attribute": "labelVariant"
            },
            {
              "kind": "field",
              "name": "centerContentVertically",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds an additional class for aligning content to the vertical center of the box button",
              "attribute": "centerContentVertically"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-box-button-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'strong'"
              },
              "description": "Style variant\n- **default** box button has a lighter gradient background\n- **strong** renders a box button with a darker gradient background",
              "fieldName": "variant"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "description": "The href attribute of the anchor tag that surrounds the box-button",
              "fieldName": "href"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label text that appears on the box button",
              "fieldName": "label"
            },
            {
              "name": "labelVariant",
              "type": {
                "text": "'sm' | 'default' | 'lg' | 'xl'"
              },
              "default": "'default'",
              "description": "Specifies the typography styles of the label",
              "fieldName": "labelVariant"
            },
            {
              "name": "centerContentVertically",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds an additional class for aligning content to the vertical center of the box button",
              "fieldName": "centerContentVertically"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A clickable box that contains a primary action",
          "tagName": "pds-box-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsBoxButton",
          "declaration": {
            "name": "PdsBoxButton",
            "module": "packages/web-components/src/lib/components/box-button/box-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-box-button",
          "declaration": {
            "name": "PdsBoxButton",
            "module": "packages/web-components/src/lib/components/box-button/box-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  parameters: {\n    actions: {\n      handles: ['pds-breadcrumbs-item-click'],\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsBreadcrumbs",
          "slots": [
            {
              "description": "One or more pds-breadcrumb-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ariaLabel",
              "attribute": "ariaLabel"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ariaLabel",
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "Site breadcrumb",
          "tagName": "pds-breadcrumbs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsBreadcrumbs",
          "declaration": {
            "name": "PdsBreadcrumbs",
            "module": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-breadcrumbs",
          "declaration": {
            "name": "PdsBreadcrumbs",
            "module": "packages/web-components/src/lib/components/breadcrumbs/breadcrumbs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/button/button.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/button/button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default small',\n  args: {\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default inverted',\n  args: {\n    variant: 'default-inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Primary',\n  args: {\n    variant: 'primary',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "PrimaryInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Primary inverted',\n  args: {\n    variant: 'primary-inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n  },\n  render: (args) =>\n    html`<pds-button disabled=\"${args.disabled}\" size=\"${args.size || nothing}\"\n      ><span>Label</span></pds-button\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "FullWidth",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Full width',\n  args: {\n    fullWidth: true,\n  },\n  render: (args) =>\n    html`<pds-button\n      fullWidth=\"${args.fullWidth}\"\n      size=\"${args.size || nothing}\"\n      ><span>Label</span></pds-button\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Icon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon',\n  args: {\n    variant: 'icon',\n    ariaLabel: 'icon',\n  },\n  render: (args) =>\n    html`<pds-button\n      variant=\"${args.variant}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      size=\"${args.size || nothing}\"\n      ><pds-icon-more-horizontal></pds-icon-more-horizontal\n    ></pds-button>`,\n}"
        },
        {
          "kind": "variable",
          "name": "IconInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon inverted',\n  args: {\n    variant: 'icon-inverted',\n    ariaLabel: 'icon inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n  render: (args) =>\n    html`<pds-button\n      variant=\"${args.variant}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      size=\"${args.size || nothing}\"\n      ><pds-icon-more-horizontal></pds-icon-more-horizontal\n    ></pds-button>`,\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButton",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button',\n  args: {\n    link: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button small',\n  args: {\n    link: 'default',\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button inverted',\n  args: {\n    link: 'inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonEmphasis",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button emphasis',\n  args: {\n    link: 'emphasis',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonEmphasisInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button emphasis inverted',\n  args: {\n    link: 'emphasis-inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonIconLeft",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button icon left',\n  args: {\n    link: 'icon-left',\n  },\n  render: (args) =>\n    html`<pds-button\n      href=\"${args.href}\"\n      link=\"${args.link}\"\n      size=\"${args.size || nothing}\"\n      ><pds-icon-x slot=\"icon-left\"></pds-icon-x><span>Label</span></pds-button\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "LinkButtonIconRight",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link button icon right',\n  args: {\n    link: 'icon-right',\n  },\n  render: (args) =>\n    html`<pds-button\n      href=\"${args.href}\"\n      link=\"${args.link}\"\n      size=\"${args.size || nothing}\"\n      ><span>Label</span><pds-icon-x slot=\"icon-right\"></pds-icon-x\n    ></pds-button>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSmall",
          "declaration": {
            "name": "DefaultSmall",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultInverted",
          "declaration": {
            "name": "DefaultInverted",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PrimaryInverted",
          "declaration": {
            "name": "PrimaryInverted",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FullWidth",
          "declaration": {
            "name": "FullWidth",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconInverted",
          "declaration": {
            "name": "IconInverted",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButton",
          "declaration": {
            "name": "LinkButton",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonSmall",
          "declaration": {
            "name": "LinkButtonSmall",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonInverted",
          "declaration": {
            "name": "LinkButtonInverted",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonEmphasis",
          "declaration": {
            "name": "LinkButtonEmphasis",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonEmphasisInverted",
          "declaration": {
            "name": "LinkButtonEmphasisInverted",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonIconLeft",
          "declaration": {
            "name": "LinkButtonIconLeft",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkButtonIconRight",
          "declaration": {
            "name": "LinkButtonIconRight",
            "module": "packages/web-components/src/lib/components/button/button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsButton",
          "slots": [
            {
              "description": "The contents of the button, restricted to pds-icon elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "**default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'default'",
              "description": "Small button",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled button",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "FullWidth button",
              "attribute": "fullWidth"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'submit' | 'reset' | 'button'"
              },
              "default": "'submit'",
              "description": "**submit** specifies submit type button for form-data submit, default\n- **reset** specifies reset type button for form-data reset\n- **button** specifies clickable button type",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "| 'default'\n    | 'inverted'\n    | 'emphasis'\n    | 'emphasis-inverted'\n    | 'icon-left'\n    | 'icon-right'\n    | ''"
              },
              "default": "''",
              "description": "Render the button as a link variant\n\n- **default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background\n- **icon-left** link with icon left\n- **icon-right** link with icon right",
              "attribute": "link"
            },
            {
              "kind": "field",
              "name": "removeLinkPadding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Remove padding from link button. Default is false.",
              "attribute": "removeLinkPadding"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Screen reader label for button",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "ariaControls",
              "type": {
                "text": "string"
              },
              "description": "A space-separated list of element IDs that the button controls",
              "attribute": "ariaControls"
            },
            {
              "kind": "field",
              "name": "ariaDescribedby",
              "type": {
                "text": "string"
              },
              "description": "An element ID which identifies the element (or elements) that describes the element on which the attribute is set.",
              "attribute": "ariaDescribedby"
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is a faux focus effect to show the effect of being focused without\nactually being focused.",
              "attribute": "isActive"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addSizeToButtonIcon"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "submitOrResetAssociatedForm",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "internals"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-button-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "**default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'default'",
              "description": "Small button",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled button",
              "fieldName": "disabled"
            },
            {
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "FullWidth button",
              "fieldName": "fullWidth"
            },
            {
              "name": "type",
              "type": {
                "text": "'submit' | 'reset' | 'button'"
              },
              "default": "'submit'",
              "description": "**submit** specifies submit type button for form-data submit, default\n- **reset** specifies reset type button for form-data reset\n- **button** specifies clickable button type",
              "fieldName": "type"
            },
            {
              "name": "link",
              "type": {
                "text": "| 'default'\n    | 'inverted'\n    | 'emphasis'\n    | 'emphasis-inverted'\n    | 'icon-left'\n    | 'icon-right'\n    | ''"
              },
              "default": "''",
              "description": "Render the button as a link variant\n\n- **default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background\n- **icon-left** link with icon left\n- **icon-right** link with icon right",
              "fieldName": "link"
            },
            {
              "name": "removeLinkPadding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Remove padding from link button. Default is false.",
              "fieldName": "removeLinkPadding"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Screen reader label for button",
              "fieldName": "ariaLabel"
            },
            {
              "name": "ariaControls",
              "type": {
                "text": "string"
              },
              "description": "A space-separated list of element IDs that the button controls",
              "fieldName": "ariaControls"
            },
            {
              "name": "ariaDescribedby",
              "type": {
                "text": "string"
              },
              "description": "An element ID which identifies the element (or elements) that describes the element on which the attribute is set.",
              "fieldName": "ariaDescribedby"
            },
            {
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is a faux focus effect to show the effect of being focused without\nactually being focused.",
              "fieldName": "isActive"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A styled button element",
          "tagName": "pds-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsButton",
          "declaration": {
            "name": "PdsButton",
            "module": "packages/web-components/src/lib/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-button",
          "declaration": {
            "name": "PdsButton",
            "module": "packages/web-components/src/lib/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        },
        {
          "kind": "variable",
          "name": "Active",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Active',\n  render: () =>\n    html`<pds-breadcrumbs>\n      <pds-breadcrumbs-item active>Breadcrumb 1</pds-breadcrumbs-item>\n    </pds-breadcrumbs>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Active",
          "declaration": {
            "name": "Active",
            "module": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsBreadcrumbsItem",
          "slots": [
            {
              "description": "The content of the breadcrumbs item",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Active denotes current breadcrumb-item rendering it non-clickable.",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "description": "Href supplies the url for the breadcrumb link",
              "attribute": "href"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-breadcrumbs-item-click"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Active denotes current breadcrumb-item rendering it non-clickable.",
              "fieldName": "active"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "description": "Href supplies the url for the breadcrumb link",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A breadcrumbs-item (li) element",
          "tagName": "pds-breadcrumbs-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsBreadcrumbsItem",
          "declaration": {
            "name": "PdsBreadcrumbsItem",
            "module": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-breadcrumbs-item",
          "declaration": {
            "name": "PdsBreadcrumbsItem",
            "module": "packages/web-components/src/lib/components/breadcrumbs-item/breadcrumbs-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/card/card.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/card/card.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Bare",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Bare',\n  args: {\n    variant: 'bare',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Clickable",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Clickable',\n  args: {\n    href: 'https://www.principal.com',\n    target: '_blank',\n    ariaLabel: 'This is an aria label',\n  },\n  render: (args) =>\n    html`<pds-card\n      href=\"${args.href}\"\n      target=\"${args.target || nothing}\"\n      ariaLabel=\"${args.ariaLabel || nothing}\"\n      centerContentVertically=\"${args.centerContentVertically || nothing}\"\n    >\n      <div slot=\"header\">\n        <placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n          >Card header slot</placeholder-element\n        >\n      </div>\n      <div>\n        <pds-link href=\"https://www.principal.com\" target=\"_blank\"\n          >Example link</pds-link\n        >\n      </div>\n      <div slot=\"footer\">\n        <placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n          >Card footer slot</placeholder-element\n        >\n      </div>\n    </pds-card>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ClickableNoInternalLink",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Clickable no internal link',\n  args: {\n    target: '_blank',\n    href: `https://www.principal.com/individuals/invest-retire/individual-retirement-account?alert('xss')`,\n    ariaLabel: 'This is an aria label',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Horizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal',\n  args: { direction: 'horizontal' },\n}"
        },
        {
          "kind": "variable",
          "name": "SmallBorderRadius",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Small border radius',\n  args: { borderRadiusSize: 'sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "RemovePadding",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove default padding',\n  args: { removePadding: true },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalWithoutPadding",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal without padding',\n  args: { removePadding: true, direction: 'horizontal' },\n  render: (args) =>\n    html`<pds-card\n      variant=\"${args.variant || nothing}\"\n      href=\"${args.href || nothing}\"\n      centerContentVertically=\"${args.centerContentVertically || nothing}\"\n      target=\"${args.target || nothing}\"\n      removePadding=\"${args.removePadding || nothing}\"\n      ariaLabel=\"${args.ariaLabel || nothing}\"\n      direction=\"${args.direction || nothing}\"\n      borderRadiusSize=\"${args.borderRadiusSize || nothing}\"\n    >\n      <div slot=\"header\">\n        <placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n          >Card header slot</placeholder-element\n        >\n      </div>\n      <placeholder-element\n        inlineStyle=\"height: 118px; display: flex; align-items: center; justify-content: center;\"\n        ><p>Card body slot</p></placeholder-element\n      >\n      <div slot=\"footer\">\n        <placeholder-element\n          inlineStyle=\"height: 118px; display: flex; align-items: center; justify-content: center;\"\n          >Card footer slot</placeholder-element\n        >\n      </div>\n    </pds-card>`,\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalWithUtilClasses",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal with util class',\n  render: () =>\n    html`<pds-card direction=\"horizontal\" class=\"pds-u-background-subtle\">\n      <div slot=\"header\">\n        <placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n          >Card header slot</placeholder-element\n        >\n      </div>\n      <placeholder-element\n        inlineStyle=\"height: 118px; display: flex; align-items: center; justify-content: center;\"\n        ><p>Card body slot</p></placeholder-element\n      >\n      <div slot=\"footer\">\n        <placeholder-element\n          inlineStyle=\"height: 118px; display: flex; align-items: center; justify-content: center;\"\n          >Card footer slot</placeholder-element\n        >\n      </div>\n    </pds-card>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Bare",
          "declaration": {
            "name": "Bare",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Clickable",
          "declaration": {
            "name": "Clickable",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClickableNoInternalLink",
          "declaration": {
            "name": "ClickableNoInternalLink",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SmallBorderRadius",
          "declaration": {
            "name": "SmallBorderRadius",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemovePadding",
          "declaration": {
            "name": "RemovePadding",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalWithoutPadding",
          "declaration": {
            "name": "HorizontalWithoutPadding",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalWithUtilClasses",
          "declaration": {
            "name": "HorizontalWithUtilClasses",
            "module": "packages/web-components/src/lib/components/card/card.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsCard",
          "slots": [
            {
              "description": "This slot holds the header content of the card",
              "name": "header"
            },
            {
              "description": "This is the body content of the card",
              "name": "default"
            },
            {
              "description": "This slot holds the footer content of the card",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'bare'"
              },
              "default": "'default'",
              "description": "**default** renders a card with a subtle border and padding\n- **bare** renders a card without a border or drop shadow",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "borderRadiusSize",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders a card with a border radius of 8px\n- **sm** renders a card with a border radius of 4px",
              "attribute": "borderRadiusSize"
            },
            {
              "kind": "field",
              "name": "centerContentVertically",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds an additional class for aligning items to the vertical center of the card.",
              "attribute": "centerContentVertically"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "'horizontal' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders a card in a vertical format\n- **horizontal** renders a card in a horizontal format",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Provides the src value for the href card, renders a clickable card\nstyled with a drop shadow but no border",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used in combination with the href property to determine the target\nfor the clickable card. Not providing a value opens link in the same tab.\nFor a complete list of valid strings, see https://html.spec.whatwg.org/multipage/document-sequences.html#valid-navigable-target-name-or-keyword",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ARIA label string that describes a clickable pds-card for screen reader users",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "removePadding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, this property will remove the default padding from the card and\nthe content will extend all the way to the edges",
              "attribute": "removePadding"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseout",
              "description": "On mouseout, a clickable card will remove the attribute 'hover' on\nelements with a class of .pds-c-card__element-with-hover-state"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "{ target: { assignedElements: () => any } }"
                  }
                }
              ],
              "description": "This function checks for <pds-link> and <a> tags within the card,\n(first as the only slotted item, then as a child of a slotted item)\nand then adds the hover class that is targeted to provide the hover\nattribute when a clickable card is hovered.\n\nThe <pds-link> tag will handle the hover effect due to the built\nin support for the 'hover' attribute. An <a> tag will need to have\nthe hover effect coded by the consuming application."
            },
            {
              "kind": "method",
              "name": "preflight"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on a card click when href is provided",
              "name": "pds-card-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'bare'"
              },
              "default": "'default'",
              "description": "**default** renders a card with a subtle border and padding\n- **bare** renders a card without a border or drop shadow",
              "fieldName": "variant"
            },
            {
              "name": "borderRadiusSize",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders a card with a border radius of 8px\n- **sm** renders a card with a border radius of 4px",
              "fieldName": "borderRadiusSize"
            },
            {
              "name": "centerContentVertically",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds an additional class for aligning items to the vertical center of the card.",
              "fieldName": "centerContentVertically"
            },
            {
              "name": "direction",
              "type": {
                "text": "'horizontal' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders a card in a vertical format\n- **horizontal** renders a card in a horizontal format",
              "fieldName": "direction"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Provides the src value for the href card, renders a clickable card\nstyled with a drop shadow but no border",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used in combination with the href property to determine the target\nfor the clickable card. Not providing a value opens link in the same tab.\nFor a complete list of valid strings, see https://html.spec.whatwg.org/multipage/document-sequences.html#valid-navigable-target-name-or-keyword",
              "fieldName": "target"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ARIA label string that describes a clickable pds-card for screen reader users",
              "fieldName": "ariaLabel"
            },
            {
              "name": "removePadding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, this property will remove the default padding from the card and\nthe content will extend all the way to the edges",
              "fieldName": "removePadding"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component creates a card container for other elements",
          "tagName": "pds-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsCard",
          "declaration": {
            "name": "PdsCard",
            "module": "packages/web-components/src/lib/components/card/card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-card",
          "declaration": {
            "name": "PdsCard",
            "module": "packages/web-components/src/lib/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/checkbox/checkbox.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    label: 'This checkbox is not disabled or checked.',\n    name: 'defaultCheckbox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    label: 'This checkbox is disabled',\n    disabled: true,\n    name: 'disabledCheckbox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Checked",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Checked',\n  args: {\n    label: 'This checkbox is checked.',\n    checked: true,\n    name: 'checkedCheckBox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DisabledChecked",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled checked',\n  args: {\n    label: 'This checkbox is disabled and checked.',\n    checked: true,\n    disabled: true,\n    name: 'disabledCheckedCheckbox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Required",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Required',\n  args: {\n    label: 'This checkbox is required.',\n    required: true,\n    name: 'requiredCheckBox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    label: 'This label is hidden.',\n    hideLabel: true,\n    name: 'hiddenLabelCheckbox',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Error',\n  args: {\n    label: 'This checkbox has an error.',\n    errorMessage: 'This is the error message.',\n    name: 'nameCheckbox',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checked",
          "declaration": {
            "name": "Checked",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledChecked",
          "declaration": {
            "name": "DisabledChecked",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsCheckbox",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additional markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additional markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "description": "The value tied to the checkbox.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates whether the checkbox is checked.",
              "attribute": "checked"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the input checked back it to its original checked attribute",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-checkbox-change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-checkbox-blur",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-checkbox-focus",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value tied to the checkbox.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates whether the checkbox is checked.",
              "fieldName": "checked"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "A checkbox",
          "tagName": "pds-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsCheckbox",
          "declaration": {
            "name": "PdsCheckbox",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-checkbox",
          "declaration": {
            "name": "PdsCheckbox",
            "module": "packages/web-components/src/lib/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/collapsible/collapsible.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n  parameters: {\n    actions: {\n      handles: ['pds-collapsible-open', 'pds-collapsible-close'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: { variant: 'inverted' },\n  parameters: {\n    actions: {\n      handles: ['pds-collapsible-open', 'pds-collapsible-close'],\n    },\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Strong",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Strong',\n  args: { variant: 'strong' },\n  parameters: {\n    actions: {\n      handles: ['pds-collapsible-open', 'pds-collapsible-close'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "MultipleItems",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Multiple items',\n  args: { variant: 'default' },\n  parameters: {\n    actions: {\n      handles: ['pds-collapsible-open', 'pds-collapsible-close'],\n    },\n  },\n  render: (args) =>\n    html`<pds-collapsible variant=\"${args.variant}\" ?open=\"${args.open}\"\n        ><span slot=\"summary-title\">What is a 1099 tax form?</span\n        ><span slot=\"collapsible-content\"\n          >Form 1099 is a series of forms described by the Internal Revenue\n          Service (IRS) as “information returns”, used to report income other\n          than a regular salary.</span\n        >\n      </pds-collapsible>\n      <pds-collapsible variant=\"${args.variant}\" ?open=\"${args.open}\"\n        ><span slot=\"summary-title\">What is a 1098 tax form?</span\n        ><span slot=\"collapsible-content\"\n          >Form 1098 is a series of forms described by the Internal Revenue\n          Service (IRS) as “information returns”, used to report income other\n          than a regular salary.</span\n        >\n      </pds-collapsible>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Description",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Description',\n  args: {},\n  parameters: {\n    actions: {\n      handles: ['pds-collapsible-open', 'pds-collapsible-close'],\n    },\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n        const component = document.querySelector('pds-collapsible');\n\n        component?.shadowRoot\n          ?.querySelector('.pds-c-collapsible__summary')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 1000,\n    },\n  },\n  render: () =>\n    html`<pds-collapsible\n      ><span slot=\"summary-title\">What is a 1099 tax form?</span>\n      <span slot=\"summary-description\">This is an optional description</span\n      ><span slot=\"collapsible-content\"\n        >Form 1099 is a series of forms described by the Internal Revenue\n        Service (IRS) as “information returns”, used to report income other than\n        a regular salary.</span\n      >\n    </pds-collapsible>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Strong",
          "declaration": {
            "name": "Strong",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "MultipleItems",
          "declaration": {
            "name": "MultipleItems",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Description",
          "declaration": {
            "name": "Description",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/collapsible/collapsible.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsCollapsible",
          "slots": [
            {
              "description": "This slot holds the header summary title",
              "name": "summary-title"
            },
            {
              "description": "This slot holds the summary description",
              "name": "summary-description"
            },
            {
              "description": "This is the slot where the hidden/shown content will go",
              "name": "collapsible-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted' | 'strong'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard collapsible color variant\n- **inverted** renders the collapsible on dark backgrounds\n- **strong** renders the strong collapsible color variant",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the collapsible is open or not",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Because we require animation we have to override the default behavior of the disclosure widget."
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Toggle the collapsible to either open or closed."
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Close the collapsible by setting the height of the details element to the height of the summary element"
            },
            {
              "kind": "method",
              "name": "expand",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Open the collapsible by setting the height of the details elememt to the height of the summary and content elements"
            },
            {
              "kind": "method",
              "name": "animateExpand",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Start the expand animation"
            },
            {
              "kind": "method",
              "name": "onAnimationFinish",
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "When the animation is finished ensure that the details element's\nopen attribute is set to the correct value and the height\nand overflow properties are reset."
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click when collapsible is opened",
              "name": "pds-collapsible-open"
            },
            {
              "description": "A custom event dispatched on click when collapsible is closed",
              "name": "pds-collapsible-close"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted' | 'strong'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard collapsible color variant\n- **inverted** renders the collapsible on dark backgrounds\n- **strong** renders the strong collapsible color variant",
              "fieldName": "variant"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the collapsible is open or not",
              "fieldName": "open"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is a collapsible that toggles content when the header is clicked",
          "tagName": "pds-collapsible",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsCollapsible",
          "declaration": {
            "name": "PdsCollapsible",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-collapsible",
          "declaration": {
            "name": "PdsCollapsible",
            "module": "packages/web-components/src/lib/components/collapsible/collapsible.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "columnsModelOne",
          "default": "html`<!-- Column definitions begin -->\n  <pds-data-table-columns slot=\"columns\">\n    <pds-data-table-column columnId=\"firstName\">\n      First name</pds-data-table-column\n    >\n\n    <pds-data-table-column columnId=\"lastName\">Last name</pds-data-table-column>\n\n    <pds-data-table-column columnId=\"alterEgo\">\n      Alter ego\n    </pds-data-table-column>\n\n    <pds-data-table-column columnId=\"salary\" align=\"right\">\n      Salary\n    </pds-data-table-column>\n\n    <pds-data-table-column\n      header=\"Action\"\n      width=\"150px\"\n      align=\"center\"\n      columnId=\"actionMenu\"\n      type=\"display\"\n      disableSort\n    >\n      <pds-action-menu label=\"I want to...\">\n        <pds-action-menu-item\n          arialabel=\"Action 1\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 1</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 2\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 2</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 3\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 3</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 4\"\n          linkhref=\"https://www.principal.com\"\n          target=\"_blank\"\n          slot=\"footer\"\n          >Action 4</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 4\"\n          linkhref=\"https://www.principal.com\"\n          target=\"_blank\"\n          slot=\"footer\"\n          >Action 5</pds-action-menu-item\n        >\n      </pds-action-menu>\n    </pds-data-table-column>\n  </pds-data-table-columns>\n  <!-- Column definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "columnsModelTwo",
          "default": "html`<!-- Column definitions begin -->\n  <pds-data-table-columns slot=\"columns\">\n    <pds-data-table-column columnId=\"firstName\">\n      First name\n    </pds-data-table-column>\n\n    <pds-data-table-column columnId=\"lastName\">\n      Last name\n    </pds-data-table-column>\n\n    <pds-data-table-column columnId=\"alterEgo\">\n      Alter ego\n    </pds-data-table-column>\n\n    <pds-data-table-column\n      width=\"200px\"\n      align=\"center\"\n      header=\"Action\"\n      columnId=\"actionMenu\"\n      type=\"display\"\n      disableSort\n    >\n      <pds-action-menu label=\"I want to...\">\n        <pds-action-menu-item\n          arialabel=\"Action 1\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 1</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 2\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 2</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 3\"\n          onClick=\"console.log('Click from ' + event.target.textContent + ' in row index  ' + event.target.closest('.pds-c-table__tr').getAttribute('key'))\"\n          >Action 3</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 4\"\n          linkhref=\"https://www.principal.com\"\n          target=\"_blank\"\n          slot=\"footer\"\n          >Action 4</pds-action-menu-item\n        >\n        <pds-action-menu-item\n          arialabel=\"Action 4\"\n          linkhref=\"https://www.principal.com\"\n          target=\"_blank\"\n          slot=\"footer\"\n          >Action 5</pds-action-menu-item\n        >\n      </pds-action-menu>\n    </pds-data-table-column>\n  </pds-data-table-columns>\n  <!-- Column definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "columnsModelThree",
          "default": "html`<!-- Column definitions begin -->\n  <pds-data-table-columns slot=\"columns\">\n    <pds-data-table-column columnId=\"firstName\">\n      First name\n    </pds-data-table-column>\n\n    <pds-data-table-column columnId=\"lastName\">\n      Last name\n    </pds-data-table-column>\n\n    <pds-data-table-column columnId=\"alterEgo\">\n      Alter ego\n    </pds-data-table-column>\n\n    <pds-data-table-column\n      columnId=\"action\"\n      header=\"Action\"\n      disableSort\n      type=\"display\"\n      width=\"110px\"\n    >\n      <pds-button\n        link=\"default\"\n        removeLinkPadding\n        onClick=\"console.log('Click from row index ' + this.closest('.pds-c-table__tr').getAttribute('key'))\"\n        >Download</pds-button\n      >\n    </pds-data-table-column>\n  </pds-data-table-columns>\n  <!-- Column definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "columnsModelFour",
          "default": "html`<!-- Column definitions begin -->\n  <pds-data-table-columns slot=\"columns\">\n    <pds-data-table-column columnId=\"firstName\">\n      First name\n    </pds-data-table-column>\n\n    <pds-data-table-input-column\n      columnId=\"editFirstName\"\n      dataSyncId=\"firstName\"\n      width=\"200px\"\n      >First name<pds-text-input\n        slot=\"input\"\n        hideLabel\n        size=\"sm\"\n        label=\"edit first name\"\n        name=\"First name\"\n      ></pds-text-input>\n    </pds-data-table-input-column>\n\n    <pds-data-table-column columnId=\"lastName\">\n      Last name\n    </pds-data-table-column>\n\n    <pds-data-table-column hidden columnId=\"salary\"\n      >Salary</pds-data-table-column\n    >\n\n    <pds-data-table-column hidden columnId=\"universe\"></pds-data-table-column>\n\n    <pds-data-table-input-column\n      columnId=\"editUniverse\"\n      dataSyncId=\"universe\"\n      width=\"175px\"\n      ><span\n        >Universe<pds-tooltip variant=\"subtle\" placement=\"bottom\">\n          <pds-button\n            slot=\"trigger\"\n            variant=\"icon\"\n            size=\"sm\"\n            arialabel=\"This is help for this input column\"\n          >\n            <pds-icon-help-circle></pds-icon-help-circle\n          ></pds-button>\n          What comic universe is this individual from</pds-tooltip\n        ></span\n      >\n      <pds-select\n        slot=\"input\"\n        name=\"select-field\"\n        label=\"Comic universe\"\n        size=\"sm\"\n        hideLabel\n      >\n        <option value=\"DC\">DC</option>\n        <option value=\"Marvel\">Marvel</option>\n      </pds-select>\n    </pds-data-table-input-column>\n    <pds-data-table-input-column\n      columnId=\"editActive\"\n      dataSyncId=\"active\"\n      width=\"175px\"\n      ><span>Active</span>\n      <pds-switch\n        slot=\"input\"\n        name=\"active-field\"\n        label=\"Active\"\n        hideLabel\n      ></pds-switch>\n    </pds-data-table-input-column>\n    <pds-data-table-column columnId=\"alterEgo\">\n      Alter ego\n    </pds-data-table-column>\n\n    <pds-data-table-input-column\n      columnId=\"editSalary\"\n      dataSyncId=\"salary\"\n      width=\"200px\"\n      >Salary<pds-text-input\n        slot=\"input\"\n        hideLabel\n        size=\"sm\"\n        label=\"edit salary\"\n        name=\"Salary\"\n      ></pds-text-input>\n    </pds-data-table-input-column>\n  </pds-data-table-columns>\n  <!-- Column definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "rowsModelOne",
          "default": "html`<!-- Row definitions begin -->\n  <pds-data-table-rows slot=\"rows\">\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Diana</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Prince</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"universe\">DC</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"active\">on</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Wonder Woman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Tony</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Stark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"universe\">Marvel</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"active\">off</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$10,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Iron Man</pds-data-table-cell>\n    </pds-data-table-row>\n  </pds-data-table-rows>\n  <!-- Row definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "rowsModelCollapsible",
          "default": "html`<!-- Row definitions begin -->\n  <pds-data-table-rows slot=\"rows\">\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row> </pds-data-table-row\n    ><pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$100,000,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of Michael\n        Jordan</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of Michael\n          Jordan</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of Michael\n              Jordan</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"salary\">$50,000</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"filterableContent\"\n        >This is a full width table cell touting the career of\n        Aquaman</pds-data-table-cell\n      >\n      <pds-data-table-row>\n        <pds-data-table-cell cellId=\"filterableContent\"\n          >This is a full width table cell touting the career of\n          Aquaman</pds-data-table-cell\n        >\n        <pds-data-table-cell cellId=\"fullWidth\"\n          ><pds-card direction=\"horizontal\">\n            <div slot=\"header\">\n              <img\n                alt=\"basketball\"\n                src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' enable-background='new 0 0 100 100' xml:space='preserve' height='100px' width='100px'%3E%250A%3Cg%3E%250A%2509%3Cpath d='M28.1,36.6c4.6,1.9,12.2,1.6,20.9,1.1c8.9-0.4,19-0.9,28.9,0.9c6.3,1.2,11.9,3.1,16.8,6c-1.5-12.2-7.9-23.7-18.6-31.3 c-4.9-0.2-9.9,0.3-14.8,1.4C47.8,17.9,36.2,25.6,28.1,36.6z'/%3E%250A%2509%3Cpath d='M70.3,9.8C57.5,3.4,42.8,3.6,30.5,9.5c-3,6-8.4,19.6-5.3,24.9c8.6-11.7,20.9-19.8,35.2-23.1C63.7,10.5,67,10,70.3,9.8z'/%3E%250A%2509%3Cpath d='M16.5,51.3c0.6-1.7,1.2-3.4,2-5.1c-3.8-3.4-7.5-7-11-10.8c-2.1,6.1-2.8,12.5-2.3,18.7C9.6,51.1,13.4,50.2,16.5,51.3z'/%3E%250A%2509%3Cpath d='M9,31.6c3.5,3.9,7.2,7.6,11.1,11.1c0.8-1.6,1.7-3.1,2.6-4.6c0.1-0.2,0.3-0.4,0.4-0.6c-2.9-3.3-3.1-9.2-0.6-17.6 c0.8-2.7,1.8-5.3,2.7-7.4c-5.2,3.4-9.8,8-13.3,13.7C10.8,27.9,9.8,29.7,9,31.6z'/%3E%250A%2509%3Cpath d='M15.4,54.7c-2.6-1-6.1,0.7-9.7,3.4c1.2,6.6,3.9,13,8,18.5C13,69.3,13.5,61.8,15.4,54.7z'/%3E%250A%2509%3Cpath d='M39.8,57.6C54.3,66.7,70,73,86.5,76.4c0.6-0.8,1.1-1.6,1.7-2.5c4.8-7.7,7-16.3,6.8-24.8c-13.8-9.3-31.3-8.4-45.8-7.7 c-9.5,0.5-17.8,0.9-23.2-1.7c-0.1,0.1-0.2,0.3-0.3,0.4c-1,1.7-2,3.4-2.9,5.1C28.2,49.7,33.8,53.9,39.8,57.6z'/%3E%250A%2509%3Cpath d='M26.2,88.2c3.3,2,6.7,3.6,10.2,4.7c-3.5-6.2-6.3-12.6-8.8-18.5c-3.1-7.2-5.8-13.5-9-17.2c-1.9,8-2,16.4-0.3,24.7 C20.6,84.2,23.2,86.3,26.2,88.2z'/%3E%250A%2509%3Cpath d='M30.9,73c2.9,6.8,6.1,14.4,10.5,21.2c15.6,3,32-2.3,42.6-14.6C67.7,76,52.2,69.6,37.9,60.7C32,57,26.5,53,21.3,48.6 c-0.6,1.5-1.2,3-1.7,4.6C24.1,57.1,27.3,64.5,30.9,73z'/%3E%250A%3C/g%3E%250A%3C/svg%3E\"\n              />\n            </div>\n            <span\n              >This is a full width table cell touting the career of\n              Aquaman</span\n            >\n          </pds-card>\n        </pds-data-table-cell>\n      </pds-data-table-row>\n    </pds-data-table-row>\n  </pds-data-table-rows>\n  <!-- Row definitions end -->`"
        },
        {
          "kind": "variable",
          "name": "rowsModelPagination",
          "default": "html`<!-- Row definitions begin -->\n  <pds-data-table-rows slot=\"rows\">\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\"\n        ><span data-info=\"to demonstrate data within a node\">Michael</span\n        ><span>J</span></pds-data-table-cell\n      >\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Diana</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Prince</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Wonder Woman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Tony</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Stark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">complicated</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Iron Man</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Not Tony</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Stark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">complicated</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Not Iron Man</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Diana</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Prince</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Wonder Woman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Tony</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Stark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">complicated</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Iron Man</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Scott</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Michael Scarn</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Junie B</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jones</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\"\n        >Junie Beatrice Jones</pds-data-table-cell\n      >\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">David</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Bowie</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\"\n        >Ziggy Stardust</pds-data-table-cell\n      >\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Clark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Kent</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Superman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Doctor</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jekyll</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Mr. Hyde</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Miley</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Cyrus</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\"\n        >Hannah Montana</pds-data-table-cell\n      >\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Bruce</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Wayne</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Batman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Not Bruce</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Wayne</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Batman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Michael</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Scott</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Michael Scarn</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\"\n        ><span data-info=\"to demonstrate data within a node\">Michael</span\n        ><span>J</span></pds-data-table-cell\n      >\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Diana</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Prince</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Wonder Woman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Tony</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Stark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">complicated</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Iron Man</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Clark</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Kent</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Superman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Doctor</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Jekyll</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Mr. Hyde</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\"\n        ><span data-info=\"to demonstrate data within a node\">Michael</span\n        ><span>J</span></pds-data-table-cell\n      >\n      <pds-data-table-cell cellId=\"lastName\">Jordan</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Air Jordan</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Arthur</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Curry</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Aquaman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Diana</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Prince</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">single</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\">Wonder Woman</pds-data-table-cell>\n    </pds-data-table-row>\n    <pds-data-table-row>\n      <pds-data-table-cell cellId=\"firstName\">Miley</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"lastName\">Cyrus</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"status\">relationship</pds-data-table-cell>\n      <pds-data-table-cell cellId=\"alterEgo\"\n        >Hannah Montana</pds-data-table-cell\n      >\n    </pds-data-table-row>\n  </pds-data-table-rows>\n  <!-- Row definitions end -->`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "columnsModelOne",
          "declaration": {
            "name": "columnsModelOne",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "columnsModelTwo",
          "declaration": {
            "name": "columnsModelTwo",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "columnsModelThree",
          "declaration": {
            "name": "columnsModelThree",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "columnsModelFour",
          "declaration": {
            "name": "columnsModelFour",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "rowsModelOne",
          "declaration": {
            "name": "rowsModelOne",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "rowsModelCollapsible",
          "declaration": {
            "name": "rowsModelCollapsible",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        },
        {
          "kind": "js",
          "name": "rowsModelPagination",
          "declaration": {
            "name": "rowsModelPagination",
            "module": "packages/web-components/src/lib/components/data-table/data-table-stories-data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table/data-table-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "flexRender",
          "parameters": [
            {
              "name": "Comp",
              "type": {
                "text": "((props: TProps) => string) | string | undefined"
              }
            },
            {
              "name": "props",
              "type": {
                "text": "TProps"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "usePDSTable",
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "TableOptions<TData>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "returnLoadingMarkup",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "returnFilterMarkup",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "returnPaginatorMarkup",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "flexRender",
          "declaration": {
            "name": "flexRender",
            "module": "packages/web-components/src/lib/components/data-table/data-table-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "usePDSTable",
          "declaration": {
            "name": "usePDSTable",
            "module": "packages/web-components/src/lib/components/data-table/data-table-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "returnLoadingMarkup",
          "declaration": {
            "name": "returnLoadingMarkup",
            "module": "packages/web-components/src/lib/components/data-table/data-table-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "returnFilterMarkup",
          "declaration": {
            "name": "returnFilterMarkup",
            "module": "packages/web-components/src/lib/components/data-table/data-table-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "returnPaginatorMarkup",
          "declaration": {
            "name": "returnPaginatorMarkup",
            "module": "packages/web-components/src/lib/components/data-table/data-table-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table/data-table.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table/data-table.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table',\n  component: 'pds-data-table',\n  tags: ['autodocs'],\n  render: (args) =>\n    html`<pds-data-table\n      striped=${args.striped || nothing}\n      fixedHeight=${args.fixedHeight || nothing}\n      ?stickyColumn=${args.stickyColumn}\n      ?stickyHeader=${args.stickyHeader}\n      ?removeBorder=${args.removeBorder}\n      ?hoverableRows=${args.hoverableRows}\n      paginationVariant=${args.paginationVariant || nothing}\n      globalFilter=${args.globalFilter || nothing}\n      ?hideFilter=${args.hideFilter}\n      ?expandAllOnLoad=${args.expandAllOnLoad}\n      columns=${args.columns || nothing}\n      rows=${args.rows || nothing}\n      ?disableAllSorting=${args.disableAllSorting}\n      ?hideCaption=${args.hideCaption}\n      ><div slot=\"caption\">\n        <pds-heading headingTag=\"h3\" variant=\"title-default\"\n          >Example table heading</pds-heading\n        >\n      </div>\n      ${args.columnsSlot} ${args.rowsSlot}\n    </pds-data-table>`,\n  parameters: {\n    happo: {\n      // @ts-expect-error\n      waitFor: () => document.querySelector('pds-data-table')?.updateComplete,\n      delay: 1000,\n    },\n    docs: {\n      description: {\n        component: 'Note: This table component uses the _light-dom_.',\n      },\n    },\n    actions: {\n      handles: [\n        'pds-data-table-input-updated',\n        'pds-data-table-sorted',\n        'pds-pagination-click',\n        'pds-pagination-item-click',\n        'pds-text-input-change',\n        'pds-text-input-input',\n        'pds-select-change',\n        'pds-switch-toggle-on',\n        'pds-switch-toggle-off',\n      ],\n    },\n  },\n  argTypes: {\n    columnsSlot: { table: { disable: true } },\n    rowsSlot: { table: { disable: true } },\n    sortable: { table: { disable: true } },\n    striped: {\n      control: 'select',\n      options: ['odd', 'even', 'default'],\n    },\n    paginationVariant: {\n      control: 'select',\n      options: ['arrows', 'no-arrows', 'none', 'default'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    columnsSlot: columnsModelTwo,\n    rowsSlot: rowsModelPagination,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "StripedEven",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Striped even',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    striped: 'even',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HideFilter",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide filter',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    hideFilter: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ExpandableRow",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Expandable row',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelCollapsible,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "RemoveBorder",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove border',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    removeBorder: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DataTableWithStickyHeader",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Sticky header',\n  args: {\n    stickyHeader: true,\n    paginationVariant: 'none',\n    columnsSlot: columnsModelTwo,\n    rowsSlot: rowsModelPagination,\n  },\n  parameters: {\n    happo: {\n      waitFor: document\n        .querySelector('pds-data-table')\n        ?.shadowRoot?.querySelector('.pds-c-table--is-pinned'),\n      beforeScreenshot: () => {\n        setTimeout(() => {\n          document\n            .querySelector('pds-data-table')\n            ?.shadowRoot?.querySelector('pds-table')\n            ?.shadowRoot?.querySelector('.pds-c-table__wrapper')\n            ?.scrollTo(0, 100);\n          document\n            .querySelector('pds-data-table')\n            ?.shadowRoot?.querySelector('pds-table')\n            ?.shadowRoot?.querySelector('.pds-c-table__wrapper')\n            ?.scrollTo(0, 0);\n        }, 200);\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DataTableWithStickyColumn",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Sticky column',\n  args: {\n    stickyColumn: true,\n    columnsSlot: columnsModelTwo,\n    rowsSlot: rowsModelPagination,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DataTableWithFixedHeightAndStickyHeader",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Fixed height and sticky header',\n  args: {\n    stickyHeader: true,\n    fixedHeight: '300px',\n    paginationVariant: 'none',\n    columnsSlot: columnsModelTwo,\n    rowsSlot: rowsModelPagination,\n  },\n  parameters: {\n    happo: {\n      waitFor: document\n        .querySelector('pds-data-table')\n        ?.shadowRoot?.querySelector('pds-table')\n        ?.shadowRoot?.querySelector('.pds-c-table--can-be-scrolled-down'),\n      delay: 500,\n      beforeScreenshot: () => {\n        setTimeout(() => {\n          document\n            .querySelector('pds-data-table')\n            ?.shadowRoot?.querySelector('pds-table')\n            ?.shadowRoot?.querySelector('.pds-c-table__wrapper')\n            ?.scrollTo(0, 100);\n          document\n            .querySelector('pds-data-table')\n            ?.shadowRoot?.querySelector('pds-table')\n            ?.shadowRoot?.querySelector('.pds-c-table__wrapper')\n            ?.scrollTo(0, 0);\n        }, 200);\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HidePagination",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide pagination',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    paginationVariant: 'none',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DisableAllSorting",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disable all sorting',\n  args: {\n    columnsSlot: columnsModelThree,\n    rowsSlot: rowsModelPagination,\n    disableAllSorting: true,\n  },\n  parameters: {\n    happo: {\n      delay: 500,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HideCaption",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide caption',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    hideCaption: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LoadDataFromObject",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Load data from object',\n  args: {},\n  parameters: {\n    happo: {\n      delay: 300,\n    },\n  },\n  render: () =>\n    html`<pds-data-table id=\"test\"\n        ><pds-heading slot=\"caption\" headingTag=\"h3\" variant=\"title-default\"\n          >Example table heading</pds-heading\n        ></pds-data-table\n      >\n      <script>\n        // in this case, we are storing the below variables to window to prevent a storybook rendering issue\n        window.pdsDatatableInstance = document.querySelector('#test');\n\n        window.columnsDefArrayObj = [\n          {\n            id: 'firstName',\n            header: 'First name',\n            meta: {\n              align: 'left',\n            },\n            accessorKey: 'firstName',\n          },\n          {\n            id: 'lastName',\n            header: 'Last name',\n            meta: {\n              align: 'left',\n            },\n            accessorKey: 'lastName',\n          },\n          {\n            id: 'alterEgo',\n            header: 'Alter ego',\n            meta: {\n              align: 'right',\n            },\n            accessorKey: 'alterEgo',\n            cell: (cell) => {\n              return 'This individual becomes ' + cell.getValue();\n            },\n          },\n          {\n            id: 'filterableContent',\n            meta: {\n              hidden: true,\n            },\n            accessorKey: 'filterableContent',\n          },\n        ];\n\n        window.rowsArrayObj = [\n          {\n            firstName: 'Michael',\n            lastName: 'Jordan',\n            alterEgo: 'Air Jordan',\n            filterableContent:\n              'This is full width content this individual becomes Air Jordan',\n            subRows: [\n              {\n                fullWidth: 'This is full width content',\n                filterableContent: 'This is full width content',\n              },\n            ],\n          },\n          {\n            firstName: 'Arthur',\n            lastName: 'Curry',\n            status: 'single',\n            alterEgo: 'Aquaman',\n            filterableContent:\n              'This is a second full width content this individual becomes Aquaman',\n            subRows: [\n              {\n                fullWidth: 'This is full width content',\n                filterableContent: 'This is full width content',\n              },\n              {\n                fullWidth: 'This is a second full width content',\n                filterableContent: 'This is a second full width content',\n              },\n            ],\n          },\n        ];\n\n        window.pdsDatatableInstance.columns = columnsDefArrayObj;\n        window.pdsDatatableInstance.data = rowsArrayObj;\n      </script>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Loading",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Loading',\n  args: {},\n  parameters: {\n    happo: {\n      delay: 500,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HoverableRows",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hoverable rows',\n  args: {\n    columnsSlot: columnsModelOne,\n    rowsSlot: rowsModelOne,\n    hoverableRows: true,\n  },\n  parameters: {\n    happo: {\n      waitFor: () =>\n        document\n          .querySelector('pds-data-table')\n          ?.shadowRoot?.querySelector('pds-pagination-item'),\n      delay: 1000,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "InputCells",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Input cells',\n  args: {\n    columnsSlot: columnsModelFour,\n    rowsSlot: rowsModelOne,\n    hoverableRows: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "StripedEven",
          "declaration": {
            "name": "StripedEven",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HideFilter",
          "declaration": {
            "name": "HideFilter",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpandableRow",
          "declaration": {
            "name": "ExpandableRow",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemoveBorder",
          "declaration": {
            "name": "RemoveBorder",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataTableWithStickyHeader",
          "declaration": {
            "name": "DataTableWithStickyHeader",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataTableWithStickyColumn",
          "declaration": {
            "name": "DataTableWithStickyColumn",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataTableWithFixedHeightAndStickyHeader",
          "declaration": {
            "name": "DataTableWithFixedHeightAndStickyHeader",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HidePagination",
          "declaration": {
            "name": "HidePagination",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisableAllSorting",
          "declaration": {
            "name": "DisableAllSorting",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HideCaption",
          "declaration": {
            "name": "HideCaption",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LoadDataFromObject",
          "declaration": {
            "name": "LoadDataFromObject",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Loading",
          "declaration": {
            "name": "Loading",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HoverableRows",
          "declaration": {
            "name": "HoverableRows",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InputCells",
          "declaration": {
            "name": "InputCells",
            "module": "packages/web-components/src/lib/components/data-table/data-table.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table/data-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTable",
          "slots": [
            {
              "description": "Must be populated with a pds-heading to caption the table for accessibility, may be visually hidden with the hideCaption property",
              "name": "caption"
            },
            {
              "description": "Can be populated with a single <pds-data-table-columns slot=\"columns\"> component",
              "name": "columns"
            },
            {
              "description": "Can be populated with a single <pds-data-table-rows slot=\"rows\"> component",
              "name": "rows"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hideCaption",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to visually hide the caption, default is false",
              "attribute": "hideCaption"
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "'odd' | 'even' | 'default'"
              },
              "default": "'default'",
              "description": "String to determine if the table should have \"zebra\" striping\n\n- odd: striping on odd rows\n- even: striping on even rows\n- default: no striping",
              "attribute": "striped"
            },
            {
              "kind": "field",
              "name": "removeBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to remove the borders and rounded corners of the table, default is false.",
              "attribute": "removeBorder"
            },
            {
              "kind": "field",
              "name": "hoverableRows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to add hoverable rows functionality to the table.  Default is false.",
              "attribute": "hoverableRows"
            },
            {
              "kind": "field",
              "name": "stickyHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the header row to sticky, default is false.\n\nSticky row header will stick to the top of the page when scrolled away unless the table is fixed height, in which case it will stick to the top of the scrollable container.",
              "attribute": "stickyHeader"
            },
            {
              "kind": "field",
              "name": "stickyColumn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the first column to sticky, default is false.",
              "attribute": "stickyColumn"
            },
            {
              "kind": "field",
              "name": "fixedHeight",
              "type": {
                "text": "string"
              },
              "description": "String to set a fixed height for the table. Example values: 300px, .25vh, 25%",
              "attribute": "fixedHeight"
            },
            {
              "kind": "field",
              "name": "hideFilter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to hide filter input for the table, default is false.",
              "attribute": "hideFilter"
            },
            {
              "kind": "field",
              "name": "globalFilter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Global filter value, defaults to ''",
              "attribute": "globalFilter"
            },
            {
              "kind": "field",
              "name": "paginationVariant",
              "type": {
                "text": "'arrows' | 'no-arrows' | 'none' | 'default'"
              },
              "default": "'default'",
              "description": "Pagination style variant\n- **default** renders full pagination\n- **arrows** renders only arrows for pagination navigation, should only be used when horizontal space is extremely limited\n- **no-arrows** renders pagination navigation without arrows, should only be used when there are only two or three pages of data\n- **none** disable pagination",
              "attribute": "paginationVariant"
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Pagination page size, default is 5. Also used to determine loading state rows.",
              "attribute": "pageSize"
            },
            {
              "kind": "field",
              "name": "paginationSelectArray",
              "type": {
                "text": "Array<number>"
              },
              "default": "[this.pageSize, 10, 25]",
              "description": "Pagination page size array, default is [ ${pageSize}, 10, 25 ]. Used in the pagination select.",
              "attribute": "paginationSelectArray"
            },
            {
              "kind": "field",
              "name": "expandAllOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to expand all rows on a collapsible table on initial page load, default is false",
              "attribute": "expandAllOnLoad"
            },
            {
              "kind": "field",
              "name": "loadingColumnLength",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "Number of columns to show in loading state, default is 4.",
              "attribute": "loadingColumnLength"
            },
            {
              "kind": "field",
              "name": "disableAllSorting",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to disable all column sorting.  Default is false.",
              "attribute": "disableAllSorting"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "ColumnDef<any>[]"
              },
              "default": "[]",
              "description": "Column definitions - see https://tanstack.com/table/v8/docs/guide/column-defs\n\n- this array holds the data that is currently defining the columns in the table\n- data can be passed directly to this state as an array in order to display data without using the subcomponent data model, note that not all TanStack table options are currently supported by PDS"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Array<{}>"
              },
              "default": "[{}]",
              "description": "Table data array\n\n- this array holds the data that is currently rendered in the table\n- data can be passed directly to this state as an array of objects in order to display data without using the subcomponent data model, see the provided example story\n- include a filterableContent key to add content that can be filtered against but not displayed\n- include a subRows key with an array of sub row objects to make a collapsible row, row will use the same column structure as main table rows unless you include a fullWidth key that will span all columns in the expandable row (this key can contain HTML markup to render)"
            },
            {
              "kind": "method",
              "name": "createTable",
              "description": "Create a new table instance based on the component properties."
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on blur when an input updates data within the table",
              "name": "pds-data-table-input-updated"
            },
            {
              "description": "A custom event dispatched when a table is sorted",
              "name": "pds-data-table-sorted"
            }
          ],
          "attributes": [
            {
              "name": "hideCaption",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to visually hide the caption, default is false",
              "fieldName": "hideCaption"
            },
            {
              "name": "striped",
              "type": {
                "text": "'odd' | 'even' | 'default'"
              },
              "default": "'default'",
              "description": "String to determine if the table should have \"zebra\" striping\n\n- odd: striping on odd rows\n- even: striping on even rows\n- default: no striping",
              "fieldName": "striped"
            },
            {
              "name": "removeBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to remove the borders and rounded corners of the table, default is false.",
              "fieldName": "removeBorder"
            },
            {
              "name": "hoverableRows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to add hoverable rows functionality to the table.  Default is false.",
              "fieldName": "hoverableRows"
            },
            {
              "name": "stickyHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the header row to sticky, default is false.\n\nSticky row header will stick to the top of the page when scrolled away unless the table is fixed height, in which case it will stick to the top of the scrollable container.",
              "fieldName": "stickyHeader"
            },
            {
              "name": "stickyColumn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the first column to sticky, default is false.",
              "fieldName": "stickyColumn"
            },
            {
              "name": "fixedHeight",
              "type": {
                "text": "string"
              },
              "description": "String to set a fixed height for the table. Example values: 300px, .25vh, 25%",
              "fieldName": "fixedHeight"
            },
            {
              "name": "hideFilter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to hide filter input for the table, default is false.",
              "fieldName": "hideFilter"
            },
            {
              "name": "globalFilter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Global filter value, defaults to ''",
              "fieldName": "globalFilter"
            },
            {
              "name": "paginationVariant",
              "type": {
                "text": "'arrows' | 'no-arrows' | 'none' | 'default'"
              },
              "default": "'default'",
              "description": "Pagination style variant\n- **default** renders full pagination\n- **arrows** renders only arrows for pagination navigation, should only be used when horizontal space is extremely limited\n- **no-arrows** renders pagination navigation without arrows, should only be used when there are only two or three pages of data\n- **none** disable pagination",
              "fieldName": "paginationVariant"
            },
            {
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Pagination page size, default is 5. Also used to determine loading state rows.",
              "fieldName": "pageSize"
            },
            {
              "name": "paginationSelectArray",
              "type": {
                "text": "Array<number>"
              },
              "default": "[this.pageSize, 10, 25]",
              "description": "Pagination page size array, default is [ ${pageSize}, 10, 25 ]. Used in the pagination select.",
              "fieldName": "paginationSelectArray"
            },
            {
              "name": "expandAllOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to expand all rows on a collapsible table on initial page load, default is false",
              "fieldName": "expandAllOnLoad"
            },
            {
              "name": "loadingColumnLength",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "Number of columns to show in loading state, default is 4.",
              "fieldName": "loadingColumnLength"
            },
            {
              "name": "disableAllSorting",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to disable all column sorting.  Default is false.",
              "fieldName": "disableAllSorting"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component provides data table display features for tabular data",
          "tagName": "pds-data-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTable",
          "declaration": {
            "name": "PdsDataTable",
            "module": "packages/web-components/src/lib/components/data-table/data-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table",
          "declaration": {
            "name": "PdsDataTable",
            "module": "packages/web-components/src/lib/components/data-table/data-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table columns',\n  component: 'pds-data-table-columns',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should always be used within a data-table element within a columns slot.',\n      },\n    },\n  },\n  render: () => html`<pds-data-table-columns></pds-data-table-columns>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableColumns",
          "slots": [
            {
              "description": "Provides pds-data-table-column elements to define table columns",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table columns",
          "tagName": "pds-data-table-columns",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableColumns",
          "declaration": {
            "name": "PdsDataTableColumns",
            "module": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-columns",
          "declaration": {
            "name": "PdsDataTableColumns",
            "module": "packages/web-components/src/lib/components/data-table-columns/data-table-columns.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table rows/Data table row/Data table cell',\n  component: 'pds-data-table-cell',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should always be used within a data-table-row element.',\n      },\n    },\n  },\n  render: () => html`<pds-data-table-cell></pds-data-table-cell>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableCell",
          "slots": [
            {
              "description": "Provides data for the cell - only text will be passed through",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cellId",
              "type": {
                "text": "string"
              },
              "description": "cellId\n- id used to identify column data, required",
              "attribute": "cellId"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **right** align right",
              "attribute": "align"
            },
            {
              "kind": "method",
              "name": "getNodeText"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "cellId",
              "type": {
                "text": "string"
              },
              "description": "cellId\n- id used to identify column data, required",
              "fieldName": "cellId"
            },
            {
              "name": "align",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **right** align right",
              "fieldName": "align"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table cells",
          "tagName": "pds-data-table-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableCell",
          "declaration": {
            "name": "PdsDataTableCell",
            "module": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-cell",
          "declaration": {
            "name": "PdsDataTableCell",
            "module": "packages/web-components/src/lib/components/data-table-cell/data-table-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-column/data-table-column.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-column/data-table-column.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table columns/Data table column',\n  component: 'pds-data-table-column',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should always be used within a data-table-columns element.',\n      },\n    },\n  },\n  render: () =>\n    html`<pds-data-table-column columnId=\"storybook\"></pds-data-table-column>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-column/data-table-column.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-column/data-table-column.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-column/data-table-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableColumn",
          "slots": [
            {
              "description": "Provides an interface to define column header markup and row cells",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "columnId",
              "type": {
                "text": "string"
              },
              "description": "columnId\n- id used to identify column data, required",
              "attribute": "columnId"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'accessor' | 'display'"
              },
              "default": "'accessor'",
              "description": "Type\n- **accessor** column has an underlying data model which means it can be sorted, filtered, grouped, etc., default\n- **display** column does not have a data model which means it cannot be sorted, filtered, etc, but they can be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "accessorKey",
              "type": {
                "text": "string | number | symbol | (string & {})"
              },
              "default": "''",
              "description": "Accessor key\n- key used to access column data",
              "attribute": "accessorKey"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **center** align center\n- **right** align right",
              "attribute": "align"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Width\n- css width value string",
              "attribute": "width"
            },
            {
              "kind": "field",
              "name": "disableSort",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable sort\n- boolean to determine if column sorting should be disabled, default is false",
              "attribute": "disableSort"
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hidden column\n- boolean to determine if column is hidden, default is false",
              "attribute": "hidden"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "ColumnDefTemplate<HeaderContext<any, unknown>> | string | undefined"
              },
              "description": "Header\n- takes a string or a function to return content for displaying the header cell for the column",
              "attribute": "header"
            },
            {
              "kind": "field",
              "name": "cell",
              "type": {
                "text": "ColumnDefTemplate<CellContext<any, unknown>> | undefined"
              },
              "description": "Cell\n- takes a string or a function to return content for displaying the body cell for the column\n- defaults to ({ getValue }) => {return html`<div>${getValue()}</div>`;}",
              "attribute": "cell"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "columnId",
              "type": {
                "text": "string"
              },
              "description": "columnId\n- id used to identify column data, required",
              "fieldName": "columnId"
            },
            {
              "name": "type",
              "type": {
                "text": "'accessor' | 'display'"
              },
              "default": "'accessor'",
              "description": "Type\n- **accessor** column has an underlying data model which means it can be sorted, filtered, grouped, etc., default\n- **display** column does not have a data model which means it cannot be sorted, filtered, etc, but they can be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.",
              "fieldName": "type"
            },
            {
              "name": "accessorKey",
              "type": {
                "text": "string | number | symbol | (string & {})"
              },
              "default": "''",
              "description": "Accessor key\n- key used to access column data",
              "fieldName": "accessorKey"
            },
            {
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **center** align center\n- **right** align right",
              "fieldName": "align"
            },
            {
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Width\n- css width value string",
              "fieldName": "width"
            },
            {
              "name": "disableSort",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable sort\n- boolean to determine if column sorting should be disabled, default is false",
              "fieldName": "disableSort"
            },
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hidden column\n- boolean to determine if column is hidden, default is false",
              "fieldName": "hidden"
            },
            {
              "name": "header",
              "type": {
                "text": "ColumnDefTemplate<HeaderContext<any, unknown>> | string | undefined"
              },
              "description": "Header\n- takes a string or a function to return content for displaying the header cell for the column",
              "fieldName": "header"
            },
            {
              "name": "cell",
              "type": {
                "text": "ColumnDefTemplate<CellContext<any, unknown>> | undefined"
              },
              "description": "Cell\n- takes a string or a function to return content for displaying the body cell for the column\n- defaults to ({ getValue }) => {return html`<div>${getValue()}</div>`;}",
              "fieldName": "cell"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table columns",
          "tagName": "pds-data-table-column",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableColumn",
          "declaration": {
            "name": "PdsDataTableColumn",
            "module": "packages/web-components/src/lib/components/data-table-column/data-table-column.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-column",
          "declaration": {
            "name": "PdsDataTableColumn",
            "module": "packages/web-components/src/lib/components/data-table-column/data-table-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-row/data-table-row.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-row/data-table-row.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table rows/Data table row',\n  component: 'pds-data-table-row',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should either be used within a data-table-rows element or within another data-table-row to create an expandable row.',\n      },\n    },\n  },\n  render: () => html`<pds-data-table-row></pds-data-table-row>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-row/data-table-row.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-row/data-table-row.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-row/data-table-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableRow",
          "slots": [
            {
              "description": "Provides pds-data-table-cell elements to define table rows",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "subRows",
              "type": {
                "text": "Array<PdsDataTableRow>"
              },
              "default": "[]",
              "description": "Array of subrows",
              "attribute": "subRows"
            },
            {
              "kind": "method",
              "name": "determineHasSubRow"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "subRows",
              "type": {
                "text": "Array<PdsDataTableRow>"
              },
              "default": "[]",
              "description": "Array of subrows",
              "fieldName": "subRows"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table rows",
          "tagName": "pds-data-table-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableRow",
          "declaration": {
            "name": "PdsDataTableRow",
            "module": "packages/web-components/src/lib/components/data-table-row/data-table-row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-row",
          "declaration": {
            "name": "PdsDataTableRow",
            "module": "packages/web-components/src/lib/components/data-table-row/data-table-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table rows',\n  component: 'pds-data-table-rows',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should always be used within a data-table element within a rows slot.',\n      },\n    },\n  },\n  render: () => html`<pds-data-table-rows></pds-data-table-rows>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableRows",
          "slots": [
            {
              "description": "Provides pds-data-table-row elements to define table rows",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table rows",
          "tagName": "pds-data-table-rows",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableRows",
          "declaration": {
            "name": "PdsDataTableRows",
            "module": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-rows",
          "declaration": {
            "name": "PdsDataTableRows",
            "module": "packages/web-components/src/lib/components/data-table-rows/data-table-rows.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Data table/Data table columns/Data table input column',\n  component: 'pds-data-table-input-column',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the data table component. It should always be used within a data-table-columns element.',\n      },\n    },\n  },\n  render: () =>\n    html`<pds-data-table-input-column\n      columnId=\"storybook\"\n      dataSyncId=\"datasync\"\n    ></pds-data-table-input-column>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDataTableInputColumn",
          "slots": [
            {
              "description": "Provides an interface to define column header markup and row cells, restricted to pds-select, pds-text-input, pds-switch, and span elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "columnId",
              "type": {
                "text": "string"
              },
              "description": "columnId\n- id used to identify column, required",
              "attribute": "columnId"
            },
            {
              "kind": "field",
              "name": "dataSyncId",
              "type": {
                "text": "string"
              },
              "description": "dataSyncId\n- id used to identify link between input and table data that is manipulated with the input, required",
              "attribute": "dataSyncId"
            },
            {
              "kind": "field",
              "name": "inputLabel",
              "type": {
                "text": "string"
              },
              "description": "inputLabel\n- string used to label the input for accessibility, otherwise will use text from the slot",
              "attribute": "inputLabel"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'display'"
              },
              "default": "'display'",
              "description": "Type\n- **display** column does not have a data model which means it cannot be sorted, filtered, etc, but they\ncan be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **center** align center\n- **right** align right",
              "attribute": "align"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Width\n- css width value string",
              "attribute": "width"
            },
            {
              "kind": "field",
              "name": "disableSort",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Disable sort\n- boolean to determine if column sorting should be disabled, default is true",
              "attribute": "disableSort"
            },
            {
              "kind": "method",
              "name": "getRandomId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Dynamically generate random unique ID for input fields"
            },
            {
              "kind": "field",
              "name": "cell",
              "type": {
                "text": "ColumnDefTemplate<CellContext<any, unknown>>"
              },
              "description": "Cell\n- takes a function to return markup for displaying the body cell for the column\n- defaults to function that handles wiring up data changes from a slotted PDS text input, select or switch",
              "attribute": "cell"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "ColumnDefTemplate<HeaderContext<any, unknown>> | string"
              },
              "description": "Header"
            },
            {
              "kind": "method",
              "name": "getDynamicSlotText"
            },
            {
              "kind": "method",
              "name": "getHeader"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCustomInput"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "columnId",
              "type": {
                "text": "string"
              },
              "description": "columnId\n- id used to identify column, required",
              "fieldName": "columnId"
            },
            {
              "name": "dataSyncId",
              "type": {
                "text": "string"
              },
              "description": "dataSyncId\n- id used to identify link between input and table data that is manipulated with the input, required",
              "fieldName": "dataSyncId"
            },
            {
              "name": "inputLabel",
              "type": {
                "text": "string"
              },
              "description": "inputLabel\n- string used to label the input for accessibility, otherwise will use text from the slot",
              "fieldName": "inputLabel"
            },
            {
              "name": "type",
              "type": {
                "text": "'display'"
              },
              "default": "'display'",
              "description": "Type\n- **display** column does not have a data model which means it cannot be sorted, filtered, etc, but they\ncan be used to display arbitrary content in the table, eg. a row actions button, checkbox, expander, etc.",
              "fieldName": "type"
            },
            {
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "Align\n- **left** align left, default\n- **center** align center\n- **right** align right",
              "fieldName": "align"
            },
            {
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Width\n- css width value string",
              "fieldName": "width"
            },
            {
              "name": "disableSort",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Disable sort\n- boolean to determine if column sorting should be disabled, default is true",
              "fieldName": "disableSort"
            },
            {
              "name": "cell",
              "type": {
                "text": "ColumnDefTemplate<CellContext<any, unknown>>"
              },
              "description": "Cell\n- takes a function to return markup for displaying the body cell for the column\n- defaults to function that handles wiring up data changes from a slotted PDS text input, select or switch",
              "fieldName": "cell"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component supports data table by providing an interface to define table columns with an input",
          "tagName": "pds-data-table-input-column",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDataTableInputColumn",
          "declaration": {
            "name": "PdsDataTableInputColumn",
            "module": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-data-table-input-column",
          "declaration": {
            "name": "PdsDataTableInputColumn",
            "module": "packages/web-components/src/lib/components/data-table-input-column/data-table-input-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker/date-picker.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  args: {},\n  render: () => html`<pds-date-picker locale=\"es-US\"></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n  },\n  render: (args) =>\n    html`<pds-date-picker disabled=\"${args.disabled}\"></pds-date-picker>`,\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient for disabled fields on most backgrounds.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NoYearSteppers",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No year steppers',\n  args: {\n    hideYearStepper: true,\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      hideYearStepper=\"${args.hideYearStepper}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "NoMonthSteppers",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No month steppers',\n  args: {\n    hideMonthStepper: true,\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      hideMonthStepper=\"${args.hideMonthStepper}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "FirstDayOfWeek",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'First day of week',\n  args: {\n    firstDayOfWeek: 1,\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      firstDayOfWeek=\"${args.firstDayOfWeek}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SetInitialDate",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Set initial date',\n  args: {\n    initialDisplayedMonth: '2022-01-01',\n    initialDate: '2022-01-01',\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      initialDisplayedMonth=\"${args.initialDisplayedMonth}\"\n      initialDate=\"${args.initialDate}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SetInitialDisplayedMonth",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Set initial displayed month',\n  args: {\n    initialDisplayedMonth: '2022-01-01',\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      initialDisplayedMonth=\"${args.initialDisplayedMonth}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "DisabledWeekends",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disable weekends',\n  args: {\n    initialDisplayedMonth: '2017-01-01',\n    disableDate: 'disable-weekends',\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      disableDate=\"${args.disableDate}\"\n      initialDisplayedMonth=\"${args.initialDisplayedMonth}\"\n    ></pds-date-picker>`,\n}"
        },
        {
          "kind": "variable",
          "name": "DisableSingleDate",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disable single date',\n  args: {\n    initialDisplayedMonth: '2017-01-01',\n    disableDate: '2017-01-01',\n  },\n  render: (args) =>\n    html`<pds-date-picker\n      disableDate=\"${args.disableDate}\"\n      initialDisplayedMonth=\"${args.initialDisplayedMonth}\"\n    ></pds-date-picker>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoYearSteppers",
          "declaration": {
            "name": "NoYearSteppers",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoMonthSteppers",
          "declaration": {
            "name": "NoMonthSteppers",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FirstDayOfWeek",
          "declaration": {
            "name": "FirstDayOfWeek",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SetInitialDate",
          "declaration": {
            "name": "SetInitialDate",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SetInitialDisplayedMonth",
          "declaration": {
            "name": "SetInitialDisplayedMonth",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWeekends",
          "declaration": {
            "name": "DisabledWeekends",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisableSingleDate",
          "declaration": {
            "name": "DisableSingleDate",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker/date-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDatePicker",
          "members": [
            {
              "kind": "field",
              "name": "initialDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "Initial date\n- The initial date selected when component renders. Comma separated start and end date if range selection is enabled.",
              "attribute": "initialDate"
            },
            {
              "kind": "field",
              "name": "initialDisplayedMonth",
              "type": {
                "text": "string"
              },
              "description": "Initial displayed month\n- Date in YYYY-MM-DD format used to determine the initially displayed month.",
              "attribute": "initialDisplayedMonth"
            },
            {
              "kind": "field",
              "name": "disableDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "Disable date\n- **disable-weekends** Disable weekends on the calendar\n- **YYYY-MM-DD string** Disable a specific date",
              "attribute": "disableDate"
            },
            {
              "kind": "field",
              "name": "firstDayOfWeek",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "First day of week\n- Set first day of a week. 0 for Sunday, 6 for Saturday.",
              "attribute": "firstDayOfWeek"
            },
            {
              "kind": "field",
              "name": "isRange",
              "type": {
                "text": "boolean"
              },
              "description": "Range\n- Enable/disable range selection.",
              "attribute": "isRange"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "Locale\n- BCP 47 locale string used to format dates.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "showClearButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show clear button\n- Display the clear button.",
              "attribute": "showClearButton"
            },
            {
              "kind": "field",
              "name": "hideMonthStepper",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide month stepper\n- Disable the month stepper buttons.",
              "attribute": "hideMonthStepper"
            },
            {
              "kind": "field",
              "name": "showTodayButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show today button\n- Display the today button.",
              "attribute": "showTodayButton"
            },
            {
              "kind": "field",
              "name": "hideYearStepper",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide year stepper\n- Disable the year stepper buttons.",
              "attribute": "hideYearStepper"
            },
            {
              "kind": "field",
              "name": "todayButtonContent",
              "type": {
                "text": "string | undefined"
              },
              "description": "Today button content\nCustomize the text of the today button",
              "attribute": "todayButtonContent"
            },
            {
              "kind": "field",
              "name": "clearButtonContent",
              "type": {
                "text": "string | undefined"
              },
              "description": "Clear button content\n- Customize the text of the clear button",
              "attribute": "clearButtonContent"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled\n- Disable the datepicker.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "disableFunction",
              "type": {
                "text": "(date: Date) => boolean"
              },
              "description": "A function passed directly to this component property via javascript\nto disable a day or days on the calendar; function takes a Date and\nshould return true to disable a date.",
              "attribute": "disableFunction"
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateWeekdays",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateDisableDate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getClassName",
              "privacy": "private",
              "parameters": [
                {
                  "name": "element",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCalendarRows",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date[][]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTitle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateCurrentDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "moveFocus",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSelectDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on date selection",
              "name": "pds-date-picker-select-date"
            },
            {
              "description": "A custom event dispatched on picker view change",
              "name": "pds-date-picker-change-view"
            },
            {
              "description": "A custom event dispatches when keypress = escape",
              "name": "pds-date-picker-escape"
            }
          ],
          "attributes": [
            {
              "name": "initialDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "Initial date\n- The initial date selected when component renders. Comma separated start and end date if range selection is enabled.",
              "fieldName": "initialDate"
            },
            {
              "name": "initialDisplayedMonth",
              "type": {
                "text": "string"
              },
              "description": "Initial displayed month\n- Date in YYYY-MM-DD format used to determine the initially displayed month.",
              "fieldName": "initialDisplayedMonth"
            },
            {
              "name": "disableDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "Disable date\n- **disable-weekends** Disable weekends on the calendar\n- **YYYY-MM-DD string** Disable a specific date",
              "fieldName": "disableDate"
            },
            {
              "name": "firstDayOfWeek",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "First day of week\n- Set first day of a week. 0 for Sunday, 6 for Saturday.",
              "fieldName": "firstDayOfWeek"
            },
            {
              "name": "isRange",
              "type": {
                "text": "boolean"
              },
              "description": "Range\n- Enable/disable range selection.",
              "fieldName": "isRange"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "Locale\n- BCP 47 locale string used to format dates.",
              "fieldName": "locale"
            },
            {
              "name": "showClearButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show clear button\n- Display the clear button.",
              "fieldName": "showClearButton"
            },
            {
              "name": "hideMonthStepper",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide month stepper\n- Disable the month stepper buttons.",
              "fieldName": "hideMonthStepper"
            },
            {
              "name": "showTodayButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show today button\n- Display the today button.",
              "fieldName": "showTodayButton"
            },
            {
              "name": "hideYearStepper",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide year stepper\n- Disable the year stepper buttons.",
              "fieldName": "hideYearStepper"
            },
            {
              "name": "todayButtonContent",
              "type": {
                "text": "string | undefined"
              },
              "description": "Today button content\nCustomize the text of the today button",
              "fieldName": "todayButtonContent"
            },
            {
              "name": "clearButtonContent",
              "type": {
                "text": "string | undefined"
              },
              "description": "Clear button content\n- Customize the text of the clear button",
              "fieldName": "clearButtonContent"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled\n- Disable the datepicker.",
              "fieldName": "disabled"
            },
            {
              "name": "disableFunction",
              "type": {
                "text": "(date: Date) => boolean"
              },
              "description": "A function passed directly to this component property via javascript\nto disable a day or days on the calendar; function takes a Date and\nshould return true to disable a date.",
              "fieldName": "disableFunction"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component displays a calendar for selecting a date",
          "tagName": "pds-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDatePicker",
          "declaration": {
            "name": "PdsDatePicker",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-date-picker",
          "declaration": {
            "name": "PdsDatePicker",
            "module": "packages/web-components/src/lib/components/date-picker/date-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker/utils.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addDays",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "days",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getISODateString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getMonth",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNextDay",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNextMonth",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNextYear",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPreviousMonth",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPreviousYear",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getYear",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isDateInRange",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "range",
              "type": {
                "text": "{ from: Date; to: Date }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isSameDay",
          "parameters": [
            {
              "name": "date1",
              "optional": true,
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "date2",
              "optional": true,
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeTimezoneOffset",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getWeekDays",
          "return": {
            "type": {
              "text": "string[][]"
            }
          },
          "parameters": [
            {
              "name": "firstDayOfWeek",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "locale",
              "default": "'en-US'",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getMonths",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "locale",
              "default": "'en-US'",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getFirstOfMonth",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getLastOfMonth",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "subDays",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "days",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPreviousDay",
          "return": {
            "type": {
              "text": "Date"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getDaysOfMonth",
          "return": {
            "type": {
              "text": "Date[]"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "firstDayOfWeek",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "padded",
              "optional": true,
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addDays",
          "declaration": {
            "name": "addDays",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getISODateString",
          "declaration": {
            "name": "getISODateString",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getMonth",
          "declaration": {
            "name": "getMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNextDay",
          "declaration": {
            "name": "getNextDay",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNextMonth",
          "declaration": {
            "name": "getNextMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNextYear",
          "declaration": {
            "name": "getNextYear",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreviousMonth",
          "declaration": {
            "name": "getPreviousMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreviousYear",
          "declaration": {
            "name": "getPreviousYear",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getYear",
          "declaration": {
            "name": "getYear",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDateInRange",
          "declaration": {
            "name": "isDateInRange",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSameDay",
          "declaration": {
            "name": "isSameDay",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeTimezoneOffset",
          "declaration": {
            "name": "removeTimezoneOffset",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getWeekDays",
          "declaration": {
            "name": "getWeekDays",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getMonths",
          "declaration": {
            "name": "getMonths",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getFirstOfMonth",
          "declaration": {
            "name": "getFirstOfMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getLastOfMonth",
          "declaration": {
            "name": "getLastOfMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "subDays",
          "declaration": {
            "name": "subDays",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreviousDay",
          "declaration": {
            "name": "getPreviousDay",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDaysOfMonth",
          "declaration": {
            "name": "getDaysOfMonth",
            "module": "packages/web-components/src/lib/components/date-picker/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/decorator/decorator.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/decorator/decorator.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Small',\n  args: {\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: {\n    variant: 'inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Defaultwithheading",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with heading',\n  render: (args) =>\n    html`<pds-decorator\n      size=\"${args.size || nothing}\"\n      variant=\"${args.variant || nothing}\"\n      ><span>Heading</span></pds-decorator\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Invertedwithheading",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted with heading',\n  args: {\n    variant: 'inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n  render: (args) =>\n    html`<pds-decorator\n      size=\"${args.size || nothing}\"\n      variant=\"${args.variant || nothing}\"\n      ><span>Heading</span></pds-decorator\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Defaultwithheading",
          "declaration": {
            "name": "Defaultwithheading",
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Invertedwithheading",
          "declaration": {
            "name": "Invertedwithheading",
            "module": "packages/web-components/src/lib/components/decorator/decorator.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/decorator/decorator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDecorator",
          "slots": [
            {
              "description": "This slot holds the text to display underneath the decorator",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A styled decorator",
          "tagName": "pds-decorator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDecorator",
          "declaration": {
            "name": "PdsDecorator",
            "module": "packages/web-components/src/lib/components/decorator/decorator.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-decorator",
          "declaration": {
            "name": "PdsDecorator",
            "module": "packages/web-components/src/lib/components/decorator/decorator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Date picker input',\n  component: 'pds-date-picker-input',\n  tags: ['autodocs'],\n  parameters: {\n    actions: {\n      handles: [\n        'pds-date-picker-select-date',\n        'pds-date-picker-change-view',\n        'pds-date-picker-escape',\n        'pds-date-picker-input-change',\n        'pds-date-picker-input-input',\n      ],\n    },\n  },\n  argTypes: {\n    value: {\n      control: 'text',\n    },\n    'slot:label': {\n      name: 'label',\n      control: 'text',\n      table: {\n        category: 'slots',\n      },\n      description:\n        'Use this slot instead of the label property, if the label requires additional markup.',\n    },\n    label: {\n      table: {\n        category: 'attributes',\n      },\n      description:\n        ' The label of the form field. Must be plain text. If label requires additional markup (e.g., superscript), then use the label slot instead.',\n      control: 'text',\n    },\n    fieldId: {\n      control: 'text',\n    },\n    hideLabel: {\n      control: 'boolean',\n    },\n    required: {\n      control: 'boolean',\n    },\n    helpText: {\n      control: 'text',\n    },\n    errorMessage: {\n      control: 'text',\n    },\n  },\n  render: (args) =>\n    html`<pds-date-picker-input\n      name=\"${args.name || nothing}\"\n      size=\"${args.size || nothing}\"\n      value=\"${args.value || nothing}\"\n      dateFormat=\"${args.dateFormat}\"\n      ?disabled=\"${args.disabled}\"\n      ?readonly=\"${args.readonly}\"\n      ?required=\"${args.required}\"\n      label=\"${args.label || nothing}\"\n      lang=\"${args.lang || nothing}\"\n      errorMessage=\"${args.errorMessage || nothing}\"\n      ?hideLabel=\"${args.hideLabel}\"\n      type=\"${args.type || nothing}\"\n      maskType=\"${args.maskType || nothing}\"\n      .customInvalidDates=\"${args.customInvalidDates || nothing}\"\n      ><pds-date-picker slot=\"datepicker\"></pds-date-picker\n    ></pds-date-picker-input>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    name: 'datePickerInput',\n    label: 'Select a date',\n    dateFormat: 'MM/DD/YYYY',\n  },\n  parameters: {\n    date: new Date('February 14, 2023 12:00:00'),\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n        const component = document.querySelector('pds-date-picker-input');\n\n        component?.shadowRoot\n          ?.querySelector('.pds-c-date-picker-input__input')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 300,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    name: 'datePickerInput-disabled',\n    label: 'Select a date',\n    dateFormat: 'MM/DD/YYYY',\n    disabled: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Disabled inputs should have less color contrast, but axe doesn't like it.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Alt",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Alt',\n  args: {\n    name: 'datePickerInput-alt',\n    label: 'Select a date',\n    dateFormat: 'DD/MM/YYYY',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DisabledWeekends",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled weekends',\n  args: {\n    customInvalidDates: customValidation,\n    name: 'datePickerInput-disabledWeekends',\n    label: 'Select a date',\n    dateFormat: 'MM/DD/YYYY',\n  },\n  render: (args) =>\n    html`<pds-date-picker-input\n      name=\"${args.name || nothing}\"\n      size=\"${args.size || nothing}\"\n      value=\"${args.value || nothing}\"\n      dateFormat=\"${args.dateFormat}\"\n      ?disabled=\"${args.disabled}\"\n      ?readonly=\"${args.readonly}\"\n      ?required=\"${args.required}\"\n      label=\"${args.label || nothing}\"\n      errorMessage=\"${args.errorMessage || nothing}\"\n      ?hideLabel=\"${args.hideLabel}\"\n      type=\"${args.type || nothing}\"\n      maskType=\"${args.maskType || nothing}\"\n      .customInvalidDates=\"${args.customInvalidDates || nothing}\"\n      ><pds-date-picker\n        disabledate=\"disable-weekends\"\n        slot=\"datepicker\"\n      ></pds-date-picker\n    ></pds-date-picker-input>`,\n  parameters: {\n    date: new Date('February 14, 2023 12:00:00'),\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n        const component = document.querySelector('pds-date-picker-input');\n\n        component?.shadowRoot\n          ?.querySelector('.pds-c-date-picker-input__input')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 300,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  args: {\n    name: 'datePickerInput-spanish',\n    label: 'Seleccione una fecha',\n    dateFormat: 'MM/DD/AAAA',\n  },\n  parameters: {\n    lang: 'es',\n    date: new Date('February 14, 2023 12:00:00'),\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n        const component = document.querySelector('pds-date-picker-input');\n\n        component?.shadowRoot\n          ?.querySelector('.pds-c-date-picker-input__input')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 1000,\n    },\n  },\n  render: (args) =>\n    html`<pds-date-picker-input\n      name=\"${args.name || nothing}\"\n      size=\"${args.size || nothing}\"\n      value=\"${args.value || nothing}\"\n      dateFormat=\"${args.dateFormat}\"\n      ?disabled=\"${args.disabled}\"\n      ?readonly=\"${args.readonly}\"\n      ?required=\"${args.required}\"\n      label=\"${args.label || nothing}\"\n      errorMessage=\"${args.errorMessage || nothing}\"\n      ?hideLabel=\"${args.hideLabel}\"\n      type=\"${args.type || nothing}\"\n      maskType=\"${args.maskType || nothing}\"\n      ><pds-date-picker locale=\"es-US\" slot=\"datepicker\"></pds-date-picker\n    ></pds-date-picker-input>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Alt",
          "declaration": {
            "name": "Alt",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWeekends",
          "declaration": {
            "name": "DisabledWeekends",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsDatePickerInput",
          "slots": [
            {
              "description": "This slot holds a PDS Datepicker element",
              "name": "datepicker"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dateFormat",
              "type": {
                "text": "'MM/DD/YYYY' | 'DD/MM/YYYY' | 'DD/MM/AAAA' | 'MM/DD/AAAA'"
              },
              "default": "'MM/DD/YYYY'",
              "description": "Displays format of the date\nDates with 'AAAA' are Spanish date formats",
              "attribute": "dateFormat"
            },
            {
              "kind": "field",
              "name": "customInvalidDates",
              "type": {
                "text": "Function"
              },
              "description": "\nFunction to add custom date validation.\nShould take in a date object as a parameter (which represents the current value of the input to validate against).\nShould return a boolean value.",
              "attribute": "customInvalidDates"
            },
            {
              "kind": "method",
              "name": "initializeTrap",
              "description": "Initialize the focus trap"
            },
            {
              "kind": "method",
              "name": "datePickerSelectDateListener"
            },
            {
              "kind": "method",
              "name": "datePickerSelectDate",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isCorrectDate",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Validate the date"
            },
            {
              "kind": "method",
              "name": "dispatchInputEvent"
            },
            {
              "kind": "method",
              "name": "dispatchChangeEvent"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleDatePicker",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOnKeyboard",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showDatePicker"
            },
            {
              "kind": "method",
              "name": "hideDatePicker"
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-date-picker-input-input",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-date-picker-input-change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-date-picker-input-blur",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-date-picker-input-focus",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "dateFormat",
              "type": {
                "text": "'MM/DD/YYYY' | 'DD/MM/YYYY' | 'DD/MM/AAAA' | 'MM/DD/AAAA'"
              },
              "default": "'MM/DD/YYYY'",
              "description": "Displays format of the date\nDates with 'AAAA' are Spanish date formats",
              "fieldName": "dateFormat"
            },
            {
              "name": "customInvalidDates",
              "type": {
                "text": "Function"
              },
              "description": "\nFunction to add custom date validation.\nShould take in a date object as a parameter (which represents the current value of the input to validate against).\nShould return a boolean value.",
              "fieldName": "customInvalidDates"
            },
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The date picker input component",
          "tagName": "pds-date-picker-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsDatePickerInput",
          "declaration": {
            "name": "PdsDatePickerInput",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-date-picker-input",
          "declaration": {
            "name": "PdsDatePickerInput",
            "module": "packages/web-components/src/lib/components/date-picker-input/date-picker-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/error-page/error-page.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/error-page/error-page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Error page',\n  component: 'pds-error-page',\n  tags: ['autodocs'],\n  argTypes: {\n    linkText: { control: 'text' },\n    helpHref: { control: 'text' },\n    layoutContainerVariant: { control: 'text' },\n  },\n  render: (args) =>\n    html`<pds-error-page\n      errorCode=\"${args.errorCode || nothing}\"\n      linkText=\"${args.linkText || '[Insert link here]'}\"\n      linkHref=\"${args.linkHref || 'https://www.principal.com'}\"\n    >\n    </pds-error-page>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Error404",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '404',\n  args: {\n    errorCode: '404',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error403",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '403',\n  args: {\n    errorCode: '403',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error500",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '500',\n  args: {\n    errorCode: '500',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error503",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '503',\n  args: { errorCode: '503' },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/error-page/error-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error404",
          "declaration": {
            "name": "Error404",
            "module": "packages/web-components/src/lib/components/error-page/error-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error403",
          "declaration": {
            "name": "Error403",
            "module": "packages/web-components/src/lib/components/error-page/error-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error500",
          "declaration": {
            "name": "Error500",
            "module": "packages/web-components/src/lib/components/error-page/error-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error503",
          "declaration": {
            "name": "Error503",
            "module": "packages/web-components/src/lib/components/error-page/error-page.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/error-page/error-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsErrorPage",
          "members": [
            {
              "kind": "field",
              "name": "errorCode",
              "type": {
                "text": "'403' | '404' | '500' | '503'"
              },
              "default": "'500'",
              "description": "Style errorCode\n- **403** renders the error-page used to indicate the authentication failure\n- **404** renders the error-page used to indicate the broken link or if the page is moved\n- **500** renders the error-page used to indicate the server is unavailable due to internal configuration issue or a temporary glitch\n- **503** renders the error-page used to indicate if the site is unreachable, usually due to planned maintenance",
              "attribute": "errorCode"
            },
            {
              "kind": "field",
              "name": "linkText",
              "type": {
                "text": "String"
              },
              "description": "Text can be passed to the link",
              "attribute": "linkText"
            },
            {
              "kind": "field",
              "name": "linkHref",
              "type": {
                "text": "String"
              },
              "description": "A href can be passed to the link",
              "attribute": "linkHref"
            },
            {
              "kind": "field",
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "attribute": "layoutContainerVariant"
            },
            {
              "kind": "method",
              "name": "loadErrorPageContent"
            },
            {
              "kind": "method",
              "name": "getLinkSize"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "errorCode",
              "type": {
                "text": "'403' | '404' | '500' | '503'"
              },
              "default": "'500'",
              "description": "Style errorCode\n- **403** renders the error-page used to indicate the authentication failure\n- **404** renders the error-page used to indicate the broken link or if the page is moved\n- **500** renders the error-page used to indicate the server is unavailable due to internal configuration issue or a temporary glitch\n- **503** renders the error-page used to indicate if the site is unreachable, usually due to planned maintenance",
              "fieldName": "errorCode"
            },
            {
              "name": "linkText",
              "type": {
                "text": "String"
              },
              "description": "Text can be passed to the link",
              "fieldName": "linkText"
            },
            {
              "name": "linkHref",
              "type": {
                "text": "String"
              },
              "description": "A href can be passed to the link",
              "fieldName": "linkHref"
            },
            {
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "fieldName": "layoutContainerVariant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders an error page used in simple full-page error scenarios",
          "tagName": "pds-error-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsErrorPage",
          "declaration": {
            "name": "PdsErrorPage",
            "module": "packages/web-components/src/lib/components/error-page/error-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-error-page",
          "declaration": {
            "name": "PdsErrorPage",
            "module": "packages/web-components/src/lib/components/error-page/error-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/file-upload/file-upload.model.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/file-upload/file-upload.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/File upload',\n  component: 'pds-file-upload',\n  tags: ['autodocs'],\n  argTypes: {\n    multiple: {\n      control: 'boolean',\n    },\n    value: {\n      control: 'text',\n    },\n    label: {\n      table: {\n        category: 'attributes',\n      },\n      description:\n        ' The label of the form field. Must be plain text. If label requires additional markup (e.g., superscript), then use the label slot instead.',\n      control: 'text',\n    },\n    'slot:label': {\n      name: 'label',\n      control: 'text',\n      table: {\n        category: 'slots',\n      },\n      description:\n        'Use this slot instead of the label property, if the label requires additional markup.',\n    },\n    fieldId: {\n      control: 'text',\n    },\n    errorMessage: {\n      control: 'text',\n    },\n    invalidFilename: {\n      control: 'text',\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-file-upload-change', 'pds-file-upload-remove'],\n    },\n  },\n  render: (args) =>\n    html`<pds-file-upload\n      name=\"${args.name || nothing}\"\n      lang=\"${args.lang || nothing}\"\n      helpText=\"${args.helpText || nothing}\"\n      accept=\"${args.accept || nothing}\"\n      size=\"${args.size || nothing}\"\n      ?multiple=${args.multiple}\n      ?required=${args.required}\n    ></pds-file-upload>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Single file upload',\n  args: {\n    name: 'singleFileUpload',\n    helpText: 'For this PDS example, please upload one .pdf file.',\n    accept: '.pdf',\n    required: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  parameters: {\n    lang: 'es',\n  },\n  args: {\n    name: 'Spanish',\n    helpText:\n      'Para este ejemplo de PDS, cargue al menos un archivo .png o .svg.',\n    accept: '.png,.svg',\n    multiple: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "MultiFileUpload",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Multi file upload',\n  args: {\n    name: 'MultiFileUpload',\n    helpText:\n      'For this PDS example, please upload one or multiple .pdf, .png, or .svg files.',\n    accept: '.pdf,.png,.svg',\n    multiple: true,\n    required: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "FileSizeRestriction",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'File size restriction',\n  args: {\n    name: 'FileSizeRestriction',\n    helpText:\n      'For this PDS example, upload a PDF file that is less than 100 KB.',\n    accept: '.pdf',\n    size: 100,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "MultiFileUpload",
          "declaration": {
            "name": "MultiFileUpload",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSizeRestriction",
          "declaration": {
            "name": "FileSizeRestriction",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/file-upload/file-upload.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFileUpload",
          "slots": [
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additonal markup.",
              "name": "help-text"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additional markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "String | undefined"
              },
              "description": "List of files it will accept, separated by commas",
              "attribute": "accept"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "Boolean"
              },
              "default": "false",
              "description": "Does the file upload accept multiple files?\nDefaults to false",
              "attribute": "multiple"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "filesArray",
              "type": {
                "text": "FileList"
              }
            },
            {
              "kind": "field",
              "name": "acceptedFilesArray",
              "type": {
                "text": "string[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "invalidFilename",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "getFileSizeBytes"
            },
            {
              "kind": "method",
              "name": "singleOrMultipleLabel"
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "onDragOver",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "DragEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDragEnd",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "DragEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closeModal"
            },
            {
              "kind": "method",
              "name": "replaceEvent"
            },
            {
              "kind": "method",
              "name": "acceptedFiles"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFile",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "fileToRemove",
                  "type": {
                    "text": "File"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Set uploadedFilesArray back to empty and clear the form value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "notifyUser",
              "description": "Appears when user tries to change the file in single file upload."
            },
            {
              "kind": "method",
              "name": "noFilesAttached"
            },
            {
              "kind": "method",
              "name": "invalidFormatModalContent"
            },
            {
              "kind": "method",
              "name": "invalidSizeModalContent"
            },
            {
              "kind": "method",
              "name": "preSubmitErrorModal"
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on change of the file input",
              "name": "pds-file-upload-change"
            },
            {
              "description": "A custom event dispatched on the removal of an uploaded file",
              "name": "pds-file-upload-remove"
            }
          ],
          "attributes": [
            {
              "name": "accept",
              "type": {
                "text": "String | undefined"
              },
              "description": "List of files it will accept, separated by commas",
              "fieldName": "accept"
            },
            {
              "name": "multiple",
              "type": {
                "text": "Boolean"
              },
              "default": "false",
              "description": "Does the file upload accept multiple files?\nDefaults to false",
              "fieldName": "multiple"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "fieldName": "size"
            },
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The file upload component enables users to attach and upload files from their device.",
          "tagName": "pds-file-upload",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFileUpload",
          "declaration": {
            "name": "PdsFileUpload",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-file-upload",
          "declaration": {
            "name": "PdsFileUpload",
            "module": "packages/web-components/src/lib/components/file-upload/file-upload.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/feature-block/feature-block.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "ExampleUsage",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Example usage',\n  parameters: {\n    happo: {\n      waitFor: () =>\n        document\n          ?.querySelector('pds-feature-block')\n          ?.querySelector('div[slot=\"media\"]')\n          ?.querySelector('img')?.complete,\n    },\n  },\n  render: () =>\n    html`<pds-feature-block>\n      <div slot=\"media\">\n        <img\n          class=\"pds-u-responsive-image\"\n          alt=\"placeholder\"\n          src=\"${process.env.IMAGES_PATH}image_border.svg\"\n        />\n      </div>\n      <div>\n        <div class=\"pds-u-typography-meta-sm pds-u-margin-bottom-16\">\n          1:00 PM CT | May 18, 2022\n        </div>\n        <pds-heading headingTag=\"h3\" variant=\"title-default\">Title</pds-heading>\n        <pds-text-passage>\n          Turpis congue vitae rutrum habitasse integer nibh faucibus feugiat\n          interdum.</pds-text-passage\n        >\n        <placeholder-element class=\"pds-u-margin-top-16\"\n          >Additional slot area</placeholder-element\n        >\n      </div>\n    </pds-feature-block>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Reversed",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Reversed',\n  args: {\n    behavior: 'reversed',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "FullWidth",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Full width',\n  render: (args) =>\n    html`<pds-feature-block ?fullWidth=${args.fullWidth}>\n      <placeholder-element slot=\"media\"\n        ><div style=\"padding: 2rem 0\">\n          Slot for full width image\n        </div></placeholder-element\n      >\n      <placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n        >Overlay Slot for body content. Width set at recipe\n        level</placeholder-element\n      >\n    </pds-feature-block>`,\n  args: {\n    fullWidth: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // This is flagged on the placeholder, so we can safely ignore it.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExampleUsage",
          "declaration": {
            "name": "ExampleUsage",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Reversed",
          "declaration": {
            "name": "Reversed",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FullWidth",
          "declaration": {
            "name": "FullWidth",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/feature-block/feature-block.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFeatureBlock",
          "slots": [
            {
              "description": "This slot holds the image or video",
              "name": "media"
            },
            {
              "description": "Holds the content of the feature block (heading, text-passage, CTAs)",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "behavior",
              "type": {
                "text": "'reversed' | 'default'"
              },
              "default": "'default'",
              "description": "Behavior variant\n- **reversed** renders the media slot to the right of the body on md/lg screens",
              "attribute": "behavior"
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Full width variant\n1) Turns on the full bleed media slot behind the body overlay",
              "attribute": "fullWidth"
            },
            {
              "kind": "field",
              "name": "reverseMobileDisplay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "reverse the stacking order in mobile display",
              "attribute": "reverseMobileDisplay"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "behavior",
              "type": {
                "text": "'reversed' | 'default'"
              },
              "default": "'default'",
              "description": "Behavior variant\n- **reversed** renders the media slot to the right of the body on md/lg screens",
              "fieldName": "behavior"
            },
            {
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Full width variant\n1) Turns on the full bleed media slot behind the body overlay",
              "fieldName": "fullWidth"
            },
            {
              "name": "reverseMobileDisplay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "reverse the stacking order in mobile display",
              "fieldName": "reverseMobileDisplay"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A wrapper that contains stacked media and a body of content\non small screens and then breaks them side-by-side on large screens",
          "tagName": "pds-feature-block",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFeatureBlock",
          "declaration": {
            "name": "PdsFeatureBlock",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-feature-block",
          "declaration": {
            "name": "PdsFeatureBlock",
            "module": "packages/web-components/src/lib/components/feature-block/feature-block.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFooterNavItem",
          "slots": [
            {
              "description": "A list of links to display in the footer nav section, restricted to pds-list elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav-item used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Top level label for the nav item group",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav-item used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "fieldName": "variant"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Top level label for the nav item group",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A component that renders a single link list at desktop and a collapsible at mobile",
          "tagName": "pds-footer-nav-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFooterNavItem",
          "declaration": {
            "name": "PdsFooterNavItem",
            "module": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footer-nav-item",
          "declaration": {
            "name": "PdsFooterNavItem",
            "module": "packages/web-components/src/lib/components/footer-nav-item/footer-nav-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer/footer.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer/footer.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Footer',\n  component: 'pds-footer',\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'subtle'],\n    },\n    layoutContainerVariant: {\n      control: 'select',\n      options: ['default', 'narrow'],\n    },\n    layoutContainerRemovePadding: { control: 'text' },\n    disclosuresLink: {\n      control: 'text',\n    },\n    reportFraudLink: {\n      control: 'text',\n    },\n    behavior: {\n      control: 'select',\n      options: ['login', 'super', 'default'],\n    },\n    hideContactPhone: { control: 'boolean' },\n    hideHelpLink: { control: 'boolean' },\n    hideContactLink: { control: 'boolean' },\n    logoAriaLabel: { control: 'text' },\n    legalNavAriaLabel: { control: 'text' },\n    hideSocialIcons: { control: 'boolean' },\n    hideLegalLinks: { control: 'boolean' },\n  },\n  render: (args) =>\n    html`<pds-footer\n      variant=\"${args.variant || nothing}\"\n      lang=\"${args.lang || nothing}\"\n      behavior=\"${args.behavior || nothing}\"\n      hideContactPhone=\"${args.hideContactPhone || nothing}\"\n      hideHelpLink=\"${args.hideHelpLink || nothing}\"\n      hideLegalLinks=\"${args.hideLegalLinks || nothing}\"\n      hideContactLink=\"${args.hideContactLink || nothing}\"\n      layoutContainerVariant=\"${args.layoutContainerVariant || nothing}\"\n      layoutContainerRemovePadding=\"${args.layoutContainerRemovePadding ||\n      nothing}\"\n    ></pds-footer>`,\n  parameters: {\n    happo: {\n      // @ts-expect-error\n      waitFor: () => document.querySelector('pds-footer')?.updateComplete,\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        document\n          .querySelector('pds-footer')\n          ?.querySelectorAll('pds-footer-nav')[0]\n          .querySelectorAll('pds-footer-nav-item')\n          .forEach((el) => {\n            el.shadowRoot\n              ?.querySelector('pds-collapsible')\n              ?.shadowRoot?.querySelector('.pds-c-collapsible__summary')\n              ?.dispatchEvent(clickEvent);\n          });\n      },\n      delay: 1000,\n    },\n    actions: {\n      handles: ['pds-link-click'],\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // The icon links do have an aria-label.  They do have aria-hidden, but that's needed for when the icons are not used as links.\n            // The aria-label on the link should be enough for screen readers.\n            // @link https://dequeuniversity.com/rules/axe/4.4/link-name\n            id: 'link-name',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  parameters: {\n    lang: 'es',\n  },\n  args: {\n    variant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Subtle",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle',\n  args: {\n    variant: 'subtle',\n  },\n  parameters: {\n    happo: {\n      delay: 1000,\n    },\n  },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\" behavior=\"${args.behavior}\">\n      <pds-list slot=\"custom-legal-links\">\n        <pds-list-item>\n          <pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"#\"\n            >Link 1</pds-link\n          >\n        </pds-list-item>\n        <pds-list-item>\n          <pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"#\"\n            >Link 2</pds-link\n          >\n        </pds-list-item>\n      </pds-list>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Login",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Login',\n  args: {\n    variant: 'default',\n    behavior: 'login',\n  },\n  parameters: {\n    happo: {\n      delay: 1000,\n    },\n  },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\" behavior=\"${args.behavior}\">\n      <pds-list slot=\"custom-legal-links\">\n        <pds-list-item>\n          <pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"#\"\n            >Link 1</pds-link\n          >\n        </pds-list-item>\n        <pds-list-item>\n          <pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"#\"\n            >Link 2</pds-link\n          >\n        </pds-list-item>\n      </pds-list>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "RemoveContact",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove contact',\n  args: {\n    variant: 'default',\n    hideContactPhone: true,\n    hideHelpLink: true,\n    hideContactLink: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "CustomContact",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom contact links',\n  args: { variant: 'default' },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\">\n      <pds-list slot=\"custom-contact\">\n        <pds-list-item>\n          <pds-footer-contact-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            ariaLabel=\"Call us toll-free at 800-334-7244\"\n            linkCategory=\"phone\"\n            href=\"tel:800-334-7244\"\n            >Tol: 800-334-7244</pds-footer-contact-link\n          >\n        </pds-list-item>\n        <pds-list-item>\n          <pds-footer-contact-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"tel:858-689-0904\"\n            ariaLabel=\"Call us at 858-689-0904\"\n            linkCategory=\"phone\"\n            >Tel: 858-689-0904</pds-footer-contact-link\n          >\n        </pds-list-item>\n        <pds-list-item>\n          <pds-footer-contact-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"tel:858-689-9232\"\n            ariaLabel=\"Fax us at 858-689-9232\"\n            linkCategory=\"fax\"\n            >Fax: 858-689-9232</pds-footer-contact-link\n          >\n        </pds-list-item>\n      </pds-list>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "HideLegalLinks",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide legal links',\n  args: {\n    variant: 'default',\n    hideLegalLinks: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "RemoveSocial",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove social icons',\n  args: {\n    variant: 'default',\n    hideSocialIcons: true,\n  },\n  render: (args) =>\n    html`<pds-footer\n      variant=\"${args.variant}\"\n      hideSocialIcons=\"${args.hideSocialIcons}\"\n    ></pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomSocial",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom social icons',\n  args: {\n    variant: 'default',\n  },\n  render: (args: any) =>\n    html`<pds-footer variant=\"${args.variant}\">\n      <pds-list orientation=\"horizontal\" slot=\"social-icons\">\n        <pds-list-item\n          ><pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"https://api.whatsapp.com/send?phone=60162999792\"\n            ariaLabel=\"Principal Malaysia on WhatsApp\"\n            target=\"_blank\"\n            ><pds-icon-whatsapp\n              size=\"xl\"\n              color=\"currentColor\"\n            ></pds-icon-whatsapp> </pds-link\n        ></pds-list-item>\n        <pds-list-item\n          ><pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"https://www.facebook.com/principalglobalservices/\"\n            ariaLabel=\"Principal Global Services on Facebook\"\n            target=\"_blank\"\n            ><pds-icon-facebook\n              size=\"xl\"\n              color=\"currentColor\"\n            ></pds-icon-facebook> </pds-link\n        ></pds-list-item>\n        <pds-list-item\n          ><pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"https://twitter.com/Principal_mx\"\n            ariaLabel=\"Principal Mexico on Twitter\"\n            target=\"_blank\"\n            ><pds-icon-twitter\n              size=\"xl\"\n              color=\"currentColor\"\n            ></pds-icon-twitter> </pds-link\n        ></pds-list-item>\n        <pds-list-item\n          ><pds-link\n            variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n            href=\"https://www.instagram.com/explore/locations/1029259303/principal-financial-group/\"\n            ariaLabel=\"Principal Global Services on Instagram\"\n            target=\"_blank\"\n            ><pds-icon-instagram\n              size=\"xl\"\n              color=\"currentColor\"\n            ></pds-icon-instagram> </pds-link\n        ></pds-list-item>\n      </pds-list>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomLegalText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom legal text',\n  args: { variant: 'default' },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\">\n      <div slot=\"legal-text\">\n        <p class=\"pds-u-margin-0\">\n          Copyright ©2020 First Dental Health | 5771 Copley Drive #101, San\n          Diego, CA 92111.\n        </p>\n        <p class=\"pds-u-margin-0\">\n          Principal Asset Management℠ is a trade name of Principal Global\n          Investors, LLC. Principal®, Principal Financial Group®, Principal\n          Asset Management, and Principal and the logomark design are registered\n          trademarks and service marks of Principal Financial Services, Inc., a\n          Principal Financial Group company, in various countries around the\n          world and may be used only with the permission of Principal Financial\n          Services, Inc.\n        </p>\n        <p class=\"pds-u-margin-0\">\n          Investing involves risk, including possible loss of principal.\n        </p>\n      </div>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SuperFooter",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Super footer',\n  args: {\n    variant: 'default',\n    behavior: 'super',\n  },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\" behavior=\"${args.behavior}\">\n      <pds-footer-nav behavior=\"3col\">\n        ${renderSuperFooterLinks(args)}\n      </pds-footer-nav>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SuperFooterSubtle",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Super footer subtle',\n  args: {\n    variant: 'subtle',\n    behavior: 'super',\n    logoAriaLabel: 'Link to custom site name',\n  },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\" behavior=\"${args.behavior}\">\n      <pds-footer-nav behavior=\"4col\">\n        ${renderSuperFooterLinks(args)}\n        <pds-footer-nav-item label=\"Fourth column\">\n          <pds-list>\n            <pds-list-item\n              ><pds-link\n                variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n                href=\"#\"\n                >About us again</pds-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-link\n                variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n                href=\"#\"\n                >Still investor relations</pds-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-link\n                variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n                href=\"#\"\n                >News room two</pds-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-link\n                variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n                href=\"#\"\n                >Sustainable sustainability</pds-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-link\n                variant=\"${args.variant === 'default' ? 'inverted' : 'default'}\"\n                href=\"#\"\n                >More insights</pds-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-footer-nav-item>\n      </pds-footer-nav>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SuperFooterWithAdditionalInfo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Super footer with additional info',\n  args: {\n    variant: 'default',\n    behavior: 'super',\n  },\n  render: (args) =>\n    html`<pds-footer variant=\"${args.variant}\" behavior=\"${args.behavior}\">\n      <div slot=\"additional-info\">\n        <p>\n          Principal Asset Management℠ is a trade name of Principal Global\n          Investors, LLC. Principal®, Principal Financial Group®, Principal\n          Asset Management, and Principal and the logomark design are registered\n          trademarks and service marks of Principal Financial Services, Inc., a\n          Principal Financial Group company, in various countries around the\n          world and may be used only with the permission of Principal Financial\n          Services, Inc.\n        </p>\n        <p>Investing involves risk, including possible loss of principal.</p>\n      </div>\n      <pds-footer-nav behavior=\"3col\">\n        ${renderSuperFooterLinks(args)}\n      </pds-footer-nav>\n    </pds-footer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomLogoSuperFooter",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Super footer with custom logo',\n  args: {\n    variant: 'default',\n    behavior: 'super',\n    logoAriaLabel: 'Custom logo aria-label',\n  },\n  render: (args) =>\n    html`<pds-footer\n      variant=\"${args.variant}\"\n      behavior=\"${args.behavior}\"\n      logoAriaLabel=\"${args.logoAriaLabel}\"\n    >\n      <svg slot=\"logo\" width=\"144\" height=\"58\">\n        <rect\n          width=\"144\"\n          height=\"58\"\n          style=\"fill:#000000;stroke-width:3;stroke:rgb(0,0,0)\"\n        />\n      </svg>\n      <pds-footer-nav behavior=\"3col\">\n        ${renderSuperFooterLinks(args)}\n      </pds-footer-nav>\n    </pds-footer>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtle",
          "declaration": {
            "name": "Subtle",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Login",
          "declaration": {
            "name": "Login",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemoveContact",
          "declaration": {
            "name": "RemoveContact",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomContact",
          "declaration": {
            "name": "CustomContact",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HideLegalLinks",
          "declaration": {
            "name": "HideLegalLinks",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemoveSocial",
          "declaration": {
            "name": "RemoveSocial",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomSocial",
          "declaration": {
            "name": "CustomSocial",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomLegalText",
          "declaration": {
            "name": "CustomLegalText",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SuperFooter",
          "declaration": {
            "name": "SuperFooter",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SuperFooterSubtle",
          "declaration": {
            "name": "SuperFooterSubtle",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SuperFooterWithAdditionalInfo",
          "declaration": {
            "name": "SuperFooterWithAdditionalInfo",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomLogoSuperFooter",
          "declaration": {
            "name": "CustomLogoSuperFooter",
            "module": "packages/web-components/src/lib/components/footer/footer.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer/footer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFooter",
          "slots": [
            {
              "description": "A pds-footer-nav element containing one or more pds-footer-nav-item elements",
              "name": "default"
            },
            {
              "description": "A slot for a heading for the footer",
              "name": "heading"
            },
            {
              "description": "Adds a additional info section into the superFooter",
              "name": "additional-info"
            },
            {
              "description": "Optional custom legal text",
              "name": "legal-text"
            },
            {
              "description": "Optional custom logo, restricted to pds-logo, img, and svg elements",
              "name": "logo"
            },
            {
              "description": "Optional custom contact links, restricted to pds-list elements",
              "name": "custom-contact"
            },
            {
              "description": "Optional custom links appended to the end of the Legal links, restricted to pds-list-item elements",
              "name": "custom-legal-links"
            },
            {
              "description": "Optional override of the default social icons, restricted to pds-list-item elements",
              "name": "social-icons"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "hideContactPhone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default contact phone link",
              "attribute": "hideContactPhone"
            },
            {
              "kind": "field",
              "name": "hideHelpLink",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default help link",
              "attribute": "hideHelpLink"
            },
            {
              "kind": "field",
              "name": "hideContactLink",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default contact link",
              "attribute": "hideContactLink"
            },
            {
              "kind": "field",
              "name": "loginSupportLink",
              "type": {
                "text": "'https://www.principal.com/help'"
              },
              "description": "Link for 'Trouble logging in?' prompt",
              "attribute": "loginSupportLink"
            },
            {
              "kind": "field",
              "name": "termsOfUseLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/terms-of-use'",
              "description": "Web link for terms of use guidelines",
              "attribute": "termsOfUseLink"
            },
            {
              "kind": "field",
              "name": "disclosuresLink",
              "type": {
                "text": "String"
              },
              "default": "'https://www.principal.com/products-services-disclosures'",
              "description": "Web link for disclosures",
              "attribute": "disclosuresLink"
            },
            {
              "kind": "field",
              "name": "privacyLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/privacy-policies'",
              "description": "Web link for privacy policy",
              "attribute": "privacyLink"
            },
            {
              "kind": "field",
              "name": "securityLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/security-policies'",
              "description": "Web link for security policy",
              "attribute": "securityLink"
            },
            {
              "kind": "field",
              "name": "reportFraudLink",
              "type": {
                "text": "String"
              },
              "default": "'https://www.principal.com/about-us/our-company/policies/report-fraud-or-unethical-conduct'",
              "description": "Web link for reporting fraud",
              "attribute": "reportFraudLink"
            },
            {
              "kind": "field",
              "name": "behavior",
              "type": {
                "text": "'login' | 'super' | 'default'"
              },
              "default": "'default'",
              "description": "Context-specific footer behavior\n- **login** provides a link for login assistance\n- **super** provides logo above an optional footer nav populated with footer nav items",
              "attribute": "behavior"
            },
            {
              "kind": "field",
              "name": "logoHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link for the logo",
              "attribute": "logoHref"
            },
            {
              "kind": "field",
              "name": "logoAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "String for a custom aria label describing the logo element\n- By default, aria label for the logo will read \"Link to Principal homepage\"\n- Pass a string of \"false\" in order to suppress the aria label attribute",
              "attribute": "logoAriaLabel"
            },
            {
              "kind": "field",
              "name": "hideLogo",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true to hide the logo in a super footer. This is NOT recommended unless you have a sticky header that will cause incorrect vertical alignment on the page.",
              "attribute": "hideLogo"
            },
            {
              "kind": "field",
              "name": "hideSocialIcons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the social icons",
              "attribute": "hideSocialIcons"
            },
            {
              "kind": "field",
              "name": "hideLegalLinks",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Deactivates the legal links",
              "attribute": "hideLegalLinks"
            },
            {
              "kind": "field",
              "name": "legalNavAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "Aria label for legal-nav",
              "attribute": "legalNavAriaLabel"
            },
            {
              "kind": "field",
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow'"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "attribute": "layoutContainerVariant"
            },
            {
              "kind": "field",
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "attribute": "layoutContainerRemovePadding"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "fieldName": "variant"
            },
            {
              "name": "hideContactPhone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default contact phone link",
              "fieldName": "hideContactPhone"
            },
            {
              "name": "hideHelpLink",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default help link",
              "fieldName": "hideHelpLink"
            },
            {
              "name": "hideContactLink",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide default contact link",
              "fieldName": "hideContactLink"
            },
            {
              "name": "loginSupportLink",
              "type": {
                "text": "'https://www.principal.com/help'"
              },
              "description": "Link for 'Trouble logging in?' prompt",
              "fieldName": "loginSupportLink"
            },
            {
              "name": "termsOfUseLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/terms-of-use'",
              "description": "Web link for terms of use guidelines",
              "fieldName": "termsOfUseLink"
            },
            {
              "name": "disclosuresLink",
              "type": {
                "text": "String"
              },
              "default": "'https://www.principal.com/products-services-disclosures'",
              "description": "Web link for disclosures",
              "fieldName": "disclosuresLink"
            },
            {
              "name": "privacyLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/privacy-policies'",
              "description": "Web link for privacy policy",
              "fieldName": "privacyLink"
            },
            {
              "name": "securityLink",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com/security-policies'",
              "description": "Web link for security policy",
              "fieldName": "securityLink"
            },
            {
              "name": "reportFraudLink",
              "type": {
                "text": "String"
              },
              "default": "'https://www.principal.com/about-us/our-company/policies/report-fraud-or-unethical-conduct'",
              "description": "Web link for reporting fraud",
              "fieldName": "reportFraudLink"
            },
            {
              "name": "behavior",
              "type": {
                "text": "'login' | 'super' | 'default'"
              },
              "default": "'default'",
              "description": "Context-specific footer behavior\n- **login** provides a link for login assistance\n- **super** provides logo above an optional footer nav populated with footer nav items",
              "fieldName": "behavior"
            },
            {
              "name": "logoHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link for the logo",
              "fieldName": "logoHref"
            },
            {
              "name": "logoAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "String for a custom aria label describing the logo element\n- By default, aria label for the logo will read \"Link to Principal homepage\"\n- Pass a string of \"false\" in order to suppress the aria label attribute",
              "fieldName": "logoAriaLabel"
            },
            {
              "name": "hideLogo",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true to hide the logo in a super footer. This is NOT recommended unless you have a sticky header that will cause incorrect vertical alignment on the page.",
              "fieldName": "hideLogo"
            },
            {
              "name": "hideSocialIcons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the social icons",
              "fieldName": "hideSocialIcons"
            },
            {
              "name": "hideLegalLinks",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Deactivates the legal links",
              "fieldName": "hideLegalLinks"
            },
            {
              "name": "legalNavAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "Aria label for legal-nav",
              "fieldName": "legalNavAriaLabel"
            },
            {
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow'"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "fieldName": "layoutContainerVariant"
            },
            {
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "fieldName": "layoutContainerRemovePadding"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "The Principal footer component",
          "tagName": "pds-footer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFooter",
          "declaration": {
            "name": "PdsFooter",
            "module": "packages/web-components/src/lib/components/footer/footer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footer",
          "declaration": {
            "name": "PdsFooter",
            "module": "packages/web-components/src/lib/components/footer/footer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav/footer-nav.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav/footer-nav.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    behavior: '3col',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "FourCols",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Four columns',\n  args: {\n    behavior: '4col',\n  },\n  render: (args) => {\n    return html`<pds-footer-nav behavior=\"${args.behavior}\">\n      <pds-footer-nav-item label=\"Our company\">\n        <pds-list>\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >About us</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Investor relations</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >News room</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Sustainability</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Insights</pds-link\n            ></pds-list-item\n          >\n        </pds-list></pds-footer-nav-item\n      >\n      <pds-footer-nav-item label=\"We're hiring\"\n        ><pds-list>\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Careers</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Global jobs</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Financial professional opportunities</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Internships</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Recent graduates</pds-link\n            ></pds-list-item\n          >\n        </pds-list></pds-footer-nav-item\n      >\n      <pds-footer-nav-item label=\"Other sites\"\n        ><pds-list>\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >For dental providers</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >For financial professionals</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Principal Asset Management</pds-link\n            ></pds-list-item\n          >\n        </pds-list></pds-footer-nav-item\n      >\n      <pds-footer-nav-item label=\"Fourth column\">\n        <pds-list>\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >About us again</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Still investor relations</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >News room two</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >Sustainable sustainability</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-link variant=\"default\" href=\"#\"\n              >More insights</pds-link\n            ></pds-list-item\n          >\n        </pds-list>\n      </pds-footer-nav-item>\n    </pds-footer-nav>`;\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/footer-nav/footer-nav.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footer-nav/footer-nav.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FourCols",
          "declaration": {
            "name": "FourCols",
            "module": "packages/web-components/src/lib/components/footer-nav/footer-nav.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-nav/footer-nav.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFooterNav",
          "slots": [
            {
              "description": "One or more pds-foover-nav-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "behavior",
              "type": {
                "text": "'3col' | '4col'"
              },
              "default": "'3col'",
              "description": "**3col** renders the footer-nav-items in a three-across grid at desktop\n- **4col** renders the footer-nav-item in a four-across grid at desktop",
              "attribute": "behavior"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "**default** renders the footer-nav used for primary actions on a dark background\n- **subtle** renders the footer-nav-item used for primary actions on a subtle background",
              "fieldName": "variant"
            },
            {
              "name": "behavior",
              "type": {
                "text": "'3col' | '4col'"
              },
              "default": "'3col'",
              "description": "**3col** renders the footer-nav-items in a three-across grid at desktop\n- **4col** renders the footer-nav-item in a four-across grid at desktop",
              "fieldName": "behavior"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A component that renders a group of pds-footer-nav-item elements",
          "tagName": "pds-footer-nav",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFooterNav",
          "declaration": {
            "name": "PdsFooterNav",
            "module": "packages/web-components/src/lib/components/footer-nav/footer-nav.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footer-nav",
          "declaration": {
            "name": "PdsFooterNav",
            "module": "packages/web-components/src/lib/components/footer-nav/footer-nav.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote/footnote.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote/footnote.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/footnote/footnote.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footnote/footnote.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote/footnote.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFootnote",
          "slots": [
            {
              "description": "This is the ol element content (one or more pds-footnote-item elements)",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component creates a card container for other elements",
          "tagName": "pds-footnote",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFootnote",
          "declaration": {
            "name": "PdsFootnote",
            "module": "packages/web-components/src/lib/components/footnote/footnote.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footnote",
          "declaration": {
            "name": "PdsFootnote",
            "module": "packages/web-components/src/lib/components/footnote/footnote.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-item/footnote-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-item/footnote-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/footnote-item/footnote-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footnote-item/footnote-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-item/footnote-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFootnoteItem",
          "slots": [
            {
              "description": "This slot holds the footnote text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default'"
              },
              "description": "Style variant\n- **default** renders the standard footnote-item used for footnotes",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "footnoteId",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "footnoteId"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "attribute": "ariaLabel"
            },
            {
              "kind": "method",
              "name": "focusOnPreviousItem",
              "description": "Focuses on previous item\nFor all `pds-link` components in the light DOM, match the footnote\nitem href and pds-link id.\nIf they match, focus on the `pds-c-link`. Set timeout is\nneeded to occur slightly after the link click"
            },
            {
              "kind": "method",
              "name": "getFootnoteItemId",
              "description": "Gets the \"footnote-item id\" value",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default'"
              },
              "description": "Style variant\n- **default** renders the standard footnote-item used for footnotes",
              "fieldName": "variant"
            },
            {
              "name": "footnoteId",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "footnoteId"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A footnote item is an item in the footnotes list.\nIt requires an id and href to properly link to a piece of content.",
          "tagName": "pds-footnote-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFootnoteItem",
          "declaration": {
            "name": "PdsFootnoteItem",
            "module": "packages/web-components/src/lib/components/footnote-item/footnote-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footnote-item",
          "declaration": {
            "name": "PdsFootnoteItem",
            "module": "packages/web-components/src/lib/components/footnote-item/footnote-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Footer/Footer contact link',\n  component: 'pds-footer-contact-link',\n  tags: ['autodocs'],\n  parameters: {\n    actions: {\n      handles: ['pds-link-click'],\n    },\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent slotted within the footer component when creating a super footer.',\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-footer-contact-link\n      linkCategory=${args.linkCategory}\n      variant=${args.variant}\n      ariaLabel=${args.ariaLabel}\n      href=\"${args.href}\"\n    ></pds-footer-contact-link>`,\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultPhoneInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default phone inverted',\n  args: {\n    variant: 'inverted',\n    linkCategory: 'phone',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultEmail",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default email',\n  args: {\n    variant: 'default',\n    linkCategory: 'email',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultHelp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default help',\n  args: {\n    linkCategory: 'help',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "CustomPhone",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom phone',\n  args: {\n    linkCategory: 'phone',\n    href: 'tel:123-456-7890',\n    ariaLabel: 'Call us toll free',\n  },\n  render: (args) =>\n    html`<pds-footer-contact-link\n      linkCategory=\"${args.linkCategory}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      href=\"${args.href}\"\n      >tol:123-456-7890</pds-footer-contact-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomEmailInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom email inverted',\n  args: {\n    linkCategory: 'email',\n    href: '#',\n    ariaLabel: 'Send us a message',\n    variant: 'inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n  render: (args) =>\n    html`<pds-footer-contact-link\n      variant=\"${args.variant}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      linkCategory=\"${args.linkCategory}\"\n      href=\"${args.href}\"\n      >Get in touch</pds-footer-contact-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomHelp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom help',\n  args: {\n    linkCategory: 'help',\n    href: 'www.google.com',\n    ariaLabel: 'Get some help',\n  },\n  render: (args) =>\n    html`<pds-footer-contact-link\n      linkCategory=\"${args.linkCategory}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      href=\"${args.href}\"\n      >Additional information</pds-footer-contact-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomFax",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom fax',\n  args: {\n    linkCategory: 'fax',\n    href: '123-456-7890',\n    ariaLabel: 'Send us a fax',\n  },\n  render: (args) =>\n    html`<pds-footer-contact-link\n      linkCategory=\"${args.linkCategory}\"\n      ariaLabel=\"${args.ariaLabel}\"\n      href=\"${args.href}\"\n      >123-456-7890</pds-footer-contact-link\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultPhoneInverted",
          "declaration": {
            "name": "DefaultPhoneInverted",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultEmail",
          "declaration": {
            "name": "DefaultEmail",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultHelp",
          "declaration": {
            "name": "DefaultHelp",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomPhone",
          "declaration": {
            "name": "CustomPhone",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomEmailInverted",
          "declaration": {
            "name": "CustomEmailInverted",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomHelp",
          "declaration": {
            "name": "CustomHelp",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomFax",
          "declaration": {
            "name": "CustomFax",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFooterContactLink",
          "slots": [
            {
              "description": "Contains the display text of custom links",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders a default pds-link for use on lighter backgrounds\n- **inverted** renders an inverted pds-link for use on darker backgrounds",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "linkCategory",
              "type": {
                "text": "'phone' | 'email' | 'help' | 'fax'"
              },
              "description": "Link category\n- **phone** renders a footer-contact-link with a phone icon\n- **email** renders a footer-contact-link with a mail icon\n- **help** renders a footer-contact-link with a help-circle icon\n- **fax** renders a footer-contact-link with a print icon",
              "attribute": "linkCategory"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Href prop for phone/fax # or contact URL",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "aria label to ensure a11y (esp. for phone number links)",
              "attribute": "ariaLabel"
            },
            {
              "kind": "method",
              "name": "attachIcon"
            },
            {
              "kind": "method",
              "name": "getDefaultHref"
            },
            {
              "kind": "method",
              "name": "getDefaultAriaLabel"
            },
            {
              "kind": "method",
              "name": "getDefaultLabelText"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders a default pds-link for use on lighter backgrounds\n- **inverted** renders an inverted pds-link for use on darker backgrounds",
              "fieldName": "variant"
            },
            {
              "name": "linkCategory",
              "type": {
                "text": "'phone' | 'email' | 'help' | 'fax'"
              },
              "description": "Link category\n- **phone** renders a footer-contact-link with a phone icon\n- **email** renders a footer-contact-link with a mail icon\n- **help** renders a footer-contact-link with a help-circle icon\n- **fax** renders a footer-contact-link with a print icon",
              "fieldName": "linkCategory"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Href prop for phone/fax # or contact URL",
              "fieldName": "href"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "aria label to ensure a11y (esp. for phone number links)",
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component contains default or customizable contact links to be used within the PdsFooter",
          "tagName": "pds-footer-contact-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFooterContactLink",
          "declaration": {
            "name": "PdsFooterContactLink",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footer-contact-link",
          "declaration": {
            "name": "PdsFooterContactLink",
            "module": "packages/web-components/src/lib/components/footer-contact-link/footer-contact-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid/grid.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid/grid.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "SideBySide",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Side by side',\n  args: {\n    variant: 'side-by-side',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "TwoUp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '2up',\n  args: {\n    variant: '2up',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ThreeUp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '3up',\n  args: {\n    variant: '3up',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ThreeUpBreakFaster",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '3up break faster',\n  args: {\n    variant: '3up',\n    break: 'faster',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ThreeUpBreakSlower",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '3up break slower',\n  args: {\n    variant: '3up',\n    break: 'slower',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToThreeUp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-3up',\n  args: {\n    variant: '1-3up',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToThreeUpBreakFaster",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-3up break faster',\n  args: {\n    variant: '1-3up',\n    break: 'faster',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToThreeUpBreakSlower",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-3up break slower',\n  args: {\n    variant: '1-3up',\n    break: 'slower',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 5</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 6</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToTwoToFourUp",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-2-4up',\n  args: {\n    variant: '1-2-4up',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToTwoToFourUpBreakFaster",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-2-4up break faster',\n  args: {\n    variant: '1-2-4up',\n    break: 'faster',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        },
        {
          "kind": "variable",
          "name": "OneToTwoToFourUpBreakSlower",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '1-2-4up break slower',\n  args: {\n    variant: '1-2-4up',\n    break: 'slower',\n  },\n  render: (args) =>\n    html`<pds-grid variant=\"${args.variant}\" break=\"${args.break}\">\n      <pds-grid-item>\n        <placeholder-element>Item 1</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 2</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 3</placeholder-element>\n      </pds-grid-item>\n      <pds-grid-item>\n        <placeholder-element>Item 4</placeholder-element>\n      </pds-grid-item>\n    </pds-grid>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SideBySide",
          "declaration": {
            "name": "SideBySide",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TwoUp",
          "declaration": {
            "name": "TwoUp",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ThreeUp",
          "declaration": {
            "name": "ThreeUp",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ThreeUpBreakFaster",
          "declaration": {
            "name": "ThreeUpBreakFaster",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ThreeUpBreakSlower",
          "declaration": {
            "name": "ThreeUpBreakSlower",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToThreeUp",
          "declaration": {
            "name": "OneToThreeUp",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToThreeUpBreakFaster",
          "declaration": {
            "name": "OneToThreeUpBreakFaster",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToThreeUpBreakSlower",
          "declaration": {
            "name": "OneToThreeUpBreakSlower",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToTwoToFourUp",
          "declaration": {
            "name": "OneToTwoToFourUp",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToTwoToFourUpBreakFaster",
          "declaration": {
            "name": "OneToTwoToFourUpBreakFaster",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OneToTwoToFourUpBreakSlower",
          "declaration": {
            "name": "OneToTwoToFourUpBreakSlower",
            "module": "packages/web-components/src/lib/components/grid/grid.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid/grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsGrid",
          "slots": [
            {
              "description": "Contains grid items within the layout configuration, restricted to pds-grid-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'2up' | '3up' | '1-3up' | '1-2-4up' | 'side-by-side' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders the grid item stacked with a gap in between\n- **2up** yields a grid whose grid items are stacked on small screens but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 3-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens transforms to a 3-across pattern on larger screens\n- **side-by-side** yields a grid whose grid items don't necessarily ever need to stack and displayed side-by-side for all the viewports",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** grid items are spaced with a gap\n- **none** grid items are spaced with no gap between items\n- **sm** grid items are spaced with smaller gap than default\n- **lg** grid items are spaced with large gap than default",
              "attribute": "gap"
            },
            {
              "kind": "field",
              "name": "break",
              "type": {
                "text": "'faster' | 'slower' | 'default'"
              },
              "default": "'default'",
              "description": "**default** stacks at default viewport\n- **faster** stacks at a smaller viewport than the default\n- **slower** stacks at a larger viewport than the default",
              "attribute": "break"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'2up' | '3up' | '1-3up' | '1-2-4up' | 'side-by-side' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders the grid item stacked with a gap in between\n- **2up** yields a grid whose grid items are stacked on small screens but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 3-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens transforms to a 3-across pattern on larger screens\n- **side-by-side** yields a grid whose grid items don't necessarily ever need to stack and displayed side-by-side for all the viewports",
              "fieldName": "variant"
            },
            {
              "name": "gap",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** grid items are spaced with a gap\n- **none** grid items are spaced with no gap between items\n- **sm** grid items are spaced with smaller gap than default\n- **lg** grid items are spaced with large gap than default",
              "fieldName": "gap"
            },
            {
              "name": "break",
              "type": {
                "text": "'faster' | 'slower' | 'default'"
              },
              "default": "'default'",
              "description": "**default** stacks at default viewport\n- **faster** stacks at a smaller viewport than the default\n- **slower** stacks at a larger viewport than the default",
              "fieldName": "break"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component provides some helpful layout configurations",
          "tagName": "pds-grid",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsGrid",
          "declaration": {
            "name": "PdsGrid",
            "module": "packages/web-components/src/lib/components/grid/grid.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-grid",
          "declaration": {
            "name": "PdsGrid",
            "module": "packages/web-components/src/lib/components/grid/grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/heading/heading.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/heading/heading.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Heading1VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H1 variant, display default',\n  args: { headingTag: 'h1', variant: 'display-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, display default',\n  args: { headingTag: 'h2', variant: 'display-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantDisplaySmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, display small',\n  args: { headingTag: 'h2', variant: 'display-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantHeadlineSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, headline small',\n  args: { headingTag: 'h2', variant: 'headline-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantHeadlineDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, headline default',\n  args: { headingTag: 'h2', variant: 'headline-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantHeadlineLarge",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, headline large',\n  args: { headingTag: 'h2', variant: 'headline-lg' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantTitleExtraSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, title xsmall',\n  args: { headingTag: 'h2', variant: 'title-xs' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantTitleSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, title small',\n  args: { headingTag: 'h2', variant: 'title-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantTitleDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, title default',\n  args: { headingTag: 'h2', variant: 'title-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantTitleLarge",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, title large',\n  args: { headingTag: 'h2', variant: 'title-lg' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantLabelSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, label small',\n  args: { headingTag: 'h2', variant: 'label-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantLabelDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, label default',\n  args: { headingTag: 'h2', variant: 'label-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantLabelLarge",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, label large',\n  args: { headingTag: 'h2', variant: 'label-lg' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantMetaSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, meta small',\n  args: { headingTag: 'h2', variant: 'meta-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading2VariantMetaDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H2 variant, meta default',\n  args: { headingTag: 'h2', variant: 'meta-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading3VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H3 variant, display default',\n  args: { headingTag: 'h3', variant: 'display-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading4VariantDisplaySmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H4 variant, display small',\n  args: { headingTag: 'h4', variant: 'display-sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading4VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H4 variant, display default',\n  args: { headingTag: 'h4', variant: 'display-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading5VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H5 variant, display default',\n  args: { headingTag: 'h5', variant: 'display-default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Heading6VariantDisplayDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'H6 variant, display default',\n  args: { headingTag: 'h6', variant: 'display-default' },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading1VariantDisplayDefault",
          "declaration": {
            "name": "Heading1VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantDisplayDefault",
          "declaration": {
            "name": "Heading2VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantDisplaySmall",
          "declaration": {
            "name": "Heading2VariantDisplaySmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantHeadlineSmall",
          "declaration": {
            "name": "Heading2VariantHeadlineSmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantHeadlineDefault",
          "declaration": {
            "name": "Heading2VariantHeadlineDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantHeadlineLarge",
          "declaration": {
            "name": "Heading2VariantHeadlineLarge",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantTitleExtraSmall",
          "declaration": {
            "name": "Heading2VariantTitleExtraSmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantTitleSmall",
          "declaration": {
            "name": "Heading2VariantTitleSmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantTitleDefault",
          "declaration": {
            "name": "Heading2VariantTitleDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantTitleLarge",
          "declaration": {
            "name": "Heading2VariantTitleLarge",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantLabelSmall",
          "declaration": {
            "name": "Heading2VariantLabelSmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantLabelDefault",
          "declaration": {
            "name": "Heading2VariantLabelDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantLabelLarge",
          "declaration": {
            "name": "Heading2VariantLabelLarge",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantMetaSmall",
          "declaration": {
            "name": "Heading2VariantMetaSmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading2VariantMetaDefault",
          "declaration": {
            "name": "Heading2VariantMetaDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading3VariantDisplayDefault",
          "declaration": {
            "name": "Heading3VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading4VariantDisplaySmall",
          "declaration": {
            "name": "Heading4VariantDisplaySmall",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading4VariantDisplayDefault",
          "declaration": {
            "name": "Heading4VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading5VariantDisplayDefault",
          "declaration": {
            "name": "Heading5VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Heading6VariantDisplayDefault",
          "declaration": {
            "name": "Heading6VariantDisplayDefault",
            "module": "packages/web-components/src/lib/components/heading/heading.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/heading/heading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsHeading",
          "slots": [
            {
              "description": "The heading text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'display-default'\n    | 'display-sm'\n    | 'headline-lg'\n    | 'headline-default'\n    | 'headline-sm'\n    | 'title-lg'\n    | 'title-default'\n    | 'title-sm'\n    | 'title-xs'\n    | 'label-lg'\n    | 'label-default'\n    | 'label-sm'\n    | 'meta-sm'\n    | 'meta-default'"
              },
              "description": "Style variant\n- **display-default** renders a heading with `display-default` type semantic preset\n- **display-sm** renders a heading with `display-sm` type semantic preset\n- **headline-lg** renders a heading with `headline-lg` type semantic preset\n- **headline-default** renders a heading with `headline-default` type semantic preset\n- **headline-sm** renders a heading with `headline-sm` type semantic preset\n- **title-lg** renders a heading with `title-lg` type semantic preset\n- **title-default** renders a heading with `title-default` type semantic preset\n- **title-sm** renders a heading with `title-sm` type semantic preset\n- **title-xs** renders a heading with `title-xs` type semantic preset\n- **label-lg** renders a heading with `label-lg` type semantic preset\n- **label-default** renders a heading with `label-default` type semantic preset\n- **label-sm** renders a heading with `label-sm` type semantic preset\n- **meta-default** renders a heading with `meta-default` type semantic preset\n- **meta-sm** renders a heading with `meta-sm` type semantic preset",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "inverted"
            },
            {
              "kind": "field",
              "name": "headingTag",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
              },
              "description": "Dynamic tag name for the component\nThis is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<pds-heading variant=\"display-default\">\n  <ul>\n    <li>**h1** renders an `h1` tag</li>\n    <li>**h2** renders an `h2` tag</li>\n    <li>**h3** renders an `h3` tag</li>\n    <li>**h4** renders an `h4` tag</li>\n    <li>**h5** renders an `h5` tag</li>\n    <li>**h6** renders an `h6` tag</li>\n  </ul>\n</pds-heading>",
              "attribute": "headingTag"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "| 'display-default'\n    | 'display-sm'\n    | 'headline-lg'\n    | 'headline-default'\n    | 'headline-sm'\n    | 'title-lg'\n    | 'title-default'\n    | 'title-sm'\n    | 'title-xs'\n    | 'label-lg'\n    | 'label-default'\n    | 'label-sm'\n    | 'meta-sm'\n    | 'meta-default'"
              },
              "description": "Style variant\n- **display-default** renders a heading with `display-default` type semantic preset\n- **display-sm** renders a heading with `display-sm` type semantic preset\n- **headline-lg** renders a heading with `headline-lg` type semantic preset\n- **headline-default** renders a heading with `headline-default` type semantic preset\n- **headline-sm** renders a heading with `headline-sm` type semantic preset\n- **title-lg** renders a heading with `title-lg` type semantic preset\n- **title-default** renders a heading with `title-default` type semantic preset\n- **title-sm** renders a heading with `title-sm` type semantic preset\n- **title-xs** renders a heading with `title-xs` type semantic preset\n- **label-lg** renders a heading with `label-lg` type semantic preset\n- **label-default** renders a heading with `label-default` type semantic preset\n- **label-sm** renders a heading with `label-sm` type semantic preset\n- **meta-default** renders a heading with `meta-default` type semantic preset\n- **meta-sm** renders a heading with `meta-sm` type semantic preset",
              "fieldName": "variant"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "inverted"
            },
            {
              "name": "headingTag",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
              },
              "description": "Dynamic tag name for the component\nThis is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<pds-heading variant=\"display-default\">\n  <ul>\n    <li>**h1** renders an `h1` tag</li>\n    <li>**h2** renders an `h2` tag</li>\n    <li>**h3** renders an `h3` tag</li>\n    <li>**h4** renders an `h4` tag</li>\n    <li>**h5** renders an `h5` tag</li>\n    <li>**h6** renders an `h6` tag</li>\n  </ul>\n</pds-heading>",
              "fieldName": "headingTag"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component displays different heading tags in different sizes based on properties",
          "tagName": "pds-heading",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsHeading",
          "declaration": {
            "name": "PdsHeading",
            "module": "packages/web-components/src/lib/components/heading/heading.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-heading",
          "declaration": {
            "name": "PdsHeading",
            "module": "packages/web-components/src/lib/components/heading/heading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid-item/grid-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid-item/grid-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Layout/Grid/Grid item',\n  component: 'pds-grid-item',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the grid component.',\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    text: 'Grid item',\n  },\n  render: () =>\n    html`<pds-grid-item>\n      <placeholder-element>Grid item</placeholder-element>\n    </pds-grid-item> `,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/grid-item/grid-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/grid-item/grid-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/grid-item/grid-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsGridItem",
          "slots": [
            {
              "description": "This slot holds the grid item content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A grid item element should always be contained within a pds-grid element",
          "tagName": "pds-grid-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsGridItem",
          "declaration": {
            "name": "PdsGridItem",
            "module": "packages/web-components/src/lib/components/grid-item/grid-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-grid-item",
          "declaration": {
            "name": "PdsGridItem",
            "module": "packages/web-components/src/lib/components/grid-item/grid-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-link/footnote-link.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-link/footnote-link.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: { variant: 'default' },\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: { variant: 'inverted' },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/footnote-link/footnote-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/footnote-link/footnote-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/footnote-link/footnote-link.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/footnote-link/footnote-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsFootnoteLink",
          "slots": [
            {
              "description": "This gets auto-populated with the appropriate number for the footnote-link's position on the page.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "footnoteId",
              "type": {
                "text": "string"
              },
              "description": "The ID used to link together the footnote-item and the footnote-link on the page. This has to match the ID of the footnote-item for it to work properly.\nThe text will be replaced with the index of the footnote",
              "attribute": "footnoteId"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **inverted** used on a darker background",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "footnoteNumber",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "footnoteNumber"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "attribute": "size",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "attribute": "href",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "attribute": "download",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "attribute": "hreflang",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "attribute": "target",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "attribute": "ariaLabel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "attribute": "ariaCurrent",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "attribute": "role",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "attribute": "type",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "attribute": "button",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "attribute": "hover",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "addSizeToLinkIcon",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "footnoteId",
              "type": {
                "text": "string"
              },
              "description": "The ID used to link together the footnote-item and the footnote-link on the page. This has to match the ID of the footnote-item for it to work properly.\nThe text will be replaced with the index of the footnote",
              "fieldName": "footnoteId"
            },
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **inverted** used on a darker background",
              "fieldName": "variant",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "footnoteNumber",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "footnoteNumber"
            },
            {
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "fieldName": "hreflang",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "fieldName": "ariaLabel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "fieldName": "ariaCurrent",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "fieldName": "role",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "fieldName": "button",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "fieldName": "hover",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsLink",
            "module": "/packages/web-components/src/lib/components/link/link"
          },
          "summary": "This component is meant to handle the superscript links that are used as a tie to a footnote.",
          "tagName": "pds-footnote-link",
          "customElement": true,
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-link-click",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFootnoteLink",
          "declaration": {
            "name": "PdsFootnoteLink",
            "module": "packages/web-components/src/lib/components/footnote-link/footnote-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-footnote-link",
          "declaration": {
            "name": "PdsFootnoteLink",
            "module": "packages/web-components/src/lib/components/footnote-link/footnote-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/layout-container/layout-container.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "RemovePaddingMd",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove padding medium',\n  args: {\n    removePadding: 'md',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "RemovePaddingAll",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove padding all',\n  args: {\n    removePadding: 'all',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Narrow",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Narrow',\n  args: {\n    variant: 'narrow',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemovePaddingMd",
          "declaration": {
            "name": "RemovePaddingMd",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RemovePaddingAll",
          "declaration": {
            "name": "RemovePaddingAll",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Narrow",
          "declaration": {
            "name": "Narrow",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/layout-container/layout-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLayoutContainer",
          "slots": [
            {
              "description": "This slot holds the elements within the layout",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'narrow'"
              },
              "default": "'default'",
              "description": "Style variant\n- **narrow** renders the layout-container narrower than the default",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "removePadding",
              "type": {
                "text": "'md' | 'all'"
              },
              "description": "Remove padding\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "attribute": "removePadding"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'narrow'"
              },
              "default": "'default'",
              "description": "Style variant\n- **narrow** renders the layout-container narrower than the default",
              "fieldName": "variant"
            },
            {
              "name": "removePadding",
              "type": {
                "text": "'md' | 'all'"
              },
              "description": "Remove padding\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "fieldName": "removePadding"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A container element meant to wrap page content",
          "tagName": "pds-layout-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLayoutContainer",
          "declaration": {
            "name": "PdsLayoutContainer",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-layout-container",
          "declaration": {
            "name": "PdsLayoutContainer",
            "module": "packages/web-components/src/lib/components/layout-container/layout-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/hr/hr.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/hr/hr.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/hr/hr.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/hr/hr.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/hr/hr.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsHr",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A horizontal rule component",
          "tagName": "pds-hr",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsHr",
          "declaration": {
            "name": "PdsHr",
            "module": "packages/web-components/src/lib/components/hr/hr.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-hr",
          "declaration": {
            "name": "PdsHr",
            "module": "packages/web-components/src/lib/components/hr/hr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/linelength-container/linelength-container.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/linelength-container/linelength-container.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  render: () =>\n    html`<pds-linelength-container\n      ><pds-text-passage>\n        For the default container, it will wrap to the next line after about 80\n        characters.</pds-text-passage\n      ></pds-linelength-container\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Small',\n  args: { size: 'sm' },\n  render: (args) =>\n    html`<pds-linelength-container size=\"${args.size}\"\n      ><pds-text-passage\n        >The small container prop should wrap at about 60\n        characters.</pds-text-passage\n      ></pds-linelength-container\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/linelength-container/linelength-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/linelength-container/linelength-container.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/linelength-container/linelength-container.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/linelength-container/linelength-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLinelengthContainer",
          "slots": [
            {
              "description": "This slot holds the elements within the layout",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "**default** linelength container that caps the width at about 80 characters per line\n- **sm** linelength container that caps the width at about 60 characters per line",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "**default** linelength container that caps the width at about 80 characters per line\n- **sm** linelength container that caps the width at about 60 characters per line",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A container element meant to wrap page content, capping width at about 80 characters per line",
          "tagName": "pds-linelength-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLinelengthContainer",
          "declaration": {
            "name": "PdsLinelengthContainer",
            "module": "packages/web-components/src/lib/components/linelength-container/linelength-container.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-linelength-container",
          "declaration": {
            "name": "PdsLinelengthContainer",
            "module": "packages/web-components/src/lib/components/linelength-container/linelength-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/link/link.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/link/link.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n    size: 'default',\n    href: 'https://www.principal.com',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default inverted',\n  args: {\n    variant: 'inverted',\n    size: 'default',\n    href: 'https://www.principal.com',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Emphasis",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Emphasis',\n  args: {\n    variant: 'emphasis',\n    size: 'default',\n    href: 'https://www.principal.com',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "EmphasisInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Emphasis inverted',\n  args: {\n    variant: 'emphasis-inverted',\n    size: 'default',\n    href: 'https://www.principal.com',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "IconLeft",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon left',\n  args: { size: 'default' },\n  render: () =>\n    html`<pds-link href=\"https://www.principal.com\">\n      <pds-icon-check slot=\"icon-left\"></pds-icon-check>\n      <span>Link text</span></pds-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "IconRight",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon right',\n  args: { size: 'default' },\n  render: () =>\n    html`<pds-link href=\"https://www.principal.com\">\n      <span>Link text</span><pds-icon-check slot=\"icon-right\"></pds-icon-check\n    ></pds-link>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Download",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Download',\n  args: { download: true, href: 'https://www.principal.com' },\n}"
        },
        {
          "kind": "variable",
          "name": "HoverTriggered",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hover triggered',\n  args: { hover: true, href: 'https://www.principal.com' },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link default',\n  args: {\n    button: 'default',\n    href: 'https://www.principal.com',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkDefaultSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link default small',\n  args: {\n    button: 'default',\n    href: 'https://www.principal.com',\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkDefaultInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link default inverted',\n  args: {\n    button: 'default-inverted',\n    href: 'https://www.principal.com',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient - this is a false positive\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkPrimary",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link primary',\n  args: {\n    button: 'primary',\n    href: 'https://www.principal.com',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkPrimaryInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link primary inverted',\n  args: {\n    button: 'primary-inverted',\n    href: 'https://www.principal.com',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link icon',\n  args: {\n    button: 'icon',\n    href: 'https://www.principal.com',\n  },\n  render: (args) =>\n    html`<pds-link\n      href=\"${args.href}\"\n      button=\"${args.button}\"\n      role=\"link\"\n      ariaLabel=\"More actions\"\n    >\n      <pds-icon-more-horizontal slot=\"icon-left\"></pds-icon-more-horizontal>\n    </pds-link>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ButtonLinkIconInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Button link icon inverted',\n  args: {\n    button: 'icon-inverted',\n    href: 'https://www.principal.com',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n  render: (args) =>\n    html`<pds-link\n      href=\"${args.href}\"\n      button=\"${args.button}\"\n      role=\"link\"\n      ariaLabel=\"More actions\"\n    >\n      <pds-icon-more-horizontal slot=\"icon-right\"></pds-icon-more-horizontal>\n    </pds-link>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultInverted",
          "declaration": {
            "name": "DefaultInverted",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Emphasis",
          "declaration": {
            "name": "Emphasis",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "EmphasisInverted",
          "declaration": {
            "name": "EmphasisInverted",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconLeft",
          "declaration": {
            "name": "IconLeft",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconRight",
          "declaration": {
            "name": "IconRight",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Download",
          "declaration": {
            "name": "Download",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HoverTriggered",
          "declaration": {
            "name": "HoverTriggered",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkDefault",
          "declaration": {
            "name": "ButtonLinkDefault",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkDefaultSmall",
          "declaration": {
            "name": "ButtonLinkDefaultSmall",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkDefaultInverted",
          "declaration": {
            "name": "ButtonLinkDefaultInverted",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkPrimary",
          "declaration": {
            "name": "ButtonLinkPrimary",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkPrimaryInverted",
          "declaration": {
            "name": "ButtonLinkPrimaryInverted",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkIcon",
          "declaration": {
            "name": "ButtonLinkIcon",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ButtonLinkIconInverted",
          "declaration": {
            "name": "ButtonLinkIconInverted",
            "module": "packages/web-components/src/lib/components/link/link.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/link/link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLink",
          "slots": [
            {
              "description": "This slot holds an icon to the left of the link. Icons are restricted to the PDS icon sets only",
              "name": "icon-left"
            },
            {
              "description": "This slot holds the link contents",
              "name": "default"
            },
            {
              "description": "This slot holds an icon to the right of the link. Icons are restricted to the PDS icon sets only",
              "name": "icon-right"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "attribute": "hreflang"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "attribute": "ariaCurrent"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "attribute": "role"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "attribute": "button"
            },
            {
              "kind": "field",
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "attribute": "hover"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addSizeToLinkIcon"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-link-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "fieldName": "href"
            },
            {
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "fieldName": "download"
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "fieldName": "rel"
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "fieldName": "hreflang"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "fieldName": "target"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "fieldName": "ariaLabel"
            },
            {
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "fieldName": "ariaCurrent"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "fieldName": "role"
            },
            {
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "fieldName": "type"
            },
            {
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "fieldName": "button"
            },
            {
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "fieldName": "hover"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a styled anchor tag",
          "tagName": "pds-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLink",
          "declaration": {
            "name": "PdsLink",
            "module": "packages/web-components/src/lib/components/link/link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-link",
          "declaration": {
            "name": "PdsLink",
            "module": "packages/web-components/src/lib/components/link/link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list/list.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list/list.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient - this is a false positive.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default small',\n  args: {\n    size: 'sm',\n    child: html`<pds-list-item><span>List item label</span></pds-list-item>\n      <pds-list-item><span>List item label</span></pds-list-item>\n      <pds-list-item><span>List item label</span></pds-list-item>`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWithIcons",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with icons',\n  args: {\n    child: html`<pds-list-item>\n      <pds-icon-check slot=\"icon\"></pds-icon-check>\n      <span\n        >This is a really really long list item with a lot of text so it can\n        showcase how the text wraps with the icon on mobile. </span\n      ></pds-list-item>\n      <pds-list-item>\n        <pds-icon-check slot=\"icon\"></pds-icon-check>\n        <span>This is a list item.</span></pds-list-item\n      ><pds-list-item>\n          <pds-icon-check slot=\"icon\"></pds-icon-check>\n        <span>This is a list item.</span>\n      </pds-list-item></pds-list-item\n    >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSmallSpacing",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default small spacing',\n  args: {\n    spacing: 'sm',\n    child: html`<pds-list-item\n        ><placeholder-element\n          ><span>List item label</span></placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          ><span>List item label</span></placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          ><span>List item label</span></placeholder-element\n        ></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Horizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal',\n  args: {\n    orientation: 'horizontal',\n    child: html`<pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal small',\n  args: {\n    orientation: 'horizontal',\n    size: 'sm',\n    child: html`<pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>\n      <pds-list-item>List item label</pds-list-item>`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalSmallSpacing",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal small spacing',\n  args: {\n    orientation: 'horizontal',\n    spacing: 'sm',\n    child: html`<pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalLargeSpacing",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal large spacing',\n  args: {\n    orientation: 'horizontal',\n    spacing: 'lg',\n    child: html`<pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "AlignCenter",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Align center',\n  args: {\n    align: 'center',\n    child: html`<pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "AlignCenterHorizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Align center horizontal',\n  args: {\n    orientation: 'horizontal',\n    align: 'center',\n    child: html`<pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >\n      <pds-list-item\n        ><placeholder-element\n          >List item label</placeholder-element\n        ></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkList",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link list',\n  args: {\n    child: html`<pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >\n      <pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >\n      <pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >\n      <pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >\n      <pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >\n      <pds-list-item\n        ><pds-link href=\"#\">This is a link</pds-link></pds-list-item\n      >`,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DescriptionDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Description default',\n  args: { variant: 'description' },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Description list items are li elements, so this check is invalid.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/definition-list\n            id: 'definition-list',\n            enabled: false,\n          },\n          {\n            // The shadow dom makes this check difficult, but the dd and dt items are in a dl.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/dlitem\n            id: 'dlitem',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DescriptionReverse",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Description reverse',\n  args: {\n    variant: 'description-reverse',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Description list items are li elements, so this check is invalid.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/definition-list\n            id: 'definition-list',\n            enabled: false,\n          },\n          {\n            // The shadow dom makes this check difficult, but the dd and dt items are in a dl.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/dlitem\n            id: 'dlitem',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSmall",
          "declaration": {
            "name": "DefaultSmall",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithIcons",
          "declaration": {
            "name": "DefaultWithIcons",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSmallSpacing",
          "declaration": {
            "name": "DefaultSmallSpacing",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalSmall",
          "declaration": {
            "name": "HorizontalSmall",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalSmallSpacing",
          "declaration": {
            "name": "HorizontalSmallSpacing",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalLargeSpacing",
          "declaration": {
            "name": "HorizontalLargeSpacing",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AlignCenter",
          "declaration": {
            "name": "AlignCenter",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "AlignCenterHorizontal",
          "declaration": {
            "name": "AlignCenterHorizontal",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkList",
          "declaration": {
            "name": "LinkList",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DescriptionDefault",
          "declaration": {
            "name": "DescriptionDefault",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DescriptionReverse",
          "declaration": {
            "name": "DescriptionReverse",
            "module": "packages/web-components/src/lib/components/list/list.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list/list.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "size",
          "type": {
            "text": "['sm', 'md']"
          },
          "default": "['sm', 'md']"
        },
        {
          "kind": "class",
          "description": "",
          "name": "PdsList",
          "slots": [
            {
              "description": "Contains one or more list items within the pds-list, restricted to pds-list-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ListSize"
              },
              "default": "'md'",
              "description": "Size property\nsm - Renders the list and child list items with small typography\nalso adjusts the icon size if provided",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'description' | 'description-reverse'"
              },
              "default": "'default'",
              "description": "variant\n- **default** - renders the list with default typography styles\n- **description** - renders the list with description typography styles\n- **description-reverse** - renders the list with reverse typography styles",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "spacing",
              "type": {
                "text": "'sm' | 'md' | 'lg' | 'none'"
              },
              "default": "'md'",
              "attribute": "spacing"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'center' | 'default'"
              },
              "default": "'default'",
              "description": "Align variant\n- Default section is left aligned\n- **center** horizontally center aligns the list",
              "attribute": "align"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'default'"
              },
              "default": "'default'",
              "description": "Style variant\n- **primary** renders the list used for primary actions",
              "attribute": "orientation"
            },
            {
              "kind": "method",
              "name": "addSizeToListItems"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setChildVariant"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "ListSize"
              },
              "default": "'md'",
              "description": "Size property\nsm - Renders the list and child list items with small typography\nalso adjusts the icon size if provided",
              "fieldName": "size"
            },
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'description' | 'description-reverse'"
              },
              "default": "'default'",
              "description": "variant\n- **default** - renders the list with default typography styles\n- **description** - renders the list with description typography styles\n- **description-reverse** - renders the list with reverse typography styles",
              "fieldName": "variant"
            },
            {
              "name": "spacing",
              "type": {
                "text": "'sm' | 'md' | 'lg' | 'none'"
              },
              "default": "'md'",
              "fieldName": "spacing"
            },
            {
              "name": "align",
              "type": {
                "text": "'center' | 'default'"
              },
              "default": "'default'",
              "description": "Align variant\n- Default section is left aligned\n- **center** horizontally center aligns the list",
              "fieldName": "align"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'default'"
              },
              "default": "'default'",
              "description": "Style variant\n- **primary** renders the list used for primary actions",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "An unordered list element (ul)",
          "tagName": "pds-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "size",
          "declaration": {
            "name": "size",
            "module": "packages/web-components/src/lib/components/list/list.ts"
          }
        },
        {
          "kind": "js",
          "name": "PdsList",
          "declaration": {
            "name": "PdsList",
            "module": "packages/web-components/src/lib/components/list/list.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-list",
          "declaration": {
            "name": "PdsList",
            "module": "packages/web-components/src/lib/components/list/list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list-item/list-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list-item/list-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ListItem",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    text: 'List item',\n    args: { variant: 'default' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ListItemWithIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Icon',\n  args: {\n    text: 'List item with icon',\n  },\n  render: () =>\n    html`<pds-list-item>\n      <pds-icon-check slot=\"icon\"></pds-icon-check>\n      <slot>This is a list item.</slot>\n    </pds-list-item>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Description Default',\n  args: { variant: 'description' },\n}"
        },
        {
          "kind": "variable",
          "name": "Reverse",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Description Reverse',\n  args: {\n    variant: 'description-reverse',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/list-item/list-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ListItem",
          "declaration": {
            "name": "ListItem",
            "module": "packages/web-components/src/lib/components/list-item/list-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ListItemWithIcon",
          "declaration": {
            "name": "ListItemWithIcon",
            "module": "packages/web-components/src/lib/components/list-item/list-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/list-item/list-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Reverse",
          "declaration": {
            "name": "Reverse",
            "module": "packages/web-components/src/lib/components/list-item/list-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/list-item/list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsListItem",
          "slots": [
            {
              "description": "The content of the list item",
              "name": "default"
            },
            {
              "description": "This slot holds an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ListSize"
              },
              "default": "'md'",
              "description": "Size\nShould be inherited from pds-list\nIf provided directly, renders the list with small typography\nif icons are in the list item, they will inherit the size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'description' | 'description-reverse'"
              },
              "default": "'default'",
              "attribute": "variant"
            },
            {
              "kind": "method",
              "name": "addSizeTolistItemIcons"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "ListSize"
              },
              "default": "'md'",
              "description": "Size\nShould be inherited from pds-list\nIf provided directly, renders the list with small typography\nif icons are in the list item, they will inherit the size.",
              "fieldName": "size"
            },
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'description' | 'description-reverse'"
              },
              "default": "'default'",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A list item (li) element",
          "tagName": "pds-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsListItem",
          "declaration": {
            "name": "PdsListItem",
            "module": "packages/web-components/src/lib/components/list-item/list-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-list-item",
          "declaration": {
            "name": "PdsListItem",
            "module": "packages/web-components/src/lib/components/list-item/list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logo/logo.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logo/logo.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DefaultLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultLogoWhiteFont",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default white font',\n  args: { variant: 'default-p-white-font' },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "WhiteLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'White',\n  args: { variant: 'white' },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "PLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'P',\n  args: { variant: 'p' },\n}"
        },
        {
          "kind": "variable",
          "name": "PGradientLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'P gradient',\n  args: { variant: 'p-gradient' },\n}"
        },
        {
          "kind": "variable",
          "name": "PWhiteLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'P white',\n  args: { variant: 'p-white' },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultLogo",
          "declaration": {
            "name": "DefaultLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultLogoWhiteFont",
          "declaration": {
            "name": "DefaultLogoWhiteFont",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "WhiteLogo",
          "declaration": {
            "name": "WhiteLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PLogo",
          "declaration": {
            "name": "PLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PGradientLogo",
          "declaration": {
            "name": "PGradientLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PWhiteLogo",
          "declaration": {
            "name": "PWhiteLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logo/logo.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLogo",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'default'\n    | 'white'\n    | 'default-p-white-font'\n    | 'p-gradient'\n    | 'p'\n    | 'p-white'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** logo as it should display on light backgrounds\n- **white** default logo with white fill\n- **p** \"P\" logo as it should display on light backgrounds\n- **p-gradient** \"P\" gradient logo as it should display on light backgrounds\n- **p-white** \"P\" logo with a white fill, for darker backgrounds",
              "attribute": "variant"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "| 'default'\n    | 'white'\n    | 'default-p-white-font'\n    | 'p-gradient'\n    | 'p'\n    | 'p-white'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** logo as it should display on light backgrounds\n- **white** default logo with white fill\n- **p** \"P\" logo as it should display on light backgrounds\n- **p-gradient** \"P\" gradient logo as it should display on light backgrounds\n- **p-white** \"P\" logo with a white fill, for darker backgrounds",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component handles all variants of the Principal logo",
          "tagName": "pds-logo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLogo",
          "declaration": {
            "name": "PdsLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-logo",
          "declaration": {
            "name": "PdsLogo",
            "module": "packages/web-components/src/lib/components/logo/logo.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/modal/modal.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/modal/modal.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Large",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Large',\n  args: {\n    size: 'lg',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NoCloseButton",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No close button',\n  args: {\n    hideCloseButton: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LargeNoCloseButton",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Large w/ no close button',\n  args: {\n    hideCloseButton: true,\n    size: 'lg',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ModalClosedByDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Closed by default',\n  args: {},\n  parameters: {\n    happo: false,\n  },\n  render: () =>\n    html`<pds-button\n        @click=${() =>\n          document.querySelector<PdsModal>('pds-modal')?.openModal()}\n        >Open modal</pds-button\n      ><pds-modal size=\"default\" modalTitle=\"Modal heading\">\n        <pds-text-passage linelength=\"none\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat.\n        </pds-text-passage>\n        <pds-button\n          variant=\"primary\"\n          slot=\"footer\"\n          @click=${(e: MouseEvent) =>\n            document.querySelector<PdsModal>('pds-modal')?.closeModal(e)}\n          >Button</pds-button\n        >\n      </pds-modal>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Large",
          "declaration": {
            "name": "Large",
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoCloseButton",
          "declaration": {
            "name": "NoCloseButton",
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LargeNoCloseButton",
          "declaration": {
            "name": "LargeNoCloseButton",
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ModalClosedByDefault",
          "declaration": {
            "name": "ModalClosedByDefault",
            "module": "packages/web-components/src/lib/components/modal/modal.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/modal/modal.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsModal",
          "slots": [
            {
              "description": "This holds the main text contents within the modal",
              "name": "default"
            },
            {
              "description": "This holds the optional call to action element within the bottom of the modal",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "openOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, modal appears open on page load.\nOtherwise, modal should be triggered from another element.",
              "attribute": "openOnLoad"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default' | 'lg'"
              },
              "default": "'default'",
              "description": "**default** renders a default size modal\n- **lg** renders a wider modal\nIf no size is passed in, it will be set as `default`",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "hideCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the close button so a user has to agree to something in the modal\nThis should only be used on rare occasions\nSetting this to true will also restrict the modal from closing with the keyboard",
              "attribute": "hideCloseButton"
            },
            {
              "kind": "field",
              "name": "modalTitle",
              "type": {
                "text": "string"
              },
              "description": "Title of the modal to be displayed",
              "attribute": "modalTitle"
            },
            {
              "kind": "field",
              "name": "ariaLabelledBy",
              "type": {
                "text": "string"
              },
              "default": "'modal'",
              "description": "Label for modal accesibility",
              "attribute": "ariaLabelledBy"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "method",
              "name": "openModal"
            },
            {
              "kind": "method",
              "name": "closeModal",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent | MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "openOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, modal appears open on page load.\nOtherwise, modal should be triggered from another element.",
              "fieldName": "openOnLoad"
            },
            {
              "name": "size",
              "type": {
                "text": "'default' | 'lg'"
              },
              "default": "'default'",
              "description": "**default** renders a default size modal\n- **lg** renders a wider modal\nIf no size is passed in, it will be set as `default`",
              "fieldName": "size"
            },
            {
              "name": "hideCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the close button so a user has to agree to something in the modal\nThis should only be used on rare occasions\nSetting this to true will also restrict the modal from closing with the keyboard",
              "fieldName": "hideCloseButton"
            },
            {
              "name": "modalTitle",
              "type": {
                "text": "string"
              },
              "description": "Title of the modal to be displayed",
              "fieldName": "modalTitle"
            },
            {
              "name": "ariaLabelledBy",
              "type": {
                "text": "string"
              },
              "default": "'modal'",
              "description": "Label for modal accesibility",
              "fieldName": "ariaLabelledBy"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "The modal component provides the user with a focused way of acknowledging, confirming, or viewing information without leaving a screen or page.",
          "tagName": "pds-modal",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsModal",
          "declaration": {
            "name": "PdsModal",
            "module": "packages/web-components/src/lib/components/modal/modal.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-modal",
          "declaration": {
            "name": "PdsModal",
            "module": "packages/web-components/src/lib/components/modal/modal.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/loading-page/loading-page.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/loading-page/loading-page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Loading page',\n  component: 'pds-loading-page',\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'fullscreen',\n  },\n  render: () => html`<pds-loading-page></pds-loading-page>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/loading-page/loading-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/loading-page/loading-page.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/loading-page/loading-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLoadingPage",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a loading page",
          "tagName": "pds-loading-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLoadingPage",
          "declaration": {
            "name": "PdsLoadingPage",
            "module": "packages/web-components/src/lib/components/loading-page/loading-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-loading-page",
          "declaration": {
            "name": "PdsLoadingPage",
            "module": "packages/web-components/src/lib/components/loading-page/loading-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination-item/pagination-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: { pageNumber: '1', variant: 'no-arrows-first' },\n}"
        },
        {
          "kind": "variable",
          "name": "Active",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Active',\n  args: { pageNumber: '1', active: true, variant: 'no-arrows-first' },\n}"
        },
        {
          "kind": "variable",
          "name": "WithHref",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'With href',\n  args: { pageNumber: '1', href: 'https://www.principal.com' },\n}"
        },
        {
          "kind": "variable",
          "name": "NoArrowsLast",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No arrows last',\n  args: { pageNumber: '1', variant: 'no-arrows-last' },\n}"
        },
        {
          "kind": "variable",
          "name": "NoArrowsOneItem",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No arrows one item',\n  args: { pageNumber: '1', variant: 'no-arrows-one-item' },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenFlyers",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide flyers',\n  args: { pageNumber: '1', variant: 'no-arrows-first', hideFlyers: true },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Active",
          "declaration": {
            "name": "Active",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithHref",
          "declaration": {
            "name": "WithHref",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoArrowsLast",
          "declaration": {
            "name": "NoArrowsLast",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoArrowsOneItem",
          "declaration": {
            "name": "NoArrowsOneItem",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenFlyers",
          "declaration": {
            "name": "HiddenFlyers",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination-item/pagination-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPaginationItem",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Active page indicator",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "pageNumber",
              "type": {
                "text": "Number"
              },
              "description": "Page number to display in pagination item",
              "attribute": "pageNumber"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "{ target: { textContent: string } }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getButtonMarkup"
            },
            {
              "kind": "method",
              "name": "getAnchorMarkup"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click with an event detail summary indicating the clicked pagination page",
              "name": "pds-pagination-item-click"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Active page indicator",
              "fieldName": "active"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href",
              "fieldName": "href"
            },
            {
              "name": "pageNumber",
              "type": {
                "text": "Number"
              },
              "description": "Page number to display in pagination item",
              "fieldName": "pageNumber"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A pagination item",
          "tagName": "pds-pagination-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPaginationItem",
          "declaration": {
            "name": "PdsPaginationItem",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-pagination-item",
          "declaration": {
            "name": "PdsPaginationItem",
            "module": "packages/web-components/src/lib/components/pagination-item/pagination-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination/pagination.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination/pagination.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Arrows",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Arrows only',\n  args: {\n    variant: 'arrows',\n  },\n  render: (args) => {\n    return html`<pds-pagination variant=${args.variant}></pds-pagination>`;\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NoArrows",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No arrows',\n  args: {\n    variant: 'no-arrows',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NoArrowsOneItem",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No arrows one item',\n  args: {\n    variant: 'no-arrows',\n  },\n  render: (args) => {\n    return html`<pds-pagination variant=${args.variant}>\n      <pds-pagination-item pageNumber=\"1\" active></pds-pagination-item>\n    </pds-pagination>`;\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Anchors",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Anchors',\n  args: {\n    ariaLabel: 'Pagination built with anchors',\n    backwardDisabled: 'true',\n    stepForwardHref: 'http://www.principal.com/forward',\n    flyLastHref: 'http://www.principal.com/last',\n  },\n  render: (args) => {\n    return html`<pds-pagination\n      ariaLabel=${args.ariaLabel}\n      stepForwardHref=${args.stepForwardHref}\n      backwardDisabled=${args.backwardDisabled}\n      flyLastHref=${args.flyLastHref}\n    >\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"1\"\n        active\n      ></pds-pagination-item>\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"2\"\n      ></pds-pagination-item>\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"3\"\n      ></pds-pagination-item>\n    </pds-pagination>`;\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HideFlyers",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hide flyers',\n  args: {\n    backwardDisabled: true,\n    hideFlyers: true,\n    stepBackwardHref: 'http://www.principal.com/backward',\n    stepForwardHref: 'http://www.principal.com/forward',\n  },\n  render: (args) => {\n    return html`<pds-pagination\n      stepForwardHref=${args.stepForwardHref}\n      backwardDisabled=${args.backwardDisabled}\n      hideFlyers=${args.hideFlyers}\n    >\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"1\"\n        active\n      ></pds-pagination-item>\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"2\"\n      ></pds-pagination-item>\n      <pds-pagination-item\n        href=\"http://www.principal.com\"\n        pageNumber=\"3\"\n      ></pds-pagination-item>\n    </pds-pagination>`;\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Arrows",
          "declaration": {
            "name": "Arrows",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoArrows",
          "declaration": {
            "name": "NoArrows",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoArrowsOneItem",
          "declaration": {
            "name": "NoArrowsOneItem",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Anchors",
          "declaration": {
            "name": "Anchors",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HideFlyers",
          "declaration": {
            "name": "HideFlyers",
            "module": "packages/web-components/src/lib/components/pagination/pagination.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pagination/pagination.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPagination",
          "slots": [
            {
              "description": "This slot holds pds-pagination-item components",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'arrows' | 'no-arrows'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default pagination\n- **arrows** renders only arrows for pagination navigation, should only be used when horizontal space is extremely limited\n- **no-arrows** renders pagination navigation without arrows, should only be used when there are only two or three pages of data",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "backwardDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Backward controls disabled",
              "attribute": "backwardDisabled"
            },
            {
              "kind": "field",
              "name": "forwardDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Forward controls disabled",
              "attribute": "forwardDisabled"
            },
            {
              "kind": "field",
              "name": "hideFlyers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the fly to first and fly to last buttons, should only be true if a technical limitation prevents their use",
              "attribute": "hideFlyers"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ARIA label string that describes pagination control for screen reader users",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "flyFirstHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the first item",
              "attribute": "flyFirstHref"
            },
            {
              "kind": "field",
              "name": "stepForwardHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the next item",
              "attribute": "stepForwardHref"
            },
            {
              "kind": "field",
              "name": "flyLastHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the last item",
              "attribute": "flyLastHref"
            },
            {
              "kind": "field",
              "name": "stepBackwardHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the previous item",
              "attribute": "stepBackwardHref"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click with the following event detail summary messages: **fly-first** - a click registered on the 'fly to first page' control; **step-backward** - a click registered on the 'step backward' control; **step-forward** - a click registered on the 'step forward' control; **fly-last** - a click registered on the 'fly to last page' control",
              "name": "pds-pagination-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'arrows' | 'no-arrows'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default pagination\n- **arrows** renders only arrows for pagination navigation, should only be used when horizontal space is extremely limited\n- **no-arrows** renders pagination navigation without arrows, should only be used when there are only two or three pages of data",
              "fieldName": "variant"
            },
            {
              "name": "backwardDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Backward controls disabled",
              "fieldName": "backwardDisabled"
            },
            {
              "name": "forwardDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Forward controls disabled",
              "fieldName": "forwardDisabled"
            },
            {
              "name": "hideFlyers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the fly to first and fly to last buttons, should only be true if a technical limitation prevents their use",
              "fieldName": "hideFlyers"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "ARIA label string that describes pagination control for screen reader users",
              "fieldName": "ariaLabel"
            },
            {
              "name": "flyFirstHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the first item",
              "fieldName": "flyFirstHref"
            },
            {
              "name": "stepForwardHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the next item",
              "fieldName": "stepForwardHref"
            },
            {
              "name": "flyLastHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the last item",
              "fieldName": "flyLastHref"
            },
            {
              "name": "stepBackwardHref",
              "type": {
                "text": "string"
              },
              "description": "If page navigation should be the result of the interaction, supply a url for the href for going to the previous item",
              "fieldName": "stepBackwardHref"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a pagination control",
          "tagName": "pds-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPagination",
          "declaration": {
            "name": "PdsPagination",
            "module": "packages/web-components/src/lib/components/pagination/pagination.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-pagination",
          "declaration": {
            "name": "PdsPagination",
            "module": "packages/web-components/src/lib/components/pagination/pagination.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logout-page/logout-page.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Logout page',\n  component: 'pds-logout-page',\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'fullscreen',\n  },\n  render: (args) =>\n    html`<pds-logout-page\n      variant=${args.variant || nothing}\n    ></pds-logout-page>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSpanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default Spanish',\n  parameters: { lang: 'es' },\n}"
        },
        {
          "kind": "variable",
          "name": "ExpiredSpanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Expired Spanish',\n  args: { variant: 'expired' },\n  parameters: { lang: 'es' },\n}"
        },
        {
          "kind": "variable",
          "name": "Expired",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Expired',\n  args: { variant: 'expired' },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSpanish",
          "declaration": {
            "name": "DefaultSpanish",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpiredSpanish",
          "declaration": {
            "name": "ExpiredSpanish",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Expired",
          "declaration": {
            "name": "Expired",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/logout-page/logout-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsLogoutPage",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'expired'"
              },
              "default": "'default'",
              "description": "Style variant\n- **primary** renders the logout-page used for default logout\n- **expired** renders the logout-page used for session expired logout",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "loginLink",
              "type": {
                "text": "string"
              },
              "default": "'https://login.principal.com/login'",
              "description": "Login link\n- Login link for login button",
              "attribute": "loginLink"
            },
            {
              "kind": "field",
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "attribute": "layoutContainerVariant"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'expired'"
              },
              "default": "'default'",
              "description": "Style variant\n- **primary** renders the logout-page used for default logout\n- **expired** renders the logout-page used for session expired logout",
              "fieldName": "variant"
            },
            {
              "name": "loginLink",
              "type": {
                "text": "string"
              },
              "default": "'https://login.principal.com/login'",
              "description": "Login link\n- Login link for login button",
              "fieldName": "loginLink"
            },
            {
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "default": "'default'",
              "description": "variant for layout container\n- **narrow** renders the layout-container narrower than the default",
              "fieldName": "layoutContainerVariant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a logout page",
          "tagName": "pds-logout-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsLogoutPage",
          "declaration": {
            "name": "PdsLogoutPage",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-logout-page",
          "declaration": {
            "name": "PdsLogoutPage",
            "module": "packages/web-components/src/lib/components/logout-page/logout-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The base class for form elements.\nAll field properties are reflected due to this bug: https://github.com/lit/lit/issues/3912",
          "name": "PdsFormElement",
          "members": [
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText"
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button)."
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not."
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value"
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`"
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not."
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label"
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name"
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText"
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsFormElement",
          "declaration": {
            "name": "PdsFormElement",
            "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Primary navigation',\n  component: 'pds-primary-navigation',\n  tags: ['autodocs'],\n  parameters: {\n    happo: {\n      delay: 500,\n    },\n    layout: 'fullscreen',\n    actions: {\n      handles: [\n        'pds-primary-navigation-item-click',\n        'pds-primary-navigation-notification-link-click',\n        'pds-primary-navigation-panel-open',\n        'pds-primary-navigation-panel-close',\n        'pds-primary-navigation-menu-button-open',\n        'pds-primary-navigation-menu-button-close',\n        'pds-primary-navigation-main-menu-dropdown-open',\n        'pds-primary-navigation-main-menu-dropdown-close',\n        'pds-primary-navigation-main-menu-link-click',\n        'pds-primary-navigation-utility-menu-item-click',\n      ],\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // None of the nested elements are interactive - this is a false positive.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/nested-interactive\n            id: 'nested-interactive',\n            enabled: false,\n          },\n          {\n            // The skip link target will exist on real apps, but we don't have it in Storybook.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/skip-link\n            id: 'skip-link',\n            enabled: false,\n          },\n          {\n            // Color contrast is sufficient - axe was having trouble grabbing the colors for this element.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'inverted'],\n    },\n    layoutContainerVariant: {\n      control: 'select',\n      options: ['default', 'narrow', ''],\n    },\n    layoutContainerRemovePadding: {\n      control: 'text',\n    },\n    loginLink: {\n      control: 'select',\n      options: ['none', 'login', 'logout', 'customLogout'],\n    },\n    loginLinkVariant: {\n      control: 'select',\n      options: ['default', 'default-inverted', 'primary', 'primary-inverted'],\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant || nothing}\"\n      includeAction=\"${args.includeAction || nothing}\"\n      messagesCount=\"${args.messagesCount || 0}\"\n      otherAlertsCount=\"${args.otherAlertsCount || nothing}\"\n      loginLink=\"${args.loginLink || nothing}\"\n      loginLinkVariant=\"${args.loginLinkVariant || nothing}\"\n      layoutContainerVariant=\"${args.layoutContainerVariant || nothing}\"\n      layoutContainerRemovePadding=\"${args.layoutContainerRemovePadding ||\n      nothing}\"\n    >\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"Main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n          <pds-grid variant=\"1-3up\" break=\"slower\">\n            <pds-grid-item>\n              <placeholder-element>Item 1</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 2</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 3</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 4</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 5</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 6</placeholder-element>\n            </pds-grid-item>\n          </pds-grid>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n        ><pds-primary-navigation-utility-menu-item href=\"#\"\n          >Link</pds-primary-navigation-utility-menu-item\n        ></pds-primary-navigation-utility-menu\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.shadowRoot?.querySelector('.pds-c-primary-navigation__inner')\n          ?.querySelector('.pds-c-primary-navigation__buttons-nav')\n          ?.querySelector('pds-button')\n          ?.dispatchEvent(clickEvent);\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.querySelectorAll('pds-primary-navigation-main-menu-item')[0]\n          ?.shadowRoot?.querySelector('button')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 500,\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      messagesCount=\"${0}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"Main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n          <pds-grid variant=\"1-3up\" break=\"slower\">\n            <pds-grid-item>\n              <placeholder-element>Item 1</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 2</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 3</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 4</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 5</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 6</placeholder-element>\n            </pds-grid-item>\n          </pds-grid>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n        ><pds-primary-navigation-utility-menu-item href=\"#\"\n          >Link</pds-primary-navigation-utility-menu-item\n        ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWithNotifications",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with notifications',\n  args: {\n    variant: 'default',\n    includeAction: 'notification',\n    messagesCount: 5,\n    otherAlertsCount: 33,\n    loginLink: 'login',\n    loginLinkVariant: 'primary',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.shadowRoot?.querySelector('.pds-c-primary-navigation__inner')\n          ?.querySelector('.pds-c-primary-navigation__buttons-nav')\n          ?.querySelector('pds-button')\n          ?.dispatchEvent(clickEvent);\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.querySelectorAll('pds-primary-navigation-main-menu-item')[1]\n          ?.shadowRoot?.querySelector('button')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 500,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWith99PlusNotifications",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with 99+ notifications',\n  args: {\n    variant: 'default',\n    includeAction: 'notification',\n    messagesCount: 105,\n    otherAlertsCount: 123,\n    loginLink: 'login',\n    loginLinkVariant: 'primary',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.shadowRoot?.querySelector('.pds-c-primary-navigation__inner')\n          ?.querySelector('.pds-c-primary-navigation__icons-nav')\n          ?.querySelector('pds-button')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 500,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  args: {\n    variant: 'default',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n    lang: 'es',\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        document\n          ?.querySelector('pds-primary-navigation')\n          ?.shadowRoot?.querySelector('.pds-c-primary-navigation__inner')\n          ?.querySelector('.pds-c-primary-navigation__icons-nav')\n          ?.querySelector('pds-button')\n          ?.dispatchEvent(clickEvent);\n      },\n      delay: 500,\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      messagesCount=\"${0}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"Main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n          <pds-grid variant=\"1-3up\" break=\"slower\">\n            <pds-grid-item>\n              <placeholder-element>Item 1</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 2</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 3</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 4</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 5</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 6</placeholder-element>\n            </pds-grid-item>\n          </pds-grid>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n        ><pds-primary-navigation-utility-menu-item href=\"#\"\n          >Link</pds-primary-navigation-utility-menu-item\n        ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: {\n    variant: 'inverted',\n    includeAction: 'notification',\n    messagesCount: 5,\n    otherAlertsCount: 33,\n    loginLink: 'logout',\n    loginLinkVariant: 'primary-inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "InvertedWithLayoutContainer",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted within layout container',\n  args: {\n    variant: 'inverted',\n    includeAction: 'notification',\n    messagesCount: 5,\n    otherAlertsCount: 33,\n    loginLink: 'logout',\n    loginLinkVariant: 'primary-inverted',\n    layoutContainerVariant: 'default',\n    layoutContainerRemovePadding: 'md',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "CustomLogo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Custom logo',\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n  render: () =>\n    html`<pds-primary-navigation variant=\"default\">\n      <img\n        slot=\"logo\"\n        width=\"158\"\n        height=\"80\"\n        src='data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"312.52\" height=\"41.425\" viewBox=\"0 0 312.52 41.425\"&gt;%0A  &lt;g id=\"Group_6145\" data-name=\"Group 6145\" transform=\"translate(-9 -22.999)\"&gt;%0A    &lt;g id=\"src_img_logo-company-name-white-padded-standard\" transform=\"translate(-5.12 10.279)\"&gt;%0A      &lt;path id=\"Path_5705\" data-name=\"Path 5705\" d=\"M136.029,32.95a3.136,3.136,0,0,1-3.381,3.441c-1.547,0-2.494-.827-2.494-2.158,0-1.5,1.223-2.386,3.273-2.386a12.372,12.372,0,0,1,2.6.276v.827Zm0-2.722a11.906,11.906,0,0,0-2.938-.336c-3.549,0-5.659,1.715-5.659,4.544,0,2.494,1.99,4.16,4.88,4.16a4.97,4.97,0,0,0,4.041-1.834,2.672,2.672,0,0,0,2.722,1.834,4.245,4.245,0,0,0,1.547-.276l-.276-2.11a2.986,2.986,0,0,1-.719.108c-.671,0-.947-.336-.947-1V29.509c0-3.105-2.05-4.988-5.431-4.988a12.3,12.3,0,0,0-5.156,1.223l.827,2.158a8.066,8.066,0,0,1,3.885-1.055c2.1,0,3.213.947,3.213,2.77v.611Zm-26.27,8.093V24.857h-2.71V38.322Zm-1.331-15.407a1.715,1.715,0,0,0,0-3.429,1.716,1.716,0,1,0,0,3.429ZM146.22,36.271c-.947,0-1.271-.384-1.271-1.439V19.15h-2.722V35.228c0,2.158,1.223,3.381,3.489,3.381a4.244,4.244,0,0,0,1.547-.276l-.276-2.158a5.16,5.16,0,0,1-.767.1ZM100,26.955a6.114,6.114,0,0,1,3.441,1.283l1.211-1.99a7.55,7.55,0,0,0-4.76-1.715,6.7,6.7,0,0,0-6.822,7.038c0,4.268,2.662,7.038,6.654,7.038a7.458,7.458,0,0,0,4.928-1.715l-1.211-1.942a5.073,5.073,0,0,1-3.333,1.223c-2.6,0-4.268-1.774-4.268-4.6.012-2.782,1.679-4.616,4.16-4.616ZM85.876,24.521a5.41,5.41,0,0,0-4.316,2.05l-.228-1.715H79.053V38.322h2.722V30.78a3.5,3.5,0,0,1,3.489-3.825,2.8,2.8,0,0,1,3,3v8.369h2.71v-8.7a4.827,4.827,0,0,0-5.1-5.1ZM75.5,38.322V24.857h-2.71V38.322ZM74.185,22.915a1.715,1.715,0,0,0,0-3.429,1.716,1.716,0,1,0,0,3.429Zm-5.323,1.715A4.411,4.411,0,0,0,65.1,26.572l-.228-1.715H62.591V38.322h2.722V31.068c0-2.6,1.223-3.993,3.549-3.993a8.987,8.987,0,0,1,1.5.216l.324-2.326a4.742,4.742,0,0,0-1.822-.336Zm-18.4-2.266h3.381c2.554,0,4.041,1.271,4.041,3.549s-1.5,3.549-4.041,3.549H50.458v-7.1ZM47.64,19.977V38.322h2.83V31.835h3.765c3.873,0,6.486-2.386,6.486-5.923s-2.6-5.923-6.486-5.923l-6.594-.012Zm71.543,16.186a4.373,4.373,0,0,1-3.213-1.439V30.672a3.382,3.382,0,0,1,3.489-3.717c2.218,0,3.609,1.667,3.609,4.328-.012,3.105-1.451,4.88-3.885,4.88Zm.827-11.642a5.36,5.36,0,0,0-4.328,2.05l-.216-1.715h-2.278v18.9h2.722V37.267a5.9,5.9,0,0,0,3.7,1.331c3.717,0,6.211-3,6.211-7.314.012-4.041-2.326-6.762-5.815-6.762Z\" transform=\"translate(6.67 1.279)\" fill=\"%23002855\"/&gt;%0A      &lt;path id=\"Path_5706\" data-name=\"Path 5706\" d=\"M133.544,21.726h.588a.469.469,0,1,0,0-.935h-.588v.935Zm-.671-1.487h1.355a1,1,0,0,1,1.091,1,.892.892,0,0,1-.671.911l.779,1.211h-.767l-.671-1.1h-.456v1.1h-.671l.012-3.117Zm1.175,3.813a2.254,2.254,0,1,0-2.254-2.254,2.159,2.159,0,0,0,2.254,2.254Zm0-5.012a2.644,2.644,0,0,1,2.758,2.758,2.758,2.758,0,1,1-5.515,0,2.644,2.644,0,0,1,2.758-2.758Z\" transform=\"translate(23.315 1.258)\" fill=\"%23002855\"/&gt;%0A      &lt;path id=\"Path_5707\" data-name=\"Path 5707\" d=\"M47.919,26.808c0-8.129-6.343-14.088-15.035-14.088-10.695,0-18.764,8.357-18.764,19.316A22.263,22.263,0,0,0,34.335,54.145V39.565a9.514,9.514,0,0,1-9.016-9.688c0-5.072,3.393-8.741,8.069-8.741,4.28,0,7.182,2.674,7.182,6.63,0,3.513-2.23,5.791-6.235,6.4v5.4c8.237-.228,13.584-5.24,13.584-12.757Z\" transform=\"translate(0)\" fill=\"%23002855\"/&gt;%0A    &lt;/g&gt;%0A    &lt;path id=\"Path_5790\" data-name=\"Path 5790\" d=\"M2.4,0H7.848c4.9,0,8.208-3.312,8.208-8.064,0-4.8-3.312-8.064-8.208-8.064H2.4ZM14.04-8.064a6.168,6.168,0,0,1-6.384,6.5H4.368V-14.568H7.656A6.168,6.168,0,0,1,14.04-8.064Zm4.272,2.232A5.847,5.847,0,0,0,24.384.288,9.816,9.816,0,0,0,28.7-.84l-.6-1.32a7.577,7.577,0,0,1-3.528.984,4.23,4.23,0,0,1-4.344-4.176h9.024a6.744,6.744,0,0,0,.024-.7c0-3.48-2.16-5.9-5.28-5.9C20.664-11.952,18.312-9.432,18.312-5.832ZM24-10.488c1.968,0,3.36,1.608,3.432,3.912h-7.2C20.424-8.928,21.912-10.488,24-10.488Zm7.3,1.8c0,4.368,6.7,2.664,6.7,5.616,0,1.128-1.032,1.9-2.592,1.9a10.04,10.04,0,0,1-3.744-.84L31.2-.6a12,12,0,0,0,4.344.888c2.568,0,4.32-1.392,4.32-3.36,0-4.464-6.672-2.736-6.672-5.616,0-1.08.984-1.8,2.5-1.8a8.875,8.875,0,0,1,3.36.768l.432-1.416a10.607,10.607,0,0,0-3.936-.816C33.048-11.952,31.3-10.584,31.3-8.688ZM42.816,0h1.9V-11.664h-1.9ZM42.48-15.216a1.229,1.229,0,0,0,1.3,1.272,1.222,1.222,0,0,0,1.272-1.272,1.222,1.222,0,0,0-1.272-1.272A1.229,1.229,0,0,0,42.48-15.216Zm16.248,3.552H57.192l-.24,1.944a4.467,4.467,0,0,0-4.008-2.232c-3.072,0-5.28,2.544-5.28,6.12s2.208,6.12,5.28,6.12a4.381,4.381,0,0,0,3.864-2.112V.288c0,2.04-1.656,3.456-3.984,3.456a10.216,10.216,0,0,1-3.888-.936l-.576,1.44A12.121,12.121,0,0,0,52.968,5.28c3.336,0,5.76-2.112,5.76-5.064Zm-9.1,5.832c0-2.664,1.56-4.56,3.768-4.56a3.394,3.394,0,0,1,3.432,3.624V-4.9A3.38,3.38,0,0,1,53.4-1.272C51.192-1.272,49.632-3.144,49.632-5.832ZM62.5,0h1.9V-6.576a3.523,3.523,0,0,1,3.528-3.768A2.924,2.924,0,0,1,70.992-7.32V0h1.92V-7.608a4.209,4.209,0,0,0-4.44-4.344,4.565,4.565,0,0,0-4.2,2.424l-.24-2.136H62.5ZM81.672-12.1c0,5.952,9.408,3.552,9.408,7.968,0,1.68-1.536,2.808-3.912,2.808a14.893,14.893,0,0,1-5.112-1.2l-.48,1.536A15.573,15.573,0,0,0,87.312.288c3.408,0,5.736-1.8,5.736-4.416,0-6.1-9.432-3.648-9.432-7.968,0-1.632,1.536-2.712,3.84-2.712A12.083,12.083,0,0,1,91.992-13.8l.48-1.536a14.114,14.114,0,0,0-5.16-1.08C83.976-16.416,81.672-14.64,81.672-12.1Zm24.144.432H103.8l-3.624,9.456-3.744-9.456H94.44L99.264-.1l-.6,1.512c-.624,1.632-1.32,2.3-2.5,2.3a4.759,4.759,0,0,1-1.176-.192l-.264,1.536a7.109,7.109,0,0,0,1.632.216c1.872,0,3.072-1.1,4.032-3.528Zm1.392,2.976c0,4.368,6.7,2.664,6.7,5.616,0,1.128-1.032,1.9-2.592,1.9a10.04,10.04,0,0,1-3.744-.84L107.112-.6a12,12,0,0,0,4.344.888c2.568,0,4.32-1.392,4.32-3.36,0-4.464-6.672-2.736-6.672-5.616,0-1.08.984-1.8,2.5-1.8a8.875,8.875,0,0,1,3.36.768l.432-1.416a10.607,10.607,0,0,0-3.936-.816C108.96-11.952,107.208-10.584,107.208-8.688Zm14.28-6.432h-1.9v3.456h-2.424v1.512h2.424V-3.12A3.289,3.289,0,0,0,123.1.288a9.021,9.021,0,0,0,2.328-.312l-.264-1.488a7.254,7.254,0,0,1-1.656.24,1.915,1.915,0,0,1-2.016-2.016v-6.864h3.672v-1.512h-3.672Zm5.16,9.288A5.847,5.847,0,0,0,132.72.288,9.816,9.816,0,0,0,137.04-.84l-.6-1.32a7.577,7.577,0,0,1-3.528.984,4.23,4.23,0,0,1-4.344-4.176h9.024a6.748,6.748,0,0,0,.024-.7c0-3.48-2.16-5.9-5.28-5.9C129-11.952,126.648-9.432,126.648-5.832Zm5.688-4.656c1.968,0,3.36,1.608,3.432,3.912h-7.2C128.76-8.928,130.248-10.488,132.336-10.488ZM140.376,0h1.9V-6.768a3.333,3.333,0,0,1,3.336-3.576,2.735,2.735,0,0,1,2.88,2.832V0h1.92V-6.768a3.333,3.333,0,0,1,3.336-3.576A2.728,2.728,0,0,1,156.6-7.512V0h1.92V-7.8a4.033,4.033,0,0,0-4.248-4.152A4.824,4.824,0,0,0,150-9.408a3.9,3.9,0,0,0-3.84-2.544,4.405,4.405,0,0,0-4.008,2.328l-.24-2.04h-1.536Z\" transform=\"translate(163 50)\" fill=\"%23002855\"/&gt;%0A  &lt;/g&gt;%0A&lt;/svg&gt;%0A'\n        alt=\"Principal Design System\" />\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item text=\"Megamenu\" megamenu>\n          <placeholder-element>Megamenu content</placeholder-element>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n    ></pds-primary-navigation>`,\n}"
        },
        {
          "kind": "variable",
          "name": "InvertedWithoutDropdowns",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted without dropdowns',\n  args: {\n    variant: 'inverted',\n    loginLinkVariant: 'primary-inverted',\n    loginLink: 'logout',\n    layoutContainerVariant: 'default',\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      loginLinkVariant=\"${args.loginLinkVariant}\"\n      loginLink=\"${args.loginLink}\"\n      layoutContainerVariant=\"${args.layoutContainerVariant}\"\n    >\n      <pds-primary-navigation-main-menu\n        ariaLabel=\"Main nav area\"\n        slot=\"primary-navigation-main-menu\"\n      >\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"This is a link\"\n        ></pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"This is a link\"\n        ></pds-primary-navigation-main-menu-item>\n      </pds-primary-navigation-main-menu>\n      <pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n      >\n        <pds-primary-navigation-utility-menu-item href=\"#\"\n          >This is a link</pds-primary-navigation-utility-menu-item\n        >\n        <pds-primary-navigation-utility-menu-item href=\"#\"\n          >This is a link</pds-primary-navigation-utility-menu-item\n        >\n      </pds-primary-navigation-utility-menu>\n    </pds-primary-navigation>`,\n}"
        },
        {
          "kind": "variable",
          "name": "InvertedWithSearch",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted with search',\n  args: {\n    variant: 'inverted',\n    loginLinkVariant: 'primary-inverted',\n    loginLink: 'logout',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      messagesCount=\"${0}\"\n      loginLinkVariant=\"${args.loginLinkVariant}\"\n      loginLink=\"${args.loginLink}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"Main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n          <pds-grid variant=\"1-3up\" break=\"slower\">\n            <pds-grid-item>\n              <placeholder-element>Item 1</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 2</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 3</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 4</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 5</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 6</placeholder-element>\n            </pds-grid-item>\n          </pds-grid>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n        ><pds-primary-navigation-utility-menu-item href=\"#\"\n          >Link</pds-primary-navigation-utility-menu-item\n        ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWithoutLinks",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'No navigation links',\n  args: {\n    variant: 'default',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      messagesCount=\"${0}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu slot=\"primary-navigation-main-menu\">\n      </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n      ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "LinkWithIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link with icon',\n  args: {\n    variant: 'default',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      variant=\"${args.variant}\"\n      messagesCount=\"${0}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu\n        slot=\"primary-navigation-main-menu\"\n        ariaLabel=\"Main navigation area\"\n      >\n        <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n          <pds-list size=\"sm\" spacing=\"sm\">\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-primary-navigation-dropdown-link href=\"#\"\n                >This is a link</pds-primary-navigation-dropdown-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n          <pds-grid variant=\"1-3up\" break=\"slower\">\n            <pds-grid-item>\n              <placeholder-element>Item 1</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 2</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 3</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 4</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 5</placeholder-element>\n            </pds-grid-item>\n            <pds-grid-item>\n              <placeholder-element>Item 6</placeholder-element>\n            </pds-grid-item>\n          </pds-grid>\n        </pds-primary-navigation-main-menu-item>\n        <pds-primary-navigation-main-menu-item\n          arrow\n          href=\"#\"\n          text=\"Link\"\n        ></pds-primary-navigation-main-menu-item> </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n        ><pds-primary-navigation-utility-menu-item href=\"#\"\n          >Link</pds-primary-navigation-utility-menu-item\n        ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "CustomLogout",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Logout static',\n  args: {\n    loginLink: 'customLogout',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'Default',\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation\n      loginLink=\"${args.loginLink}\"\n      messagesCount=\"${0}\"\n      includeAction=\"search\"\n    >\n      <pds-primary-navigation-main-menu slot=\"primary-navigation-main-menu\">\n      </pds-primary-navigation-main-menu\n      ><pds-primary-navigation-utility-menu\n        slot=\"primary-navigation-utility-menu\"\n      ></pds-primary-navigation-utility-menu\n      ><span slot=\"search\"\n        ><placeholder-element>Search slot</placeholder-element></span\n      ></pds-primary-navigation\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithNotifications",
          "declaration": {
            "name": "DefaultWithNotifications",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWith99PlusNotifications",
          "declaration": {
            "name": "DefaultWith99PlusNotifications",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InvertedWithLayoutContainer",
          "declaration": {
            "name": "InvertedWithLayoutContainer",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomLogo",
          "declaration": {
            "name": "CustomLogo",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InvertedWithoutDropdowns",
          "declaration": {
            "name": "InvertedWithoutDropdowns",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InvertedWithSearch",
          "declaration": {
            "name": "InvertedWithSearch",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithoutLinks",
          "declaration": {
            "name": "DefaultWithoutLinks",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkWithIcon",
          "declaration": {
            "name": "LinkWithIcon",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomLogout",
          "declaration": {
            "name": "CustomLogout",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigation",
          "slots": [
            {
              "description": "A slot for an optional custom logo. The slot is restricted to pds-logo, img, and svg elements",
              "name": "logo"
            },
            {
              "description": "A main menu component containing one or more main menu items. Slot restricted to only PDS primary-navigation-main-menu components",
              "name": "primary-navigation-main-menu"
            },
            {
              "description": "A utility menu component containing one or more utility menu items. Slot restricted to only PDS primary-navigation-utility-menu components",
              "name": "primary-navigation-utility-menu"
            },
            {
              "description": "If passed in, will populate the search icon.",
              "name": "search"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the primary-navigation used for primary actions\n- **inverted** renders the primary-navigation used for primary actions",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "includeAction",
              "type": {
                "text": "'search' | 'notification' | undefined"
              },
              "description": "Determines if search | notifications should be rendered\n- **search** renders the search icon & panel in the navigation\n- **notification** renders the notification bell & panel in the navigation",
              "attribute": "includeAction"
            },
            {
              "kind": "field",
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "description": "Determines if we should place the header in a layout container\nIf this property isn't passed, no layout container is used.",
              "attribute": "layoutContainerVariant"
            },
            {
              "kind": "field",
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding (only to be used if layoutContainerVariant has a value)\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "attribute": "layoutContainerRemovePadding"
            },
            {
              "kind": "field",
              "name": "hideOtherAlerts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gives users some flexibility if they don't want other notifications to show in the notifications panel",
              "attribute": "hideOtherAlerts"
            },
            {
              "kind": "field",
              "name": "messagesCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of unread messages",
              "attribute": "messagesCount"
            },
            {
              "kind": "field",
              "name": "otherAlertsCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of other unread notifications",
              "attribute": "otherAlertsCount"
            },
            {
              "kind": "field",
              "name": "messagesHref",
              "type": {
                "text": "string"
              },
              "default": "'https://secure05.principal.com/servlet/common/member/messagecenter'",
              "description": "Link to the message center",
              "attribute": "messagesHref"
            },
            {
              "kind": "field",
              "name": "otherAlertsHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link to the notifications center",
              "attribute": "otherAlertsHref"
            },
            {
              "kind": "field",
              "name": "skipToContentHref",
              "type": {
                "text": "string"
              },
              "default": "'#main'",
              "description": "Link to the main content or 'none' to disable the skip content link",
              "attribute": "skipToContentHref"
            },
            {
              "kind": "method",
              "name": "clickNotificationLink",
              "parameters": [
                {
                  "name": "linkId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "{ target: { textContent: string } }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChangeMainMenu",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChangeUtilityMenu",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "initializeMainMenuTrap",
              "description": "Initialize the focus trap for main menu"
            },
            {
              "kind": "method",
              "name": "initializeNotificationPanelTrap",
              "description": "Initialize the focus trap for notifications panel"
            },
            {
              "kind": "method",
              "name": "initializeSearchPanelTrap",
              "description": "Initialize the focus trap for search panel"
            },
            {
              "kind": "field",
              "name": "logoHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link for the logo",
              "attribute": "logoHref"
            },
            {
              "kind": "field",
              "name": "logoAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "String for a custom aria label describing the logo element\n- By default, aria label for the logo will read \"Link to Principal homepage\"\n- Pass a string of \"false\" in order to suppress the aria label attribute",
              "attribute": "logoAriaLabel"
            },
            {
              "kind": "field",
              "name": "loginLink",
              "type": {
                "text": "'none' | 'login' | 'logout' | 'customLogout'"
              },
              "default": "'login'",
              "description": "Link for the log in link button\n\n- if **customLogout** is designated, a semantic button element will be rendered instead of a link and the application will be responsible for providing logout behavior when the pds-primary-navigation-item-click event is caught",
              "attribute": "loginLink"
            },
            {
              "kind": "field",
              "name": "loginLinkVariant",
              "type": {
                "text": "string"
              },
              "default": "'primary'",
              "description": "Variant for the log in link; valid values should match the link component's button attribute allowed values",
              "attribute": "loginLinkVariant"
            },
            {
              "kind": "field",
              "name": "loginLinkHref",
              "type": {
                "text": "string"
              },
              "default": "'https://login.principal.com/login'",
              "description": "Href for the log in link button",
              "attribute": "loginLinkHref"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click of the login/logout button",
              "name": "pds-primary-navigation-item-click"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the primary-navigation used for primary actions\n- **inverted** renders the primary-navigation used for primary actions",
              "fieldName": "variant"
            },
            {
              "name": "includeAction",
              "type": {
                "text": "'search' | 'notification' | undefined"
              },
              "description": "Determines if search | notifications should be rendered\n- **search** renders the search icon & panel in the navigation\n- **notification** renders the notification bell & panel in the navigation",
              "fieldName": "includeAction"
            },
            {
              "name": "layoutContainerVariant",
              "type": {
                "text": "'default' | 'narrow' | undefined"
              },
              "description": "Determines if we should place the header in a layout container\nIf this property isn't passed, no layout container is used.",
              "fieldName": "layoutContainerVariant"
            },
            {
              "name": "layoutContainerRemovePadding",
              "type": {
                "text": "'md' | 'all' | undefined"
              },
              "description": "Remove layout container padding (only to be used if layoutContainerVariant has a value)\n- **md** removes padding from the layout container below md breakpoint\n- **all** removes padding from the layout container at all screens (used for nested layout containers)",
              "fieldName": "layoutContainerRemovePadding"
            },
            {
              "name": "hideOtherAlerts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gives users some flexibility if they don't want other notifications to show in the notifications panel",
              "fieldName": "hideOtherAlerts"
            },
            {
              "name": "messagesCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of unread messages",
              "fieldName": "messagesCount"
            },
            {
              "name": "otherAlertsCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of other unread notifications",
              "fieldName": "otherAlertsCount"
            },
            {
              "name": "messagesHref",
              "type": {
                "text": "string"
              },
              "default": "'https://secure05.principal.com/servlet/common/member/messagecenter'",
              "description": "Link to the message center",
              "fieldName": "messagesHref"
            },
            {
              "name": "otherAlertsHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link to the notifications center",
              "fieldName": "otherAlertsHref"
            },
            {
              "name": "skipToContentHref",
              "type": {
                "text": "string"
              },
              "default": "'#main'",
              "description": "Link to the main content or 'none' to disable the skip content link",
              "fieldName": "skipToContentHref"
            },
            {
              "name": "logoHref",
              "type": {
                "text": "string"
              },
              "default": "'https://www.principal.com'",
              "description": "Link for the logo",
              "fieldName": "logoHref"
            },
            {
              "name": "logoAriaLabel",
              "type": {
                "text": "String"
              },
              "description": "String for a custom aria label describing the logo element\n- By default, aria label for the logo will read \"Link to Principal homepage\"\n- Pass a string of \"false\" in order to suppress the aria label attribute",
              "fieldName": "logoAriaLabel"
            },
            {
              "name": "loginLink",
              "type": {
                "text": "'none' | 'login' | 'logout' | 'customLogout'"
              },
              "default": "'login'",
              "description": "Link for the log in link button\n\n- if **customLogout** is designated, a semantic button element will be rendered instead of a link and the application will be responsible for providing logout behavior when the pds-primary-navigation-item-click event is caught",
              "fieldName": "loginLink"
            },
            {
              "name": "loginLinkVariant",
              "type": {
                "text": "string"
              },
              "default": "'primary'",
              "description": "Variant for the log in link; valid values should match the link component's button attribute allowed values",
              "fieldName": "loginLinkVariant"
            },
            {
              "name": "loginLinkHref",
              "type": {
                "text": "string"
              },
              "default": "'https://login.principal.com/login'",
              "description": "Href for the log in link button",
              "fieldName": "loginLinkHref"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A component that renders a primary navigation",
          "tagName": "pds-primary-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigation",
          "declaration": {
            "name": "PdsPrimaryNavigation",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation",
          "declaration": {
            "name": "PdsPrimaryNavigation",
            "module": "packages/web-components/src/lib/components/primary-navigation/primary-navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Phone number input',\n  component: 'pds-phone-number-input',\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'radio',\n      options: ['default', 'sm'],\n      pattern: {\n        control: 'text',\n      },\n    },\n    value: {\n      control: 'text',\n    },\n    autocomplete: {\n      control: 'radio',\n      options: ['off', 'tel'],\n    },\n    label: {\n      table: {\n        category: 'attributes',\n      },\n      description:\n        ' The label of the form field. Must be plain text. If label requires additional markup (e.g., superscript), then use the label slot instead.',\n      control: 'text',\n    },\n    'slot:label': {\n      name: 'label',\n      control: 'text',\n      table: {\n        category: 'slots',\n      },\n      description:\n        'Use this slot instead of the label property, if the label requires additional markup.',\n    },\n    fieldId: {\n      control: 'text',\n    },\n    pattern: {\n      control: 'text',\n    },\n    errorMessage: {\n      control: 'text',\n    },\n    helpText: {\n      control: 'text',\n    },\n  },\n  render: (args) =>\n    html`<pds-phone-number-input\n      name=\"${args.name || nothing}\"\n      size=\"${args.size || nothing}\"\n      value=\"${args.value || nothing}\"\n      ?disabled=\"${args.disabled}\"\n      ?readonly=\"${args.readonly}\"\n      ?required=\"${args.required}\"\n      helpText=\"${args.helpText || nothing}\"\n      label=\"${args.label || nothing}\"\n      errorMessage=\"${args.errorMessage || nothing}\"\n      ?hideLabel=\"${args.hideLabel}\"\n      type=\"${args.type || nothing}\"\n    ></pds-phone-number-input>`,\n  parameters: {\n    actions: {\n      handles: [\n        'pds-phone-number-input-change',\n        'pds-phone-number-input-input',\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Basic",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Basic',\n  args: { name: 'basicPhoneNumberInput', label: 'Mobile phone number' },\n}"
        },
        {
          "kind": "variable",
          "name": "Required",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'requiredPhoneNumberInput',\n    label: 'Mobile phone number',\n    required: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultValue",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default value',\n  args: {\n    name: 'defaultValuePhoneNumberInput',\n    label: 'Mobile phone number',\n    value: '800-986-3343',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'errorPhoneNumberInput',\n    label: 'Mobile phone number',\n    errorMessage: 'Error message goes here.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Help text',\n  args: {\n    name: 'phoneNumberHelpTextInput',\n    label: 'Mobile phone number',\n    helpText: 'Please enter a valid mobile phone number',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'disabledPhoneNumberInput',\n    label: 'Mobile phone number',\n    helpText: 'Please enter a valid mobile phone number',\n    disabled: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Disabled inputs should have less color contrast, but axe doesn't like it.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Readonly",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'readonlyPhoneNumberInput',\n    label: 'Mobile phone number',\n    value: '800-986-3343',\n    readonly: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'smallPhoneNumberInput',\n    label: 'Mobile phone number',\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    name: 'hiddenLabelPhoneNumberInput',\n    label: 'Mobile phone number',\n    hideLabel: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultValue",
          "declaration": {
            "name": "DefaultValue",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HelpText",
          "declaration": {
            "name": "HelpText",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Readonly",
          "declaration": {
            "name": "Readonly",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPhoneNumberInput",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additonal markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additonal markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the input\n\nNOTE: This is NOT the HTML size attribute that controls the width of the input.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input minlength attribute.\nSee [HTML attribute: minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)",
              "attribute": "minLength"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "attribute": "maxLength"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Standard input pattern attribute.\nSee [HTML attribute: pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "'off' | 'tel'"
              },
              "description": "Standard input autocomplete attribute.\nSee [HTML attribute: autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)",
              "attribute": "autocomplete"
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-phone-number-input-change",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on change"
            },
            {
              "name": "pds-phone-number-input-input",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on input"
            },
            {
              "name": "pds-phone-number-input-blur",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on blur"
            },
            {
              "name": "pds-phone-number-input-focus",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on focus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the input\n\nNOTE: This is NOT the HTML size attribute that controls the width of the input.",
              "fieldName": "size"
            },
            {
              "name": "minLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input minlength attribute.\nSee [HTML attribute: minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)",
              "fieldName": "minLength"
            },
            {
              "name": "maxLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "fieldName": "maxLength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Standard input pattern attribute.\nSee [HTML attribute: pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)",
              "fieldName": "pattern"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "'off' | 'tel'"
              },
              "description": "Standard input autocomplete attribute.\nSee [HTML attribute: autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)",
              "fieldName": "autocomplete"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The Principal phone number input component",
          "tagName": "pds-phone-number-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPhoneNumberInput",
          "declaration": {
            "name": "PdsPhoneNumberInput",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-phone-number-input",
          "declaration": {
            "name": "PdsPhoneNumberInput",
            "module": "packages/web-components/src/lib/components/phone-number-input/phone-number-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-container/primary-navigation-container.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-container/primary-navigation-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationContainer",
          "slots": [
            {
              "description": "One or more pds-primary-navigation-main-menu &/or primary-navigation-utility-menu elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "description": "Style variant\n- **default** renders the default primary-navigation\n- **inverted** renders the inverted primary-navigation",
              "attribute": "variant"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "description": "Style variant\n- **default** renders the default primary-navigation\n- **inverted** renders the inverted primary-navigation",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is a container (nav) that holds the primary-navigation-main-menu and primary-navigation-utility-menu elements",
          "tagName": "pds-primary-navigation-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationContainer",
          "declaration": {
            "name": "PdsPrimaryNavigationContainer",
            "module": "packages/web-components/src/lib/components/primary-navigation-container/primary-navigation-container.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-container",
          "declaration": {
            "name": "PdsPrimaryNavigationContainer",
            "module": "packages/web-components/src/lib/components/primary-navigation-container/primary-navigation-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title:\n    'Components/Primary navigation/Primary navigation main menu/Primary navigation main menu item/Primary navigation dropdown link',\n  component: 'pds-primary-navigation-dropdown-link',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    actions: {\n      handles: ['pds-primary-navigation-dropdown-link-click'],\n    },\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the primary navigation component. It should always be used within a primary-navigation-main-menu-item element.',\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  render: () =>\n    html`<pds-primary-navigation-dropdown-link href=\"#\"\n      >This is a link</pds-primary-navigation-dropdown-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n    viewport: {\n      defaultViewport: 'iphonex',\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient for the inverted links.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n  render: () =>\n    html`<pds-primary-navigation-dropdown-link href=\"#\" variant=\"inverted\"\n      >This is a link</pds-primary-navigation-dropdown-link\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationDropdownLink",
          "slots": [
            {
              "description": "This slot holds the link contents",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The link for the item",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the item should have an arrow icon",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default primary-navigation\n- **inverted** renders the inverted primary-navigation",
              "attribute": "variant"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-primary-navigation-dropdown-link-click"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The link for the item",
              "fieldName": "href"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the item should have an arrow icon",
              "fieldName": "arrow"
            },
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default primary-navigation\n- **inverted** renders the inverted primary-navigation",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a styled anchor tag for the primary-nav",
          "tagName": "pds-primary-navigation-dropdown-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationDropdownLink",
          "declaration": {
            "name": "PdsPrimaryNavigationDropdownLink",
            "module": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-dropdown-link",
          "declaration": {
            "name": "PdsPrimaryNavigationDropdownLink",
            "module": "packages/web-components/src/lib/components/primary-navigation-dropdown-link/primary-navigation-dropdown-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Primary navigation/Primary navigation main menu',\n  component: 'pds-primary-navigation-main-menu',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    actions: {\n      handles: [\n        'pds-primary-navigation-item-click',\n        'pds-primary-navigation-main-menu-dropdown-close',\n        'pds-primary-navigation-main-menu-dropdown-open',\n        'pds-primary-navigation-main-menu-link-click',\n      ],\n    },\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent slotted within the primary navigation component.',\n      },\n    },\n  },\n  render: (args) =>\n    html` <pds-primary-navigation-main-menu\n      variant=\"${args.variant}\"\n      ariaLabel=${args.ariaLabel}\n    >\n      <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n        <pds-list size=\"sm\" spacing=\"sm\">\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n        </pds-list>\n      </pds-primary-navigation-main-menu-item>\n      <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n        <pds-grid variant=\"1-3up\" break=\"slower\">\n          <pds-grid-item>\n            <placeholder-element>Item 1</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 2</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 3</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 4</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 5</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 6</placeholder-element>\n          </pds-grid-item>\n        </pds-grid>\n      </pds-primary-navigation-main-menu-item>\n      <pds-primary-navigation-main-menu-item\n        href=\"#\"\n        text=\"Link\"\n      ></pds-primary-navigation-main-menu-item>\n    </pds-primary-navigation-main-menu>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n    ariaLabel: 'main menu',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient - this is a false positive.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LinkWithIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link with icon',\n  args: {\n    variant: 'default',\n    ariaLabel: 'main menu',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Color contrast is sufficient - this is a false positive.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-primary-navigation-main-menu\n      variant=\"${args.variant}\"\n      ariaLabel=${args.ariaLabel}\n    >\n      <pds-primary-navigation-main-menu-item dropdown text=\"Dropdown\">\n        <pds-list size=\"sm\" spacing=\"sm\">\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n          <pds-list-item\n            ><pds-primary-navigation-dropdown-link href=\"#\"\n              >This is a link</pds-primary-navigation-dropdown-link\n            ></pds-list-item\n          >\n        </pds-list>\n      </pds-primary-navigation-main-menu-item>\n      <pds-primary-navigation-main-menu-item megamenu text=\"Megamenu\">\n        <pds-grid variant=\"1-3up\" break=\"slower\">\n          <pds-grid-item>\n            <placeholder-element>Item 1</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 2</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 3</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 4</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 5</placeholder-element>\n          </pds-grid-item>\n          <pds-grid-item>\n            <placeholder-element>Item 6</placeholder-element>\n          </pds-grid-item>\n        </pds-grid>\n      </pds-primary-navigation-main-menu-item>\n      <pds-primary-navigation-main-menu-item\n        arrow\n        href=\"#\"\n        text=\"Link\"\n      ></pds-primary-navigation-main-menu-item>\n    </pds-primary-navigation-main-menu>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkWithIcon",
          "declaration": {
            "name": "LinkWithIcon",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationMainMenu",
          "slots": [
            {
              "description": "Contains one or more primary nav menu items within the pds-primary-navigation-main-menu, restricted to pds-primary-navigation-main-menu-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- default treatment uses a default background\n- **inverted** variant changes to the inverted background",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Screen reader label for button",
              "attribute": "ariaLabel"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- default treatment uses a default background\n- **inverted** variant changes to the inverted background",
              "fieldName": "variant"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Screen reader label for button",
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is a navigational element (nav) that holds an Un unordered list element (ul)",
          "tagName": "pds-primary-navigation-main-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationMainMenu",
          "declaration": {
            "name": "PdsPrimaryNavigationMainMenu",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-main-menu",
          "declaration": {
            "name": "PdsPrimaryNavigationMainMenu",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu/primary-navigation-main-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title:\n    'Components/Primary navigation/Primary navigation main menu/Primary navigation main menu item',\n  component: 'pds-primary-navigation-main-menu-item',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    actions: {\n      handles: [\n        'pds-primary-navigation-main-menu-dropdown-close',\n        'pds-primary-navigation-main-menu-dropdown-open',\n        'pds-primary-navigation-main-menu-link-click',\n      ],\n    },\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the primary navigation component. It should always be used within a primary-navigation-main-menu element.',\n      },\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // This is not an issue when it's contained properly within primary-navigation-main-menu\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/aria-required-parent\n            id: 'aria-required-parent',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Dropdown",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Dropdown',\n  args: {\n    text: 'Dropdown',\n  },\n  render: (args) =>\n    html`<pds-primary-navigation-main-menu-item dropdown text=\"${args.text}\">\n      <pds-list size=\"sm\" spacing=\"sm\">\n        <pds-list-item\n          ><pds-primary-navigation-dropdown-link href=\"#\"\n            >This is a link</pds-primary-navigation-dropdown-link\n          ></pds-list-item\n        >\n        <pds-list-item\n          ><pds-primary-navigation-dropdown-link href=\"#\"\n            >This is a link</pds-primary-navigation-dropdown-link\n          ></pds-list-item\n        >\n        <pds-list-item\n          ><pds-primary-navigation-dropdown-link href=\"#\"\n            >This is a link</pds-primary-navigation-dropdown-link\n          ></pds-list-item\n        >\n        <pds-list-item\n          ><pds-primary-navigation-dropdown-link href=\"#\"\n            >This is a link</pds-primary-navigation-dropdown-link\n          ></pds-list-item\n        >\n      </pds-list>\n    </pds-primary-navigation-main-menu-item> `,\n}"
        },
        {
          "kind": "variable",
          "name": "Megamenu",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Mega menu',\n  args: {\n    text: 'Mega menu',\n  },\n  render: (args) =>\n    html`<pds-primary-navigation-main-menu-item megamenu text=\"${args.text}\">\n      <pds-grid variant=\"1-3up\" break=\"slower\">\n        <pds-grid-item>\n          <placeholder-element>Item 1</placeholder-element>\n        </pds-grid-item>\n        <pds-grid-item>\n          <placeholder-element>Item 2</placeholder-element>\n        </pds-grid-item>\n        <pds-grid-item>\n          <placeholder-element>Item 3</placeholder-element>\n        </pds-grid-item>\n        <pds-grid-item>\n          <placeholder-element>Item 4</placeholder-element>\n        </pds-grid-item>\n        <pds-grid-item>\n          <placeholder-element>Item 5</placeholder-element>\n        </pds-grid-item>\n        <pds-grid-item>\n          <placeholder-element>Item 6</placeholder-element>\n        </pds-grid-item>\n      </pds-grid>\n    </pds-primary-navigation-main-menu-item>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Link",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  args: {\n    text: 'Link',\n  },\n  render: (args) =>\n    html`<pds-primary-navigation-main-menu-item\n      href=\"#\"\n      text=\"${args.text}\"\n    ></pds-primary-navigation-main-menu-item>`,\n}"
        },
        {
          "kind": "variable",
          "name": "LinkWithIcon",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link with icon',\n  args: {\n    text: 'Link',\n  },\n  render: (args) =>\n    html`<pds-primary-navigation-main-menu-item\n      arrow\n      href=\"#\"\n      text=\"${args.text}\"\n    ></pds-primary-navigation-main-menu-item>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dropdown",
          "declaration": {
            "name": "Dropdown",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Megamenu",
          "declaration": {
            "name": "Megamenu",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LinkWithIcon",
          "declaration": {
            "name": "LinkWithIcon",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationMainMenuItem",
          "slots": [
            {
              "description": "One or more pds-primary-navigation-dropdown-link elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should be a dropdown",
              "attribute": "dropdown"
            },
            {
              "kind": "field",
              "name": "megamenu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should be a megamenu",
              "attribute": "megamenu"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "If the item is not a dropdown or megamenu, the link for the item",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "The item's text",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should have an arrow icon",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "divider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should have a divider line",
              "attribute": "divider"
            },
            {
              "kind": "method",
              "name": "handleOnClickOutside",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handle click outside the component"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleIsActive"
            },
            {
              "kind": "method",
              "name": "handleClickButton"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "field",
              "name": "classNames",
              "description": "internal",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on closing a dropdown",
              "name": "pds-primary-navigation-main-menu-dropdown-close"
            },
            {
              "description": "A custom event dispatched on opening a dropdown",
              "name": "pds-primary-navigation-main-menu-dropdown-open"
            },
            {
              "description": "A custom event dispatched when a link inside the main-menu-item gets clicked",
              "name": "pds-primary-navigation-main-menu-link-click"
            }
          ],
          "attributes": [
            {
              "name": "dropdown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should be a dropdown",
              "fieldName": "dropdown"
            },
            {
              "name": "megamenu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should be a megamenu",
              "fieldName": "megamenu"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "If the item is not a dropdown or megamenu, the link for the item",
              "resolveInitializer": {
                "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.ts"
              },
              "fieldName": "href"
            },
            {
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "The item's text",
              "fieldName": "text"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should have an arrow icon",
              "fieldName": "arrow"
            },
            {
              "name": "divider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the item should have a divider line",
              "fieldName": "divider"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A list item (li) element that contains a link (a), or a button",
          "tagName": "pds-primary-navigation-main-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationMainMenuItem",
          "declaration": {
            "name": "PdsPrimaryNavigationMainMenuItem",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-main-menu-item",
          "declaration": {
            "name": "PdsPrimaryNavigationMainMenuItem",
            "module": "packages/web-components/src/lib/components/primary-navigation-main-menu-item/primary-navigation-main-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Primary navigation/Primary navigation utility menu',\n  component: 'pds-primary-navigation-utility-menu',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the primary navigation component.',\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    text: 'Default',\n  },\n  render: () =>\n    html`<pds-primary-navigation-utility-menu\n      ><pds-primary-navigation-utility-menu-item href=\"#\"\n        >Link</pds-primary-navigation-utility-menu-item\n      ></pds-primary-navigation-utility-menu\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationUtilityMenu",
          "slots": [
            {
              "description": "Contains one or more menu items within the pds-primary-navigation-utility-menu, restricted to pds-primary-navigation-utility-menu-item elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default primary-navigation-utility-menu\n- **inverted** renders the inverted primary-navigation-utility-menu",
              "attribute": "variant"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the default primary-navigation-utility-menu\n- **inverted** renders the inverted primary-navigation-utility-menu",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is a navigational element (nav) that holds an Un unordered list element (ul)",
          "tagName": "pds-primary-navigation-utility-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationUtilityMenu",
          "declaration": {
            "name": "PdsPrimaryNavigationUtilityMenu",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-utility-menu",
          "declaration": {
            "name": "PdsPrimaryNavigationUtilityMenu",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu/primary-navigation-utility-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio/radio.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio/radio.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        },
        {
          "kind": "variable",
          "name": "Named",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Named',\n  render: () =>\n    html`<pds-radio\n      label=\"Option 1\"\n      value=\"option-1\"\n      name=\"group-name\"\n    ></pds-radio>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  render: () =>\n    html`<pds-radio label=\"Option 1\" value=\"option-1\" disabled></pds-radio>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/radio/radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/radio/radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Named",
          "declaration": {
            "name": "Named",
            "module": "packages/web-components/src/lib/components/radio/radio.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/radio/radio.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsRadio",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additonal markup",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "**DEPRECATED** Use this slot if markup should be inserted after the label.",
              "name": "labelAfter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The `name` property can be set or left blank to be inherited from\nthe `<pds-radio-group>`.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The `id` of the actual `<input>` in the shadow root.",
              "attribute": "fieldId"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When this radio is checked, the value of the\nradio group will equal this value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "checked\n- Renders the radio with checked initially",
              "attribute": "checked"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "disabled\n- Renders the radio as disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label for the radio. (Can also be set by the label slot.)",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the label visually hidden, but still available to a screen reader.",
              "attribute": "hideLabel"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-radio-change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-radio-blur",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-radio-focus",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The `name` property can be set or left blank to be inherited from\nthe `<pds-radio-group>`.",
              "fieldName": "name"
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The `id` of the actual `<input>` in the shadow root.",
              "fieldName": "fieldId"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value. When this radio is checked, the value of the\nradio group will equal this value.",
              "fieldName": "value"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "checked\n- Renders the radio with checked initially",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "disabled\n- Renders the radio as disabled",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label for the radio. (Can also be set by the label slot.)",
              "fieldName": "label"
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the label visually hidden, but still available to a screen reader.",
              "fieldName": "hideLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A radio button",
          "tagName": "pds-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsRadio",
          "declaration": {
            "name": "PdsRadio",
            "module": "packages/web-components/src/lib/components/radio/radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-radio",
          "declaration": {
            "name": "PdsRadio",
            "module": "packages/web-components/src/lib/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio-group/radio-group.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    label: 'A group of radios',\n    name: 'default',\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SpacingSm",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spacing small',\n  args: {\n    label: 'A group of radios',\n    name: 'sm',\n    spacing: 'sm',\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    label: 'A group of radios',\n    name: 'disabled',\n    disabled: true,\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Required",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Required',\n  args: {\n    label: 'A group of radios',\n    name: 'required',\n    required: true,\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    label: 'A group of radios',\n    hideLabel: true,\n    name: 'helpText',\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Help text',\n  args: {\n    label: 'A group of radios',\n    helpText: 'This is some help text.',\n    name: 'helpText',\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Error',\n  args: {\n    label: 'A group of radios',\n    errorMessage: 'Oh no, an error.',\n    name: 'errorMessage',\n    slot,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DisabledOne",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'One option disabled',\n  args: {\n    label: 'A group of radios',\n    name: 'disabledOne',\n    slot: html`\n      <pds-radio label=\"Option 1\" value=\"option-1\"></pds-radio>\n      <pds-radio label=\"Option 2\" value=\"option-2\" disabled></pds-radio>\n      <pds-radio label=\"Option 3\" value=\"option-3\"></pds-radio>\n    `,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NamedRadios",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Radios already named',\n  args: {\n    label: 'A group of radios already named',\n    slot: html`\n      <pds-radio\n        label=\"Option 1\"\n        value=\"option-1\"\n        name=\"group-name\"\n      ></pds-radio>\n      <pds-radio\n        label=\"Option 2\"\n        value=\"option-2\"\n        name=\"group-name\"\n      ></pds-radio>\n      <pds-radio\n        label=\"Option 3\"\n        value=\"option-3\"\n        name=\"group-name\"\n      ></pds-radio>\n    `,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SpacingSm",
          "declaration": {
            "name": "SpacingSm",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HelpText",
          "declaration": {
            "name": "HelpText",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledOne",
          "declaration": {
            "name": "DisabledOne",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NamedRadios",
          "declaration": {
            "name": "NamedRadios",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsRadioGroup",
          "slots": [
            {
              "description": "Use this slot to pass the actual radio. They should be <pds-radio> elements.",
              "name": "default"
            },
            {
              "description": "Use this slot instead of the label property, if the label requires additonal markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "**DEPRECATED** Use this slot if markup should be inserted after the label.",
              "name": "labelAfter"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additonal markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "spacing",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The amount of space between the radio buttons.\n\n- **default**\n- **sm** condense the spacing between radios",
              "attribute": "spacing"
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRadios",
              "privacy": "protected",
              "description": "set the name and disabled property of the children radios"
            },
            {
              "kind": "method",
              "name": "updateRadios",
              "privacy": "protected",
              "description": "update the name and disabled property of the children radios"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "description": "Listening to focus on the group of radios. Once it gets focus,\npass the focus down to the appropriate radio."
            },
            {
              "kind": "method",
              "name": "triggerBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "private",
              "description": "Listening to focusout since that event bubbles. We do end up\ngetting all of the focusout events from the children, so in\norder to tell that this is a \"blur\" from the component, this\nis looking at the inner radios to check if any other them still\nhave focus."
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "This function renders the radio groups \"label\"\nwhich in this case is actually a <legend>.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "radioTemplate",
              "privacy": "protected",
              "description": "This function renders a div, that is a parent to the actual radios,\nthat helps manage the focus/tab behavior for the radios."
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-radio-group-change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-radio-group-focus",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "pds-radio-group-blur",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "spacing",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The amount of space between the radio buttons.\n\n- **default**\n- **sm** condense the spacing between radios",
              "fieldName": "spacing"
            },
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "This component, used with <pds-radio>, allow users\nto select a single option from a list of mutually exclusive options.",
          "tagName": "pds-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsRadioGroup",
          "declaration": {
            "name": "PdsRadioGroup",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-radio-group",
          "declaration": {
            "name": "PdsRadioGroup",
            "module": "packages/web-components/src/lib/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title:\n    'Components/Primary navigation/Primary navigation utility menu/Primary navigation utility menu item',\n  component: 'pds-primary-navigation-utility-menu-item',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    actions: {\n      handles: ['pds-primary-navigation-utility-menu-item-click'],\n    },\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the primary navigation component.  It should only be used within a pds-primary-navigation-utility-menu element.',\n      },\n    },\n    a11y: {\n      config: {\n        rules: [\n          {\n            // This is not an issue when it's contained properly within primary-navigation-utility-menu\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.4/aria-required-parent\n            id: 'aria-required-parent',\n            enabled: false,\n          },\n          {\n            // The styles from this element are pretty awful when not in a primary-navigation-utility-menu\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    text: 'Default',\n  },\n  render: () =>\n    html`<pds-primary-navigation-utility-menu-item href=\"#\"\n      >Link</pds-primary-navigation-utility-menu-item\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsPrimaryNavigationUtilityMenuItem",
          "slots": [
            {
              "description": "The link text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The link for the item",
              "attribute": "href"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "primary-navigation-utility-menu-item-click"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The link for the item",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A list item (li) element that contains a link (a)",
          "tagName": "pds-primary-navigation-utility-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsPrimaryNavigationUtilityMenuItem",
          "declaration": {
            "name": "PdsPrimaryNavigationUtilityMenuItem",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-primary-navigation-utility-menu-item",
          "declaration": {
            "name": "PdsPrimaryNavigationUtilityMenuItem",
            "module": "packages/web-components/src/lib/components/primary-navigation-utility-menu-item/primary-navigation-utility-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Secondary navigation',\n  component: 'pds-secondary-navigation',\n  tags: ['autodocs'],\n  parameters: {\n    actions: {\n      handles: [\n        'pds-secondary-navigation-dropdown-close',\n        'pds-secondary-navigation-dropdown-open',\n        'pds-secondary-navigation-dropdown-link-click',\n        'pds-secondary-navigation-link-click',\n      ],\n    },\n  },\n  decorators: [(story) => html`<div style=\"height: 450px\">${story()}</div>`],\n  render: (args) =>\n    html`<pds-secondary-navigation\n      title=\"${args.title || nothing}\"\n      description=\"${args.description || nothing}\"\n    >\n      <pds-secondary-navigation-level-one title=\"Menu item one\" columns=\"2col\">\n        <pds-secondary-navigation-level-two title=\"Category one\">\n          <pds-list spacing=\"sm\">\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link one</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link two</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\" variant=\"emphasis\"\n                >Link three</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two title=\"Category two\">\n          <pds-list spacing=\"sm\">\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link one</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link two</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link three</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link four</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-secondary-navigation-level-two></pds-secondary-navigation-level-one\n      >\n      <pds-secondary-navigation-level-one title=\"Menu item two\">\n        <pds-secondary-navigation-level-two\n          title=\"Link one\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          title=\"Link two\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          title=\"Link three\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          title=\"Link four\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n      </pds-secondary-navigation-level-one>\n      <pds-secondary-navigation-level-one\n        title=\"Menu item three\"\n        href=\"${window.location.href}\"\n      ></pds-secondary-navigation-level-one>\n      ${args.logo || nothing}\n    </pds-secondary-navigation>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    title: 'Account/Product Name',\n    description: 'Optional description placeholder',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Logo",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Logo',\n  args: {\n    title: 'Account/Product Name',\n    description: 'Optional description placeholder',\n    logo: html`<span slot=\"logo\">\n      <svg width=\"160\" height=\"104\">\n        <rect\n          width=\"160\"\n          height=\"104\"\n          style=\"fill:#000000;stroke-width:3;stroke:rgb(0,0,0)\"\n        />\n      </svg>\n    </span>`,\n  },\n  parameters: {\n    happo: {\n      waitFor: () => {\n        // @ts-expect-error\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        document.querySelector('pds-secondary-navigation')?.updateComplete;\n      },\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n        const component = document?.querySelector('pds-secondary-navigation');\n\n        const collapsibleEl = component?.shadowRoot\n          ?.querySelector('pds-collapsible')\n          ?.shadowRoot?.querySelector('.pds-c-collapsible__summary');\n\n        collapsibleEl?.dispatchEvent(clickEvent);\n\n        component\n          ?.querySelectorAll('pds-secondary-navigation-level-one')\n          .forEach(\n            (el) =>\n              el?.shadowRoot\n                ?.querySelector('pds-collapsible')\n                ?.shadowRoot?.querySelector('.pds-c-collapsible__summary')\n                ?.dispatchEvent(clickEvent),\n          );\n\n        component\n          ?.querySelectorAll('pds-secondary-navigation-level-two')[0]\n          ?.shadowRoot?.querySelector('pds-collapsible')\n          ?.shadowRoot?.querySelector('.pds-c-collapsible__summary')\n          ?.dispatchEvent(clickEvent);\n\n        const buttonEl = document\n          ?.querySelector('pds-secondary-navigation')\n          ?.querySelectorAll('pds-secondary-navigation-level-one')[0]\n          ?.shadowRoot?.querySelector('button');\n\n        buttonEl?.dispatchEvent(clickEvent);\n      },\n      delay: 1000,\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SecondaryLinkActivePage",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'With active secondary nav item link',\n  args: {\n    title: 'Account/Product Name',\n    description: 'Optional description placeholder',\n  },\n  render: (args) =>\n    html`<pds-secondary-navigation\n      title=\"${args.title || nothing}\"\n      description=\"${args.description || nothing}\"\n    >\n      <pds-secondary-navigation-level-one\n        title=\"Menu item one\"\n        columns=\"2col\"\n        .activeSectionCallback=\"${() => {}}\"\n      >\n        <pds-secondary-navigation-level-two\n          title=\"Category one\"\n          .activePageCallback=\"${customActivePageFunction}\"\n        >\n          <pds-list spacing=\"sm\">\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"/relative-path\"\n                >Link one</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link two</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\" variant=\"emphasis\"\n                >Link three</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          title=\"Category two\"\n          .activePageCallback=\"${customActivePageFunction}\"\n        >\n          <pds-list spacing=\"sm\">\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link one</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link two</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link three</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n            <pds-list-item\n              ><pds-secondary-navigation-link href=\"#\"\n                >Link four</pds-secondary-navigation-link\n              ></pds-list-item\n            >\n          </pds-list>\n        </pds-secondary-navigation-level-two></pds-secondary-navigation-level-one\n      >\n      <pds-secondary-navigation-level-one\n        title=\"Menu item two\"\n        .activeSectionCallback=\"${() => {}}\"\n      >\n        <pds-secondary-navigation-level-two\n          .activePageCallback=\"${customActivePageFunction}\"\n          title=\"Link one\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          .activePageCallback=\"${customActivePageFunction}\"\n          title=\"Link two\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          .activePageCallback=\"${customActivePageFunction}\"\n          title=\"Link three\"\n          href=\"#\"\n        ></pds-secondary-navigation-level-two>\n        <pds-secondary-navigation-level-two\n          title=\"Link four\"\n          .activePageCallback=\"${customActivePageFunction}\"\n          href=\"${window.location.href}\"\n        ></pds-secondary-navigation-level-two>\n      </pds-secondary-navigation-level-one>\n      <pds-secondary-navigation-level-one\n        title=\"Menu item three\"\n        .activeSectionCallback=\"${() => {}}\"\n        href=\"#\"\n      ></pds-secondary-navigation-level-one>\n    </pds-secondary-navigation>`,\n  parameters: {\n    happo: {\n      beforeScreenshot: () => {\n        const clickEvent = new MouseEvent('click', {\n          view: window,\n          bubbles: true,\n          cancelable: false,\n        });\n\n        const component = document?.querySelector('pds-secondary-navigation');\n\n        const collapsibleEl = component?.shadowRoot\n          ?.querySelector('pds-collapsible')\n          ?.shadowRoot?.querySelector('.pds-c-collapsible__summary');\n\n        collapsibleEl?.dispatchEvent(clickEvent);\n\n        component\n          ?.querySelectorAll('pds-secondary-navigation-level-one')\n          .forEach(\n            (el) =>\n              el?.shadowRoot\n                ?.querySelector('pds-collapsible')\n                ?.shadowRoot?.querySelector('.pds-c-collapsible__summary')\n                ?.dispatchEvent(clickEvent),\n          );\n\n        component\n          ?.querySelectorAll('pds-secondary-navigation-level-two')[1]\n          ?.shadowRoot?.querySelector('pds-collapsible')\n          ?.shadowRoot?.querySelector('.pds-c-collapsible__summary')\n          ?.dispatchEvent(clickEvent);\n\n        const buttonEl = component\n          ?.querySelectorAll('pds-secondary-navigation-level-one')[1]\n          ?.shadowRoot?.querySelector('button');\n\n        buttonEl?.dispatchEvent(clickEvent);\n      },\n      delay: 500,\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Logo",
          "declaration": {
            "name": "Logo",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SecondaryLinkActivePage",
          "declaration": {
            "name": "SecondaryLinkActivePage",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSecondaryNavigation",
          "slots": [
            {
              "description": "If passed in, will display a logo in the navigation area",
              "name": "logo"
            },
            {
              "description": "Contains one or more secondary nav level one items, restricted to pds-secondary-navigation-level-one elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "navAriaLabel",
              "type": {
                "text": "string"
              },
              "description": "Aria label to go around the navigation container",
              "attribute": "navAriaLabel"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Sets a title for your secondary nav element",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "Sets a description for your secondary nav element",
              "attribute": "description"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "navAriaLabel",
              "type": {
                "text": "string"
              },
              "description": "Aria label to go around the navigation container",
              "fieldName": "navAriaLabel"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Sets a title for your secondary nav element",
              "fieldName": "title"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "Sets a description for your secondary nav element",
              "fieldName": "description"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A component that renders a secondary navigation",
          "tagName": "pds-secondary-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSecondaryNavigation",
          "declaration": {
            "name": "PdsSecondaryNavigation",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-secondary-navigation",
          "declaration": {
            "name": "PdsSecondaryNavigation",
            "module": "packages/web-components/src/lib/components/secondary-navigation/secondary-navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Secondary navigation/Secondary navigation link',\n  component: 'pds-secondary-navigation-link',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent slotted within the secondary navigation level two components.  It contains all the same properties as pds-link, but with an additional activePage prop to handle if the link should be shown as active.',\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-secondary-navigation-link\n      href=\"#\"\n      activePage=\"${args.activePage || nothing}\"\n      >Test link</pds-secondary-navigation-link\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: { activePage: false },\n}"
        },
        {
          "kind": "variable",
          "name": "Active",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Active',\n  args: { activePage: true },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Active",
          "declaration": {
            "name": "Active",
            "module": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSecondaryNavigationLink",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "activePage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true for visual representation of the user's current page\nIf not set, logic in the secondary-navigation-level-two component\nwill determine if this is the active page by matching the href\nto window.location.href",
              "attribute": "activePage"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "attribute": "size",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "attribute": "href",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "attribute": "download",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "attribute": "hreflang",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "attribute": "target",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "attribute": "ariaLabel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "attribute": "ariaCurrent",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "attribute": "role",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "attribute": "type",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "attribute": "button",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "attribute": "hover",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "addSizeToLinkIcon",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-secondary-navigation-link-click",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "A custom event dispatched on click",
              "name": "pds-link-click",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'emphasis' | 'inverted' | 'emphasis-inverted'"
              },
              "default": "'default'",
              "description": "**default** renders link for basic action\n- **emphasis** provide more affordance\n- **inverted** used on a darker background\n- **emphasis-inverted** more affordance on a darker background",
              "fieldName": "variant",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "activePage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true for visual representation of the user's current page\nIf not set, logic in the secondary-navigation-level-two component\nwill determine if this is the active page by matching the href\nto window.location.href",
              "fieldName": "activePage"
            },
            {
              "name": "size",
              "type": {
                "text": "LinkSize"
              },
              "default": "'default'",
              "description": "**default** renders default size\n- **sm** smaller size\n- **lg** larger size (not valid for link button)\n- **xl** extra large size (not valid for link button)",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Redirect url",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string | boolean | undefined"
              },
              "description": "Indicates that the link references a file to download, see https://www.w3schools.com/tags/att_a_download.asp",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies information about a linked document\nAutomatically set to 'noopener noreferrer' when target is '_blank'",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies the two-character language code of the document in the link",
              "fieldName": "hreflang",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "description": "Specifes target to open the linked document",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Specifies an aria-label for the link",
              "fieldName": "ariaLabel",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "ariaCurrent",
              "type": {
                "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
              },
              "description": "Specifies an aria-current for the link",
              "fieldName": "ariaCurrent",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Specifies a role for the link",
              "fieldName": "role",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "string | 'button' | 'reset' | 'submit' | undefined"
              },
              "description": "Specifies the Internet media type (formerly known as MIME type)\nof the linked document for links, or the type of button if button\nproperty is true",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "button",
              "type": {
                "text": "| 'default'\n    | 'default-inverted'\n    | 'primary'\n    | 'primary-inverted'\n    | 'icon'\n    | 'icon-inverted'\n    | ''"
              },
              "default": "''",
              "description": "Render the link as a button variant\n\n- **default** renders the button used for the most common calls to action that don't require as much visual attention.\n- **default-inverted** renders a default button for use on darker backgrounds.\n- **primary** renders the button used for the most important calls to action.\n- **primary-inverted** renders a primary button for use on darker backgrounds.\n- **icon** renders the button used for icon.\n- **icon-inverted** renders the button for icons used on darker backgrounds.",
              "fieldName": "button",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            },
            {
              "name": "hover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Programatically indicate a link should display as hover state",
              "fieldName": "hover",
              "inheritedFrom": {
                "name": "PdsLink",
                "module": "packages/web-components/src/lib/components/link/link.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsLink",
            "module": "/packages/web-components/src/lib/components/link/link"
          },
          "summary": "This component is a link that is meant to only reside within secondary navigation\nIt should have all the same functionality as a normal link but is styled differently",
          "tagName": "pds-secondary-navigation-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSecondaryNavigationLink",
          "declaration": {
            "name": "PdsSecondaryNavigationLink",
            "module": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-secondary-navigation-link",
          "declaration": {
            "name": "PdsSecondaryNavigationLink",
            "module": "packages/web-components/src/lib/components/secondary-navigation-link/secondary-navigation-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Secondary navigation/Secondary navigation level two',\n  component: 'pds-secondary-navigation-level-two',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n  },\n  render: (args) =>\n    html`<pds-secondary-navigation-level-two\n      title=\"${args.title || nothing}\"\n      href=\"${args.href || nothing}\"\n    >\n      <pds-list spacing=\"sm\">\n        <pds-list-item\n          ><pds-secondary-navigation-link href=\"#\"\n            >Link one</pds-secondary-navigation-link\n          ></pds-list-item\n        >\n        <pds-list-item\n          ><pds-secondary-navigation-link href=\"#\"\n            >Link two</pds-secondary-navigation-link\n          ></pds-list-item\n        >\n      </pds-list>\n    </pds-secondary-navigation-level-two>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    title: 'Category one',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Link",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  args: {\n    title: 'Link',\n    href: window.location.href,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSecondaryNavigationLevelTwo",
          "slots": [
            {
              "description": "A list of link items",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title of the top tier item (whether a parent or link)",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If the top tier item is a link, the href for it",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activePage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true for visual representation of the user's current page\nIf not set, component logic will determine the value by matching the window location's href to the component's href property",
              "attribute": "activePage"
            },
            {
              "kind": "method",
              "name": "determineActivePage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Function to determine if this is the active page\nThis function looks at the url of each link item\nand determines if the current URL matches the nav item URL\nThis is the default behavior of the activePageCallback prop"
            },
            {
              "kind": "field",
              "name": "activePageCallback",
              "type": {
                "text": "Function | undefined"
              },
              "description": "Callback function to determine if this is the active page\nDefaults to looking at the url of each secondary nav level two item\nand determines if the current URL matches the nav item URL",
              "attribute": "activePageCallback"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title of the top tier item (whether a parent or link)",
              "fieldName": "title"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If the top tier item is a link, the href for it",
              "fieldName": "href"
            },
            {
              "name": "activePage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true for visual representation of the user's current page\nIf not set, component logic will determine the value by matching the window location's href to the component's href property",
              "fieldName": "activePage"
            },
            {
              "name": "activePageCallback",
              "type": {
                "text": "Function | undefined"
              },
              "description": "Callback function to determine if this is the active page\nDefaults to looking at the url of each secondary nav level two item\nand determines if the current URL matches the nav item URL",
              "fieldName": "activePageCallback"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component generates the level two navigation within the secondary navigation, and generates a heading over slotted list contents at desktop and either a collapsible or a link (depending on props) at mobile.",
          "tagName": "pds-secondary-navigation-level-two",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSecondaryNavigationLevelTwo",
          "declaration": {
            "name": "PdsSecondaryNavigationLevelTwo",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-secondary-navigation-level-two",
          "declaration": {
            "name": "PdsSecondaryNavigationLevelTwo",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-two/secondary-navigation-level-two.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Secondary navigation/Secondary navigation level one',\n  component: 'pds-secondary-navigation-level-one',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    a11y: {\n      actions: {\n        handles: [\n          'pds-secondary-navigation-dropdown-close',\n          'pds-secondary-navigation-dropdown-open',\n        ],\n      },\n      config: {\n        rules: [\n          {\n            // Since this is a subcomponent it confuses AXE\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/aria-required-parent\n            id: 'aria-required-parent',\n            enabled: false,\n          },\n          {\n            // Color contrast is sufficient - this is a false positive.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-secondary-navigation-level-one\n      title=\"${args.title || nothing}\"\n      href=\"${args.href || nothing}\"\n      columns=\"${args.columns || nothing}\"\n    >\n      <pds-secondary-navigation-level-two title=\"Category one\">\n        <pds-list spacing=\"sm\">\n          <pds-list-item><pds-link href=\"#\">Link one</pds-link></pds-list-item>\n          <pds-list-item><pds-link href=\"#\">Link two</pds-link></pds-list-item>\n          <pds-list-item\n            ><pds-link href=\"#\">Link three</pds-link></pds-list-item\n          >\n        </pds-list>\n      </pds-secondary-navigation-level-two>\n      <pds-secondary-navigation-level-two title=\"Category two\">\n        <pds-list spacing=\"sm\">\n          <pds-list-item><pds-link href=\"#\">Link one</pds-link></pds-list-item>\n          <pds-list-item><pds-link href=\"#\">Link two</pds-link></pds-list-item>\n          <pds-list-item\n            ><pds-link href=\"#\">Link three</pds-link></pds-list-item\n          >\n          <pds-list-item><pds-link href=\"#\">Link four</pds-link></pds-list-item>\n        </pds-list>\n      </pds-secondary-navigation-level-two></pds-secondary-navigation-level-one\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    title: 'Menu item one',\n    columns: '2col',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Link",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  args: {\n    title: 'Account',\n    href: '#',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ContainsOnlyLinks",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Contains only links',\n  args: {\n    title: 'Menu item one',\n  },\n  render: (args) =>\n    html`<pds-secondary-navigation-level-one title=\"${args.title || nothing}\">\n      <pds-secondary-navigation-level-two\n        title=\"Link one\"\n        href=\"#\"\n      ></pds-secondary-navigation-level-two>\n      <pds-secondary-navigation-level-two title=\"Link two\" href=\"#\">\n      </pds-secondary-navigation-level-two\n      ><pds-secondary-navigation-level-two\n        title=\"Link three\"\n        href=\"${window.location.href}\"\n      ></pds-secondary-navigation-level-two\n    ></pds-secondary-navigation-level-one>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ContainsOnlyLinks",
          "declaration": {
            "name": "ContainsOnlyLinks",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSecondaryNavigationLevelOne",
          "slots": [
            {
              "description": "One or more pds-secondary-navigation-level-two elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title of the top tier item (whether a parent or link)",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If the top tier item is a link (not a dropdown), this represents its href",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "'1col' | '2col' | '3col' | '4col'"
              },
              "default": "'1col'",
              "description": "However many columns the items under a parent should have at desktop",
              "attribute": "columns"
            },
            {
              "kind": "method",
              "name": "handleOnClickOutside",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handle click outside the component"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleIsOpen"
            },
            {
              "kind": "method",
              "name": "handleClickButton"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "field",
              "name": "activeSectionCallback",
              "type": {
                "text": "Function | undefined"
              },
              "description": "Callback function to determine if this is the active section\nDefaults to looking at the url of each secondary nav level two item\nand determines if the current URL matches the nav item URL",
              "attribute": "activeSectionCallback"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "field",
              "name": "classNames",
              "description": "internal",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on closing a dropdown",
              "name": "pds-secondary-navigation-dropdown-close"
            },
            {
              "description": "A custom event dispatched on opening a dropdown",
              "name": "pds-secondary-navigation-dropdown-open"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title of the top tier item (whether a parent or link)",
              "fieldName": "title"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "If the top tier item is a link (not a dropdown), this represents its href",
              "fieldName": "href"
            },
            {
              "name": "columns",
              "type": {
                "text": "'1col' | '2col' | '3col' | '4col'"
              },
              "default": "'1col'",
              "description": "However many columns the items under a parent should have at desktop",
              "fieldName": "columns"
            },
            {
              "name": "activeSectionCallback",
              "type": {
                "text": "Function | undefined"
              },
              "description": "Callback function to determine if this is the active section\nDefaults to looking at the url of each secondary nav level two item\nand determines if the current URL matches the nav item URL",
              "fieldName": "activeSectionCallback"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component generates the level one navigation within the secondary navigation, and generates a dropdown menu at desktop and either a collapsible or a link (depending on props) at mobile.",
          "tagName": "pds-secondary-navigation-level-one",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSecondaryNavigationLevelOne",
          "declaration": {
            "name": "PdsSecondaryNavigationLevelOne",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-secondary-navigation-level-one",
          "declaration": {
            "name": "PdsSecondaryNavigationLevelOne",
            "module": "packages/web-components/src/lib/components/secondary-navigation-level-one/secondary-navigation-level-one.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/select/select.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/select/select.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    size: 'default',\n    label: 'This is a label',\n    placeholder: '',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default small',\n  args: {\n    size: 'sm',\n    label: 'This is a label',\n    placeholder: '',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n    label: 'This is a label',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DisabledWithHelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled with help text',\n  args: {\n    disabled: true,\n    helpText:\n      'Here is some more text explaining why you should choose an option',\n    label: 'Choose an option',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // This is a disabled field, so we can ignore this check\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Error',\n  args: {\n    required: true,\n    label: 'This is a label',\n    placeholder: '',\n    errorMessage: 'Error message goes here.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Placeholder",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Placeholder',\n  args: {\n    required: true,\n    label: 'This is a label',\n    placeholder: 'Please choose an option.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "PreselectedOption",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Pre-selected option',\n  args: {\n    required: true,\n    label: 'This is a label',\n    value: '2',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Help text',\n  args: {\n    helpText:\n      'Here is some more text explaining why you should choose an option',\n    label: 'Choose an option',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    label: 'You cannot see this label, but we want it for screen readers',\n    hideLabel: true,\n    placeholder: 'Choose an option',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSmall",
          "declaration": {
            "name": "DefaultSmall",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledWithHelpText",
          "declaration": {
            "name": "DisabledWithHelpText",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Placeholder",
          "declaration": {
            "name": "Placeholder",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PreselectedOption",
          "declaration": {
            "name": "PreselectedOption",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HelpText",
          "declaration": {
            "name": "HelpText",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/select/select.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSelect",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additional markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additonal markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "Size\n-**sm** renders a the small version of the Select",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "HTMLSelectElement"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "Set the selected option based on the current value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectContainsOption",
              "parameters": [
                {
                  "name": "select",
                  "type": {
                    "text": "HTMLSelectElement"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if an option exists in the select"
            },
            {
              "kind": "method",
              "name": "childNodeObserverCallback",
              "parameters": [
                {
                  "name": "currentSelect",
                  "type": {
                    "text": "PdsSelect"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "placeholderTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for placeholder,\nif the `placeholder` prop is defined.\nAdds a hidden and disabled attribute\nwhen this select is required.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-select-blur",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "pds-select-change",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "pds-select-focus",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "Size\n-**sm** renders a the small version of the Select",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "placeholder"
            },
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "This component renders a styled select input component.",
          "tagName": "pds-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSelect",
          "declaration": {
            "name": "PdsSelect",
            "module": "packages/web-components/src/lib/components/select/select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-select",
          "declaration": {
            "name": "PdsSelect",
            "module": "packages/web-components/src/lib/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer/session-timer.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Session timer',\n  component: 'pds-session-timer',\n  tags: ['autodocs'],\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Axe can't handle the session timer :backdrop psuedo selector\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n    actions: {\n      handles: [\n        'pds-session-timer-threshold-reached',\n        'pds-session-timer-session-requested',\n        'pds-session-timer-logout-requested',\n        'pds-session-timer-extension-requested',\n        'pds-session-timer-dismissed',\n        'pds-session-timer-max-session-dismissed',\n        'pds-session-timer-activated',\n        'pds-session-timer-expired',\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n  parameters: {\n    happo: false,\n  },\n  render: () =>\n    html`<pds-button\n        onclick=\"document?.querySelectorAll('pds-session-timer')[1]?.remove(); document.querySelector('pds-session-timer').removeAttribute('maxSessionFlag'); document.querySelector('pds-session-timer').setAttribute('setMillisecondsToTimeout', '121000')\"\n        >Test session timer</pds-button\n      ><pds-session-timer\n        logSessionTimeRemaining\n        style=\"display:none;\"\n      ></pds-session-timer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "ExtendSessionApiEndpointFailureExtraThresholdSet",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Extend session api endpoint failure, extra threshold set',\n  args: {},\n  parameters: {\n    happo: {\n      delay: 1000,\n    },\n  },\n  render: () =>\n    html`<pds-session-timer\n      extendSessionApiEndpointFailure\n      setMillisecondsToTimeout=\"1\"\n      customNotificationThresholds=\"[118000]\"\n      logSessionTimeRemaining\n      style=\"display:none;\"\n    ></pds-session-timer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Spanish",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Spanish',\n  args: {},\n  parameters: {\n    happo: {\n      delay: 1000,\n    },\n  },\n  render: () =>\n    html`<pds-session-timer\n      extendSessionApiEndpointFailure\n      setMillisecondsToTimeout=\"1\"\n      style=\"display:none;\"\n      lang=\"es\"\n    ></pds-session-timer>`,\n}"
        },
        {
          "kind": "variable",
          "name": "MaxTimer",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Max',\n  args: {},\n  parameters: {\n    happo: false,\n  },\n  render: () =>\n    html`<pds-button\n        onclick=\"document?.querySelectorAll('pds-session-timer')[1]?.remove(); document.querySelector('pds-session-timer').setAttribute('maxSessionFlag', ''); document.querySelector('pds-session-timer').setAttribute('setMillisecondsToTimeout', '301000');\"\n        >Test max session timer</pds-button\n      ><pds-session-timer\n        logSessionTimeRemaining\n        style=\"display:none;\"\n      ></pds-session-timer>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExtendSessionApiEndpointFailureExtraThresholdSet",
          "declaration": {
            "name": "ExtendSessionApiEndpointFailureExtraThresholdSet",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Spanish",
          "declaration": {
            "name": "Spanish",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "MaxTimer",
          "declaration": {
            "name": "MaxTimer",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer/session-timer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSessionTimer",
          "members": [
            {
              "kind": "field",
              "name": "setMillisecondsToTimeout",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Property to manually set milliseconds to timeout",
              "attribute": "setMillisecondsToTimeout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxSessionFlag",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for max session state, defaults to false",
              "attribute": "maxSessionFlag",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customLogoutPage",
              "type": {
                "text": "string"
              },
              "description": "Fully qualified url of custom page to be directed to after logout",
              "attribute": "customLogoutPage"
            },
            {
              "kind": "field",
              "name": "extendSessionApiEndpointFailure",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for extend session api endpoint failure, defaults to false",
              "attribute": "extendSessionApiEndpointFailure"
            },
            {
              "kind": "field",
              "name": "customNotificationThresholds",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "Array of custom notification thresholds in ms, five minutes and two minutes will always emit events",
              "attribute": "customNotificationThresholds"
            },
            {
              "kind": "field",
              "name": "logSessionTimeRemaining",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turn on session time logger for debugging",
              "attribute": "logSessionTimeRemaining"
            },
            {
              "kind": "field",
              "name": "handleLocalStorageSessionData",
              "description": "Abstract local storage commands for SSR"
            },
            {
              "kind": "method",
              "name": "setTitleInterval",
              "parameters": [
                {
                  "name": "reset",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Handle title notification in browser"
            },
            {
              "kind": "method",
              "name": "handleExtendSessionClicked",
              "description": "Fires session extension request event"
            },
            {
              "kind": "method",
              "name": "sessionExpired",
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Fires session expired event"
            },
            {
              "kind": "method",
              "name": "dismissTimer",
              "description": "Dismiss the timer"
            },
            {
              "kind": "method",
              "name": "handleThresholdReached",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle countdown thresholds reached"
            },
            {
              "kind": "method",
              "name": "handleMaxDismiss",
              "description": "Handle dimissing the max timeout message"
            },
            {
              "kind": "method",
              "name": "handleLogoutClick",
              "description": "Handle a logout click"
            },
            {
              "kind": "method",
              "name": "handleLogout",
              "description": "Fires session logout requested event"
            },
            {
              "kind": "method",
              "name": "handleExtendButtonState",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'loading' | 'default'"
                  }
                }
              ],
              "description": "Handle extend button click"
            },
            {
              "kind": "method",
              "name": "setEventListeners",
              "description": "Set event listeners"
            },
            {
              "kind": "method",
              "name": "returnFocus",
              "description": "Return focus to specified element"
            },
            {
              "kind": "method",
              "name": "resetSessionStorage",
              "parameters": [
                {
                  "name": "contextElement",
                  "optional": true,
                  "type": {
                    "text": "PdsSessionTimer | undefined"
                  }
                }
              ],
              "description": "Reset session in local storage"
            },
            {
              "kind": "method",
              "name": "updateSessionInformationFromData",
              "parameters": [
                {
                  "name": "maxSessionFlag",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "timeout",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "timestamp",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkTick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Check if this tick of the timer requires action"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-session-timer-session-requested",
              "type": {
                "text": "CustomEvent"
              },
              "description": "a custom event dispatched when session timer requests session time"
            },
            {
              "name": "pds-session-timer-activated",
              "type": {
                "text": "CustomEvent"
              },
              "description": "a custom event dispatched when session timer activates"
            },
            {
              "name": "pds-session-timer-extension-requested",
              "type": {
                "text": "Event"
              },
              "description": "a custom event dispatched when session timer requests session to be extended"
            },
            {
              "name": "pds-session-timer-dismissed",
              "type": {
                "text": "Event"
              },
              "description": "a custom event dispatched when session timer is dismissed after a session extension call failure state"
            },
            {
              "name": "pds-session-timer-max-session-dismissed",
              "type": {
                "text": "Event"
              },
              "description": "a custom event dispatched when session timer is dismissed during a max timeout"
            },
            {
              "name": "pds-session-timer-logout-requested",
              "type": {
                "text": "CustomEvent"
              },
              "description": "a custom event dispatched when session timer requests session to be logged out"
            },
            {
              "description": "{ threshold: whichThreshold } a custom event dispatched when a time threshold value has been reached",
              "name": "pds-session-timer-threshold-reached"
            },
            {
              "description": "a custom event dispatched when session timer expires",
              "name": "pds-session-timer-expired"
            }
          ],
          "attributes": [
            {
              "name": "setMillisecondsToTimeout",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Property to manually set milliseconds to timeout",
              "fieldName": "setMillisecondsToTimeout"
            },
            {
              "name": "maxSessionFlag",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for max session state, defaults to false",
              "fieldName": "maxSessionFlag"
            },
            {
              "name": "customLogoutPage",
              "type": {
                "text": "string"
              },
              "description": "Fully qualified url of custom page to be directed to after logout",
              "fieldName": "customLogoutPage"
            },
            {
              "name": "extendSessionApiEndpointFailure",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for extend session api endpoint failure, defaults to false",
              "fieldName": "extendSessionApiEndpointFailure"
            },
            {
              "name": "customNotificationThresholds",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "Array of custom notification thresholds in ms, five minutes and two minutes will always emit events",
              "fieldName": "customNotificationThresholds"
            },
            {
              "name": "logSessionTimeRemaining",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turn on session time logger for debugging",
              "fieldName": "logSessionTimeRemaining"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component presents a session warning to authenticated users when the active session is expiring\n\nThis component relies on a middle layer application to provide it timeout data from the backend session service,\nand fires the below events to communicate with the middle layer.\n\nThe component writes data to local storage to keep the session timer of all open browser windows in sync using the 'pdsSessionValue' key.\n\n- Values greater than zero in the local storage will set the countdown timer for that many milliseconds into the future\n- Value of zero will indicate an expired session and cause the component to emit a logout requested event\n- Any other value will not set a timer",
          "tagName": "pds-session-timer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSessionTimer",
          "declaration": {
            "name": "PdsSessionTimer",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-session-timer",
          "declaration": {
            "name": "PdsSessionTimer",
            "module": "packages/web-components/src/lib/components/session-timer/session-timer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Segmented control/Segmented control item',\n  component: 'pds-segmented-control-item',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    action: {\n      handles: ['pds-segmented-control-item-click'],\n    },\n    docs: {\n      description: {\n        component:\n          'Note: This component is ONLY meant to be used as a subcomponent of the segmented-control component.',\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-segmented-control-item ?disabled=${args.disabled}\n      >Option 1</pds-segmented-control-item\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSegmentedControlItem",
          "slots": [
            {
              "description": "Use this slot to pass label for segment",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "aria-label for segment.",
              "attribute": "ariaLabel"
            },
            {
              "kind": "field",
              "name": "isSegmentActive",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "active segment",
              "attribute": "isSegmentActive"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-segmented-control-item-click"
            }
          ],
          "attributes": [
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "aria-label for segment.",
              "fieldName": "ariaLabel"
            },
            {
              "name": "isSegmentActive",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "active segment",
              "fieldName": "isSegmentActive"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A segmented-control-item which is a children component of pds-segmented-control",
          "tagName": "pds-segmented-control-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSegmentedControlItem",
          "declaration": {
            "name": "PdsSegmentedControlItem",
            "module": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-segmented-control-item",
          "declaration": {
            "name": "PdsSegmentedControlItem",
            "module": "packages/web-components/src/lib/components/segmented-control-item/segmented-control-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control/segmented-control.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Segmented control',\n  component: 'pds-segmented-control',\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'radio',\n      options: ['default', 'sm'],\n    },\n    disabled: { control: 'boolean' },\n    ariaLabel: { control: 'text' },\n  },\n  render: (args) =>\n    html`<pds-segmented-control\n      ?disabled=${args.disabled}\n      size=\"${args.size || nothing}\"\n      ><pds-segmented-control-item>Option 1</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 2</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 3</pds-segmented-control-item>\n    </pds-segmented-control>`,\n  parameters: {\n    actions: {\n      handles: ['pds-segmented-control-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Small',\n  args: {\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LongLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Long label',\n  render: () =>\n    html`<pds-segmented-control\n      ><pds-segmented-control-item isSegmentActive\n        >Option 1</pds-segmented-control-item\n      >\n      <pds-segmented-control-item>Option 2 large</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 3</pds-segmented-control-item>\n    </pds-segmented-control>`,\n}"
        },
        {
          "kind": "variable",
          "name": "FourSegments",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '4 segments',\n  render: () =>\n    html`<pds-segmented-control\n      ><pds-segmented-control-item>Option 1</pds-segmented-control-item>\n      <pds-segmented-control-item isSegmentActive\n        >Option 2</pds-segmented-control-item\n      >\n      <pds-segmented-control-item>Option 3</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 4</pds-segmented-control-item>\n    </pds-segmented-control>`,\n}"
        },
        {
          "kind": "variable",
          "name": "FiveSegments",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: '5 segments',\n  args: {},\n  render: () =>\n    html`<pds-segmented-control\n      ><pds-segmented-control-item>Option 1</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 2</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 3</pds-segmented-control-item>\n      <pds-segmented-control-item>Option 4</pds-segmented-control-item>\n      <pds-segmented-control-item isSegmentActive\n        >Option 5</pds-segmented-control-item\n      >\n    </pds-segmented-control>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LongLabel",
          "declaration": {
            "name": "LongLabel",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FourSegments",
          "declaration": {
            "name": "FourSegments",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FiveSegments",
          "declaration": {
            "name": "FiveSegments",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/segmented-control/segmented-control.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSegmentedControl",
          "slots": [
            {
              "description": "Use this slot to pass the actual segments. Restricted to have <pds-segmented-control-item> elements.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the segmented-control",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled segmented control",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "'segmented control'",
              "description": "aria-label for segmented control",
              "attribute": "ariaLabel"
            },
            {
              "kind": "method",
              "name": "updateSegments"
            },
            {
              "kind": "method",
              "name": "updateActiveSegment",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the segmented-control",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled segmented control",
              "fieldName": "disabled"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "'segmented control'",
              "description": "aria-label for segmented control",
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "pds-segmented-control component, allow users to select a single option from a list of exclusive options.",
          "tagName": "pds-segmented-control",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSegmentedControl",
          "declaration": {
            "name": "PdsSegmentedControl",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-segmented-control",
          "declaration": {
            "name": "PdsSegmentedControl",
            "module": "packages/web-components/src/lib/components/segmented-control/segmented-control.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Session timer/Session timer countdown',\n  component: 'pds-session-timer-countdown',\n  tags: ['autodocs'],\n  parameters: {\n    happo: false,\n    actions: {\n      handles: [\n        'pds-session-timer-countdown-threshold-reached',\n        'pds-session-timer-countdown-completed',\n      ],\n    },\n  },\n  render: () =>\n    html`<pds-session-timer-countdown\n      timeInMs=\"${1 * 60 * 1000}\"\n      notificationThresholds=\"[60000, 30000]\"\n    ></pds-session-timer-countdown>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSessionTimerCountdown",
          "members": [
            {
              "kind": "field",
              "name": "timeInMs",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Initial time for countdown",
              "attribute": "timeInMs"
            },
            {
              "kind": "field",
              "name": "parentElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Optional parent element (may be required for component usage context in certain scenarios)",
              "attribute": "parentElement"
            },
            {
              "kind": "field",
              "name": "notificationThresholds",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "Array of notification thresholds in ms",
              "attribute": "notificationThresholds"
            },
            {
              "kind": "method",
              "name": "formatTimerValue",
              "description": "Format string for display"
            },
            {
              "kind": "method",
              "name": "getHumanReadableTimeRemaining"
            },
            {
              "kind": "method",
              "name": "formatA11yTimerValue",
              "description": "Format string for screenreader"
            },
            {
              "kind": "method",
              "name": "initTimer",
              "parameters": [
                {
                  "name": "remainingTimeInSeconds",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "intialize countdown"
            },
            {
              "kind": "method",
              "name": "stop",
              "description": "stop countdown"
            },
            {
              "kind": "method",
              "name": "removeInterval",
              "description": "remove interval"
            },
            {
              "kind": "method",
              "name": "thresholdReached",
              "parameters": [
                {
                  "name": "whichThreshold",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "threshold reached"
            },
            {
              "kind": "method",
              "name": "countdownCompleted",
              "description": "countdown completed"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-session-timer-countdown-tick",
              "type": {
                "text": "CustomEvent"
              },
              "description": "{ currentTick: Number, context: this.parentElement }"
            },
            {
              "name": "pds-session-timer-countdown-threshold-reached",
              "type": {
                "text": "CustomEvent"
              },
              "description": "{ threshold: whichThreshold, context: this.parentElement }"
            },
            {
              "name": "pds-session-timer-countdown-completed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "{ totaltime: Number }"
            }
          ],
          "attributes": [
            {
              "name": "timeInMs",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Initial time for countdown",
              "fieldName": "timeInMs"
            },
            {
              "name": "parentElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Optional parent element (may be required for component usage context in certain scenarios)",
              "fieldName": "parentElement"
            },
            {
              "name": "notificationThresholds",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "Array of notification thresholds in ms",
              "fieldName": "notificationThresholds"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component displays a countdown timer to the user and includes screen reader text",
          "tagName": "pds-session-timer-countdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSessionTimerCountdown",
          "declaration": {
            "name": "PdsSessionTimerCountdown",
            "module": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-session-timer-countdown",
          "declaration": {
            "name": "PdsSessionTimerCountdown",
            "module": "packages/web-components/src/lib/components/session-timer-countdown/session-timer-countdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/sidebar/sidebar.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/sidebar/sidebar.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "LeftSidebar",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Left',\n  render: () =>\n    html`<pds-sidebar style=\"--pds-sidebar-left-width: 380px;\"\n      ><placeholder-element\n        style=\"--placeholder-element-margin-bottom: 0;\"\n        slot=\"left-sidebar\"\n        >Left sidebar</placeholder-element\n      ><placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n        >Main content</placeholder-element\n      ></pds-sidebar\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "LeftAndRightSidebar",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Left and right',\n  render: () =>\n    html`<pds-sidebar\n      ><placeholder-element\n        style=\"--placeholder-element-margin-bottom: 0;\"\n        slot=\"left-sidebar\"\n        >Left sidebar</placeholder-element\n      ><placeholder-element style=\"--placeholder-element-margin-bottom: 0;\"\n        >Main content</placeholder-element\n      ><placeholder-element\n        style=\"--placeholder-element-margin-bottom: 0;\"\n        slot=\"right-sidebar\"\n        >Right sidebar</placeholder-element\n      ></pds-sidebar\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LeftSidebar",
          "declaration": {
            "name": "LeftSidebar",
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LeftAndRightSidebar",
          "declaration": {
            "name": "LeftAndRightSidebar",
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/sidebar/sidebar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSidebar",
          "slots": [
            {
              "description": "Main content",
              "name": "default"
            },
            {
              "description": "Content to be rendered at left sidebar",
              "name": "left-sidebar"
            },
            {
              "description": "Content to be rendered at right sidebar",
              "name": "right-sidebar"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "break",
              "type": {
                "text": "'faster' | 'slower' | 'default'"
              },
              "default": "'default'",
              "description": "**default** stacks at (64rem/ 1024px) viewport\n- **faster** stacks at a smaller viewport (48rem/ 768px)\n- **slower** stacks at a larger viewport (85.375rem/ 1366px)",
              "attribute": "break"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** spaced with a default gap (24px)\n- **none** no gap between content and sidebar\n- **sm** spaced with a smaller gap (8px)\n- **lg** spaced with a larger gap (32px)",
              "attribute": "gap"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "break",
              "type": {
                "text": "'faster' | 'slower' | 'default'"
              },
              "default": "'default'",
              "description": "**default** stacks at (64rem/ 1024px) viewport\n- **faster** stacks at a smaller viewport (48rem/ 768px)\n- **slower** stacks at a larger viewport (85.375rem/ 1366px)",
              "fieldName": "break"
            },
            {
              "name": "gap",
              "type": {
                "text": "'none' | 'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** spaced with a default gap (24px)\n- **none** no gap between content and sidebar\n- **sm** spaced with a smaller gap (8px)\n- **lg** spaced with a larger gap (32px)",
              "fieldName": "gap"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This components provides a layout for webpages containing sidebars",
          "tagName": "pds-sidebar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSidebar",
          "declaration": {
            "name": "PdsSidebar",
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-sidebar",
          "declaration": {
            "name": "PdsSidebar",
            "module": "packages/web-components/src/lib/components/sidebar/sidebar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SkeletonLoaderDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderHeading",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Heading',\n  args: { variant: 'heading' },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderAreaChart",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Area chart',\n  args: { variant: 'area-chart' },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderImage",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Image',\n  args: { variant: 'image' },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderInvertedHeading",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted heading',\n  args: { variant: 'heading', inverted: true },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderInvertedDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted text',\n  args: { inverted: true },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderInvertedAreaChart",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted area chart',\n  args: { variant: 'area-chart', inverted: true },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SkeletonLoaderInvertedImage",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted image',\n  args: { variant: 'image', inverted: true },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderDefault",
          "declaration": {
            "name": "SkeletonLoaderDefault",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderHeading",
          "declaration": {
            "name": "SkeletonLoaderHeading",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderAreaChart",
          "declaration": {
            "name": "SkeletonLoaderAreaChart",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderImage",
          "declaration": {
            "name": "SkeletonLoaderImage",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderInvertedHeading",
          "declaration": {
            "name": "SkeletonLoaderInvertedHeading",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderInvertedDefault",
          "declaration": {
            "name": "SkeletonLoaderInvertedDefault",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderInvertedAreaChart",
          "declaration": {
            "name": "SkeletonLoaderInvertedAreaChart",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SkeletonLoaderInvertedImage",
          "declaration": {
            "name": "SkeletonLoaderInvertedImage",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSkeletonLoader",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'heading' | 'image' | 'area-chart'"
              },
              "default": "'default'",
              "description": "**default** loading animation to replace text elements\n- **heading** loading animation to replace heading elements\n- **image** loading animation to replace image elements\n- **area-chart** loading animation to replace charts and graphs",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Inverted loader for placement over a dark background.",
              "attribute": "inverted"
            },
            {
              "kind": "field",
              "name": "loadingText",
              "type": {
                "text": "string"
              },
              "description": "Visually hidden, descriptive text for screen readers, describes content being loaded",
              "attribute": "loadingText"
            },
            {
              "kind": "method",
              "name": "getLoadingText",
              "description": ">   * @internal\n>   * If the user passes in custom custom loading text, that will be populated.\n>   * If not, the text will be automated and language localized.\n>"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'heading' | 'image' | 'area-chart'"
              },
              "default": "'default'",
              "description": "**default** loading animation to replace text elements\n- **heading** loading animation to replace heading elements\n- **image** loading animation to replace image elements\n- **area-chart** loading animation to replace charts and graphs",
              "fieldName": "variant"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Inverted loader for placement over a dark background.",
              "fieldName": "inverted"
            },
            {
              "name": "loadingText",
              "type": {
                "text": "string"
              },
              "description": "Visually hidden, descriptive text for screen readers, describes content being loaded",
              "fieldName": "loadingText"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a loader",
          "tagName": "pds-skeleton-loader",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSkeletonLoader",
          "declaration": {
            "name": "PdsSkeletonLoader",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-skeleton-loader",
          "declaration": {
            "name": "PdsSkeletonLoader",
            "module": "packages/web-components/src/lib/components/skeleton-loader/skeleton-loader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/show-more/show-more.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/show-more/show-more.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: {\n    variant: 'inverted',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'BrandXStrong',\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/show-more/show-more.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/show-more/show-more.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/show-more/show-more.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/show-more/show-more.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsShowMore",
          "slots": [
            {
              "description": "This is the default slot where the hidden/shown content will go",
              "name": "Default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard show-more color variant\n- **inverted** renders the inverted show-more color variant",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is a check to see if show more is open or not.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showMoreText",
              "type": {
                "text": "string"
              },
              "attribute": "showMoreText"
            },
            {
              "kind": "field",
              "name": "showLessText",
              "type": {
                "text": "string"
              },
              "attribute": "showLessText"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Toggle the show more component to either open or closed"
            },
            {
              "kind": "method",
              "name": "expand",
              "description": "Opening function"
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Closing function"
            },
            {
              "kind": "method",
              "name": "animateExpand",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "animateCollapse",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "an event dispatched on click when show more is opened",
              "name": "pds-show-more-open"
            },
            {
              "description": "an event dispatched on click when show more is closed",
              "name": "pds-show-more-close"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'inverted'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard show-more color variant\n- **inverted** renders the inverted show-more color variant",
              "fieldName": "variant"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This is a check to see if show more is open or not.",
              "fieldName": "open"
            },
            {
              "name": "showMoreText",
              "type": {
                "text": "string"
              },
              "fieldName": "showMoreText"
            },
            {
              "name": "showLessText",
              "type": {
                "text": "string"
              },
              "fieldName": "showLessText"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component is show more that toggles content when it is clicked",
          "tagName": "pds-show-more",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsShowMore",
          "declaration": {
            "name": "PdsShowMore",
            "module": "packages/web-components/src/lib/components/show-more/show-more.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-show-more",
          "declaration": {
            "name": "PdsShowMore",
            "module": "packages/web-components/src/lib/components/show-more/show-more.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/status-indicator/status-indicator.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Status indicator',\n  component: 'pds-status-indicator',\n  tags: ['autodocs'],\n  render: (args) =>\n    html`<pds-status-indicator\n      variant=\"${args.variant || nothing}\"\n      border=\"${args.border || nothing}\"\n      icon=\"${args.icon || nothing}\"\n      ><span>Status</span></pds-status-indicator\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWithCheck",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with check icon',\n  args: {\n    variant: 'default',\n    icon: 'check',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultWithBorder",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default with border',\n  args: {\n    variant: 'default',\n    border: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Negative",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Negative',\n  args: {\n    variant: 'negative',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NegativeWithX",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Negative with x icon',\n  args: {\n    variant: 'negative',\n    icon: 'x',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NegativeMinus",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Negative with minus icon',\n  args: {\n    variant: 'negative',\n    icon: 'minus',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NegativeAlert",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Negative with alert icon',\n  args: {\n    variant: 'negative',\n    icon: 'alert',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Neutral",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Neutral',\n  args: {\n    variant: 'neutral',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NeutralMinus",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Neutral with minus icon',\n  args: {\n    variant: 'neutral',\n    icon: 'minus',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NeutralMoreHorizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Neutral with more horizontal icon',\n  args: {\n    variant: 'neutral',\n    icon: 'moreHorizontal',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NeutralClock",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Neutral with clock icon',\n  args: {\n    variant: 'neutral',\n    icon: 'clock',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Warning",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Warning',\n  args: {\n    variant: 'warning',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "WarningAlert",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Warning with alert icon',\n  args: {\n    variant: 'warning',\n    icon: 'alert',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithCheck",
          "declaration": {
            "name": "DefaultWithCheck",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithBorder",
          "declaration": {
            "name": "DefaultWithBorder",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Negative",
          "declaration": {
            "name": "Negative",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NegativeWithX",
          "declaration": {
            "name": "NegativeWithX",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NegativeMinus",
          "declaration": {
            "name": "NegativeMinus",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NegativeAlert",
          "declaration": {
            "name": "NegativeAlert",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Neutral",
          "declaration": {
            "name": "Neutral",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NeutralMinus",
          "declaration": {
            "name": "NeutralMinus",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NeutralMoreHorizontal",
          "declaration": {
            "name": "NeutralMoreHorizontal",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NeutralClock",
          "declaration": {
            "name": "NeutralClock",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Warning",
          "declaration": {
            "name": "Warning",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "WarningAlert",
          "declaration": {
            "name": "WarningAlert",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/status-indicator/status-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsStatusIndicator",
          "slots": [
            {
              "description": "The contents of the status-indicator",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'negative' | 'neutral' | 'warning'"
              },
              "default": "'default'",
              "description": "Variant of status-indicator\n\n- **default** renders the status-indicator positive variant\n- **negative** renders the status-indicator negative variant\n- **neutral** renders the status-indicator neutral variant\n- **warning** renders the status-indicator warning variant",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "'alert' | 'check' | 'clock' | 'minus' | 'moreHorizontal' | 'x' | undefined"
              },
              "description": "Icon to display in status-indicator\n\nValid icons for default variant:\n- **check**\n\nValid icons for negative variant:\n- **alert**\n- **minus**\n- **x**\n\nValid icons for neutral variant:\n- **clock**\n- **minus**\n- **moreHorizontal**\n\nValid icons for warning variant:\n- **alert**",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a border to status-indicator",
              "attribute": "border"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'negative' | 'neutral' | 'warning'"
              },
              "default": "'default'",
              "description": "Variant of status-indicator\n\n- **default** renders the status-indicator positive variant\n- **negative** renders the status-indicator negative variant\n- **neutral** renders the status-indicator neutral variant\n- **warning** renders the status-indicator warning variant",
              "fieldName": "variant"
            },
            {
              "name": "icon",
              "type": {
                "text": "'alert' | 'check' | 'clock' | 'minus' | 'moreHorizontal' | 'x' | undefined"
              },
              "description": "Icon to display in status-indicator\n\nValid icons for default variant:\n- **check**\n\nValid icons for negative variant:\n- **alert**\n- **minus**\n- **x**\n\nValid icons for neutral variant:\n- **clock**\n- **minus**\n- **moreHorizontal**\n\nValid icons for warning variant:\n- **alert**",
              "fieldName": "icon"
            },
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a border to status-indicator",
              "fieldName": "border"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component can be used for showing the status as positive, negative, neutral and warning",
          "tagName": "pds-status-indicator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsStatusIndicator",
          "declaration": {
            "name": "PdsStatusIndicator",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-status-indicator",
          "declaration": {
            "name": "PdsStatusIndicator",
            "module": "packages/web-components/src/lib/components/status-indicator/status-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CurrentNotInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Current, not interactive',\n  args: { status: 'current' },\n}"
        },
        {
          "kind": "variable",
          "name": "CurrentInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Current, interactive',\n  args: {\n    status: 'current',\n    href: '#',\n    active: true,\n  },\n  render: (args) => {\n    return html` <pds-step-indicator-item\n      status=${args.status}\n      active=${args.status}\n      href=${args.href}\n      interactive\n    >\n      <span>Step item</span>\n    </pds-step-indicator-item>`;\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "CompletedNotInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Completed, not interactive',\n  args: { status: 'completed' },\n}"
        },
        {
          "kind": "variable",
          "name": "CompletedInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Completed, interactive',\n  args: {\n    status: 'completed',\n    href: '#',\n  },\n  render: (args) => {\n    return html` <pds-step-indicator-item\n      status=${args.status}\n      href=${args.href}\n      interactive\n    >\n      <span>Step item</span>\n    </pds-step-indicator-item>`;\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "IncompleteNotInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Incomplete, not interactive',\n  args: { status: 'incomplete' },\n}"
        },
        {
          "kind": "variable",
          "name": "IncompleteInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Incomplete, interactive',\n  args: {\n    status: 'incomplete',\n    href: '#',\n  },\n  render: (args) => {\n    return html` <pds-step-indicator-item\n      status=${args.status}\n      href=${args.href}\n      interactive\n    >\n      <span>Step item</span>\n    </pds-step-indicator-item>`;\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CurrentNotInteractive",
          "declaration": {
            "name": "CurrentNotInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CurrentInteractive",
          "declaration": {
            "name": "CurrentInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CompletedNotInteractive",
          "declaration": {
            "name": "CompletedNotInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CompletedInteractive",
          "declaration": {
            "name": "CompletedInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IncompleteNotInteractive",
          "declaration": {
            "name": "IncompleteNotInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "IncompleteInteractive",
          "declaration": {
            "name": "IncompleteInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsStepIndicatorItem",
          "slots": [
            {
              "description": "The text of the step, or a link to the step",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'completed' | 'current' | 'incomplete'"
              },
              "description": "status\n- **complete** renders the step-indicator-item as a completed step\n- **current** renders the step-indicator-item as the current step\n- **incomplete** renders the step-indicator-item as an incomplete step",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "href",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "active\nThis indicates the user is viewing this step",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "inverted\nTODO: convert this to \"variant\" - this will be a breaking change",
              "attribute": "inverted"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "completedCircleTemplate"
            },
            {
              "kind": "method",
              "name": "currentCircleTemplate"
            },
            {
              "kind": "method",
              "name": "incompleteCircleTemplate"
            },
            {
              "kind": "method",
              "name": "circleTemplate"
            },
            {
              "kind": "method",
              "name": "stepTextTemplate"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "a custom event dispatched on click",
              "name": "pds-step-indicator-item-click"
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "'completed' | 'current' | 'incomplete'"
              },
              "description": "status\n- **complete** renders the step-indicator-item as a completed step\n- **current** renders the step-indicator-item as the current step\n- **incomplete** renders the step-indicator-item as an incomplete step",
              "fieldName": "status"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "href",
              "fieldName": "href"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "active\nThis indicates the user is viewing this step",
              "fieldName": "active"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "inverted\nTODO: convert this to \"variant\" - this will be a breaking change",
              "fieldName": "inverted"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A step indicator item",
          "tagName": "pds-step-indicator-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsStepIndicatorItem",
          "declaration": {
            "name": "PdsStepIndicatorItem",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-step-indicator-item",
          "declaration": {
            "name": "PdsStepIndicatorItem",
            "module": "packages/web-components/src/lib/components/step-indicator-item/step-indicator-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator/step-indicator.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Horizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal interactive',\n  args: {\n    interactive: true,\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Vertical",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Vertical',\n  args: {\n    variant: 'vertical',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "VerticalInteractive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Vertical interactive',\n  args: {\n    variant: 'vertical',\n    interactive: true,\n  },\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal inverted',\n  args: {\n    inverted: true,\n  },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HorizontalInteractiveInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Horizontal interactive inverted',\n  args: {\n    interactive: true,\n    inverted: true,\n  },\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "PreviousStepActive",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Previous step active',\n  parameters: {\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n  render() {\n    return html`<pds-step-indicator variant=\"horizontal\" interactive>\n      <pds-step-indicator-item status=\"completed\" href=\"#\" active>\n        Step one\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"current\" href=\"#\">\n        Step two is longer and wraps to the second line\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"incomplete\">\n        <span>Step three</span>\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"incomplete\">\n        <span>Step four</span>\n      </pds-step-indicator-item>\n    </pds-step-indicator>`;\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "PreviousStepActiveInverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Previous step active inverted',\n  parameters: {\n    backgrounds: { default: 'BrandXStrong' },\n    actions: {\n      handles: ['pds-step-indicator-item-click'],\n    },\n  },\n  render() {\n    return html`<pds-step-indicator variant=\"horizontal\" interactive inverted>\n      <pds-step-indicator-item status=\"completed\" href=\"#\" active>\n        Step one\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"current\" href=\"#\">\n        Step two is longer and wraps to the second line\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"incomplete\">\n        <span>Step three</span>\n      </pds-step-indicator-item>\n      <pds-step-indicator-item status=\"incomplete\">\n        <span>Step four</span>\n      </pds-step-indicator-item>\n    </pds-step-indicator>`;\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalInteractive",
          "declaration": {
            "name": "HorizontalInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Vertical",
          "declaration": {
            "name": "Vertical",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "VerticalInteractive",
          "declaration": {
            "name": "VerticalInteractive",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalInverted",
          "declaration": {
            "name": "HorizontalInverted",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalInteractiveInverted",
          "declaration": {
            "name": "HorizontalInteractiveInverted",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PreviousStepActive",
          "declaration": {
            "name": "PreviousStepActive",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "PreviousStepActiveInverted",
          "declaration": {
            "name": "PreviousStepActiveInverted",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/step-indicator/step-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsStepIndicator",
          "slots": [
            {
              "description": "default Contains the step indicator items, restricted to pds-step-indicator-item element",
              "name": "@slot"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "variant\n- **horizontal** renders the step-indicator horizontal on large screens and up\n- **vertical** renders the step-indicator always vertical",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "interactive",
              "attribute": "interactive"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "inverted",
              "attribute": "inverted"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listTemplate"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "variant\n- **horizontal** renders the step-indicator horizontal on large screens and up\n- **vertical** renders the step-indicator always vertical",
              "fieldName": "variant"
            },
            {
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "interactive",
              "fieldName": "interactive"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "inverted",
              "fieldName": "inverted"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A step indicator",
          "tagName": "pds-step-indicator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsStepIndicator",
          "declaration": {
            "name": "PdsStepIndicator",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-step-indicator",
          "declaration": {
            "name": "PdsStepIndicator",
            "module": "packages/web-components/src/lib/components/step-indicator/step-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/support-heading/support-heading.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    headingTagName: 'h2',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default small',\n  args: {\n    headingVariant: 'meta-sm',\n    headingTagName: 'h2',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Inverted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted',\n  args: {\n    inverted: true,\n    headingTagName: 'h2',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "InvertedSmall",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Inverted small',\n  args: {\n    headingVariant: 'meta-sm',\n    inverted: true,\n    headingTagName: 'h2',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Styled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Styled',\n  args: {\n    headingVariant: 'headline-default',\n    headingTagName: 'h2',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultSmall",
          "declaration": {
            "name": "DefaultSmall",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inverted",
          "declaration": {
            "name": "Inverted",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InvertedSmall",
          "declaration": {
            "name": "InvertedSmall",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Styled",
          "declaration": {
            "name": "Styled",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/support-heading/support-heading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSupportHeading",
          "members": [
            {
              "kind": "field",
              "name": "headingVariant",
              "type": {
                "text": "'meta-default' | 'meta-sm' | 'headline-default'"
              },
              "default": "'meta-default'",
              "description": "Heading variant\n- **meta-default** renders a <pds-heading> with meta text variant capitalized\n- **meta-sm** renders a <pds-heading> with smaller meta text variant capitalized\n- **headline-default** renders a <pds-heading> sentence case and bold with blue border and light blue offset background",
              "attribute": "headingVariant"
            },
            {
              "kind": "field",
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "inverted"
            },
            {
              "kind": "field",
              "name": "headingTagName",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
              },
              "attribute": "headingTagName"
            },
            {
              "kind": "method",
              "name": "headingLevel"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "headingVariant",
              "type": {
                "text": "'meta-default' | 'meta-sm' | 'headline-default'"
              },
              "default": "'meta-default'",
              "description": "Heading variant\n- **meta-default** renders a <pds-heading> with meta text variant capitalized\n- **meta-sm** renders a <pds-heading> with smaller meta text variant capitalized\n- **headline-default** renders a <pds-heading> sentence case and bold with blue border and light blue offset background",
              "fieldName": "headingVariant"
            },
            {
              "name": "inverted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "inverted"
            },
            {
              "name": "headingTagName",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
              },
              "fieldName": "headingTagName"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "pds-support-heading",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSupportHeading",
          "declaration": {
            "name": "PdsSupportHeading",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-support-heading",
          "declaration": {
            "name": "PdsSupportHeading",
            "module": "packages/web-components/src/lib/components/support-heading/support-heading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/table/table.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/table/table.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: { nestedTableObject: tableBasic },\n}"
        },
        {
          "kind": "variable",
          "name": "TableStripedEven",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Striped even',\n  args: {\n    striped: 'even',\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableStripedOdd",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Striped odd',\n  args: {\n    striped: 'odd',\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithoutBorder",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Without border',\n  args: {\n    removeBorder: true,\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithStickyHeader",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Sticky header',\n  args: {\n    stickyHeader: true,\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithStickyColumn",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Sticky column',\n  args: {\n    stickyColumn: true,\n    nestedTableObject: tableExtraColumns,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithFixedHeight",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Fixed height',\n  args: {\n    fixedHeight: '300px',\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithFixedHeightAndStickyHeader",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Fixed height and sticky header',\n  args: {\n    stickyHeader: true,\n    fixedHeight: '300px',\n    nestedTableObject: tableBasic,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TableWithFixedHeightAndStickyHeaderAndStickyColumn",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Fixed height and sticky header and sticky column',\n  args: {\n    stickyColumn: true,\n    stickyHeader: true,\n    fixedHeight: '300px',\n    nestedTableObject: tableExtraColumns,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ExpandableRow",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Expandable row',\n  args: { nestedTableObject: tableExpandable },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Axe can't see the colors of the hidden elements, so it fails on them.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HoverableRows",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hoverable rows',\n  args: {\n    hoverableRows: true,\n    nestedTableObject: tableBasic,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableStripedEven",
          "declaration": {
            "name": "TableStripedEven",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableStripedOdd",
          "declaration": {
            "name": "TableStripedOdd",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithoutBorder",
          "declaration": {
            "name": "TableWithoutBorder",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithStickyHeader",
          "declaration": {
            "name": "TableWithStickyHeader",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithStickyColumn",
          "declaration": {
            "name": "TableWithStickyColumn",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithFixedHeight",
          "declaration": {
            "name": "TableWithFixedHeight",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithFixedHeightAndStickyHeader",
          "declaration": {
            "name": "TableWithFixedHeightAndStickyHeader",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TableWithFixedHeightAndStickyHeaderAndStickyColumn",
          "declaration": {
            "name": "TableWithFixedHeightAndStickyHeaderAndStickyColumn",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpandableRow",
          "declaration": {
            "name": "ExpandableRow",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HoverableRows",
          "declaration": {
            "name": "HoverableRows",
            "module": "packages/web-components/src/lib/components/table/table.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/table/table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTable",
          "members": [
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "'odd' | 'even' | 'default'"
              },
              "default": "'default'",
              "description": "Boolean to determine if the table should have \"zebra\" striping",
              "attribute": "striped"
            },
            {
              "kind": "field",
              "name": "expandAllOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to expand all rows on a collapsible table on initial page load",
              "attribute": "expandAllOnLoad"
            },
            {
              "kind": "field",
              "name": "removeBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to remove the borders and rounded corners of the table.  Default is false.",
              "attribute": "removeBorder"
            },
            {
              "kind": "field",
              "name": "hoverableRows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to add hoverable rows functionality to the table.  Default is false.",
              "attribute": "hoverableRows"
            },
            {
              "kind": "field",
              "name": "stickyHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the header row to sticky, default is false.\n\nSticky row header will stick to the top of the page when scrolled away unless the table is fixed height, in which case it will stick to the top of the scrollable container.",
              "attribute": "stickyHeader"
            },
            {
              "kind": "field",
              "name": "stickyColumn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the first column to sticky, default is false.",
              "attribute": "stickyColumn"
            },
            {
              "kind": "field",
              "name": "fixedHeight",
              "type": {
                "text": "string"
              },
              "description": "String to set a fixed height for the table. Example values: 300px, .25vh, 25%",
              "attribute": "fixedHeight"
            },
            {
              "kind": "field",
              "name": "table",
              "type": {
                "text": "HTMLTableElement"
              }
            },
            {
              "kind": "method",
              "name": "childNodeObserverCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "currentTable",
                  "type": {
                    "text": "PdsElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleCollapseAll"
            },
            {
              "kind": "method",
              "name": "handleExpandAll"
            },
            {
              "kind": "method",
              "name": "getRandomId",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "adjustKeyboardFocus",
              "parameters": [
                {
                  "name": "wrapper",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Set the child elements to be focusable or remove them from the tab order, based on if they're shown/hidden"
            },
            {
              "kind": "method",
              "name": "setCssCustomProps"
            },
            {
              "kind": "method",
              "name": "applyScrollClasses",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "resizedCallback"
            },
            {
              "kind": "method",
              "name": "applyClasses",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply the pds class to the table and its elements inside"
            },
            {
              "kind": "method",
              "name": "prepareExpandableRows",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "{ initialLoad: boolean }"
                  }
                }
              ],
              "description": "Add classes, attributes and trigger buttons to the expandable rows"
            },
            {
              "kind": "method",
              "name": "createTriggerButton",
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "parameters": [
                {
                  "name": "region",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getToggleChevron",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleRegionCollapse",
              "parameters": [
                {
                  "name": "region",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "triggerButton",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resetRegionHeight",
              "parameters": [
                {
                  "name": "region",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "triggerButton",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "wrapper",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Can be fired on the .pds-c-table__wrapper element if you need to manually collapse all rows",
              "name": "pds-table-collapse-all"
            },
            {
              "description": "Can be fired on the .pds-c-table__wrapper element if you need to manually expand all rows",
              "name": "pds-table-expand-all"
            },
            {
              "description": "Can be fired on the .pds-c-table__wrapper element if you need to manually state that the HTML has changed",
              "name": "change"
            },
            {
              "description": "Fired after the change event has been triggered",
              "name": "pds-table-changed"
            }
          ],
          "attributes": [
            {
              "name": "striped",
              "type": {
                "text": "'odd' | 'even' | 'default'"
              },
              "default": "'default'",
              "description": "Boolean to determine if the table should have \"zebra\" striping",
              "fieldName": "striped"
            },
            {
              "name": "expandAllOnLoad",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to expand all rows on a collapsible table on initial page load",
              "fieldName": "expandAllOnLoad"
            },
            {
              "name": "removeBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to remove the borders and rounded corners of the table.  Default is false.",
              "fieldName": "removeBorder"
            },
            {
              "name": "hoverableRows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to add hoverable rows functionality to the table.  Default is false.",
              "fieldName": "hoverableRows"
            },
            {
              "name": "stickyHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the header row to sticky, default is false.\n\nSticky row header will stick to the top of the page when scrolled away unless the table is fixed height, in which case it will stick to the top of the scrollable container.",
              "fieldName": "stickyHeader"
            },
            {
              "name": "stickyColumn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to set the first column to sticky, default is false.",
              "fieldName": "stickyColumn"
            },
            {
              "name": "fixedHeight",
              "type": {
                "text": "string"
              },
              "description": "String to set a fixed height for the table. Example values: 300px, .25vh, 25%",
              "fieldName": "fixedHeight"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A table wrapper that accepts table as its children",
          "tagName": "pds-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTable",
          "declaration": {
            "name": "PdsTable",
            "module": "packages/web-components/src/lib/components/table/table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-table",
          "declaration": {
            "name": "PdsTable",
            "module": "packages/web-components/src/lib/components/table/table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/switch/switch.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/switch/switch.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/Switch',\n  component: 'pds-switch',\n  tags: ['autodocs'],\n  parameters: {\n    actions: {\n      handles: [\n        'pds-switch-toggle-on',\n        'pds-switch-toggle-off',\n        'pds-switch-blur',\n        'pds-switch-focus',\n      ],\n    },\n  },\n  argTypes: {\n    // properties we want to remove from the storybook table\n    required: {\n      table: {\n        disable: true,\n      },\n    },\n    label: {\n      table: {\n        category: 'attributes',\n      },\n      description:\n        ' The label of the form field. Must be plain text. If label requires additional markup (e.g., superscript), then use the label slot instead.',\n      control: 'text',\n    },\n    'slot:label': {\n      name: 'label',\n      control: 'text',\n      table: {\n        category: 'slots',\n      },\n      description:\n        'Use this slot instead of the label property, if the label requires additional markup.',\n    },\n    helpText: {\n      table: {\n        disable: true,\n      },\n    },\n    errorMessage: {\n      table: {\n        disable: true,\n      },\n    },\n    readonly: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n  render: (args) =>\n    html`<pds-switch\n      name=\"${args.name || nothing}\"\n      label=\"${args.label || nothing}\"\n      ?disabled=${args.disabled}\n      ?checked=${args.checked}\n      ?hideLabel=\"${args.hideLabel}\"\n      ?labelRight=\"${args.labelRight}\"\n    ></pds-switch>`,\n}"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    label: 'This is a switch',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Activeted",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Activated',\n  args: {\n    checked: true,\n    name: 'activeSwitch',\n    label: 'This is a active switch',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Disabled',\n  args: {\n    disabled: true,\n    name: 'disabledSwitch',\n    label: 'This is a disabled switch',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ActiveDisabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Active disabled',\n  args: {\n    disabled: true,\n    checked: true,\n    name: 'DisabledActiveSwitch',\n    label: 'This is a disabled active switch',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Label',\n  args: {\n    label: 'Switch label',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "LabelRight",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Label right',\n  args: {\n    labelRight: true,\n    label: 'Switch label',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Activeted",
          "declaration": {
            "name": "Activeted",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ActiveDisabled",
          "declaration": {
            "name": "ActiveDisabled",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "LabelRight",
          "declaration": {
            "name": "LabelRight",
            "module": "packages/web-components/src/lib/components/switch/switch.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsSwitch",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additional markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "labelRight",
              "type": {
                "text": "Boolean"
              },
              "default": "false",
              "description": "switch can have a right label.",
              "attribute": "labelRight"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates whether the switch is toggled.",
              "attribute": "checked"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "An event dispatched on toggling the switch on",
              "name": "pds-switch-toggle-on"
            },
            {
              "description": "An event dispatched on toggling the switch off",
              "name": "pds-switch-toggle-off"
            },
            {
              "description": "An event dispatched on switch blur",
              "name": "pds-switch-blur"
            },
            {
              "description": "An event dispatched on switch focus",
              "name": "pds-switch-focus"
            }
          ],
          "attributes": [
            {
              "name": "labelRight",
              "type": {
                "text": "Boolean"
              },
              "default": "false",
              "description": "switch can have a right label.",
              "fieldName": "labelRight"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates whether the switch is toggled.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The switch is a selection control that allows users to turn preferences or settings \"on or off\".",
          "tagName": "pds-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsSwitch",
          "declaration": {
            "name": "PdsSwitch",
            "module": "packages/web-components/src/lib/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-switch",
          "declaration": {
            "name": "PdsSwitch",
            "module": "packages/web-components/src/lib/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tag/tag.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tag/tag.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/tag/tag.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/tag/tag.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTag",
          "slots": [
            {
              "description": "This slot holds the tag contents",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "attribute": "href"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on click",
              "name": "pds-tag-click"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "'#'",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component renders a tag component which is an anchor element",
          "tagName": "pds-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTag",
          "declaration": {
            "name": "PdsTag",
            "module": "packages/web-components/src/lib/components/tag/tag.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-tag",
          "declaration": {
            "name": "PdsTag",
            "module": "packages/web-components/src/lib/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-input/text-input.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-input/text-input.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Basic",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'basicTextInput',\n    label: 'This is the label',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Required",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'requiredInput',\n    label: 'This is the label',\n    required: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultValue",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default value',\n  args: {\n    name: 'defaultValueInput',\n    label: 'This is the label',\n    value: 'input value',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'errorInput',\n    label: 'This is the label',\n    errorMessage: 'Error message goes here.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Help text',\n  args: {\n    name: 'HelpTextInput',\n    label: 'This is the label',\n    helpText: 'This is the help text.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'disabledInput',\n    label: 'This is the label',\n    helpText: 'This is the help text.',\n    disabled: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Disabled inputs should have less color contrast, but axe doesn't like it.\n            //\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Readonly",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'readonlyInput',\n    label: 'This is the label',\n    value: 'input value',\n    readonly: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'smallInput',\n    label: 'This is the label',\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    name: 'hiddenLabelInput',\n    label: 'This is the label',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "NumberInput",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Number input',\n  args: {\n    name: 'numberInput',\n    label: 'This is the label',\n    type: 'number',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Prefixed",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'prefixedInput',\n    label: 'This is the label',\n  },\n  render: (args) =>\n    html`<pds-text-input name=\"${args.name}\" label=\"${args.label}\"\n      ><span slot=\"prefix\">$</span></pds-text-input\n    >`,\n}"
        },
        {
          "kind": "variable",
          "name": "Suffixed",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'suffixedInput',\n    label: 'This is the label',\n  },\n  render: (args) =>\n    html`<pds-text-input name=\"${args.name}\" label=\"${args.label}\"\n      ><span slot=\"suffix\"\n        ><pds-icon-search\n          color=${themedefault.SemanticBorderInteractiveDefault}\n        ></pds-icon-search></span\n    ></pds-text-input>`,\n}"
        },
        {
          "kind": "variable",
          "name": "SSNMask",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'SSN mask',\n  args: {\n    name: 'ssnMask',\n    label: 'Please enter a valid social security number.',\n    maskType: 'ssn',\n    value: '123456789',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "TaxId",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Tax ID',\n  args: {\n    name: 'taxId',\n    label: 'Please enter a valid tax identification number.',\n    maskType: 'tax-id',\n    value: '123456789',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultValue",
          "declaration": {
            "name": "DefaultValue",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HelpText",
          "declaration": {
            "name": "HelpText",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Readonly",
          "declaration": {
            "name": "Readonly",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NumberInput",
          "declaration": {
            "name": "NumberInput",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Prefixed",
          "declaration": {
            "name": "Prefixed",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Suffixed",
          "declaration": {
            "name": "Suffixed",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SSNMask",
          "declaration": {
            "name": "SSNMask",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "TaxId",
          "declaration": {
            "name": "TaxId",
            "module": "packages/web-components/src/lib/components/text-input/text-input.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-input/text-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTextInput",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additonal markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additonal markup.",
              "name": "help-text"
            },
            {
              "description": "Use this slot to add an element to the beginning of the input field.",
              "name": "prefix"
            },
            {
              "description": "Use this slot to add an element to the end of the input field.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the form field.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the input\n\nNOTE: This is NOT the HTML size attribute that controls the width of the input.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'password' | 'search' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "Standard input type attribute.\nSee [HTML attribute: type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n\n- **email** - use for inputs that take an email\n- **number** - use for inputs that take number values\n- **password** - use for inputs that take passwords\n- **search** - use for inputs used for searches\n- **text** - use for inputs that take alphanumeric text\n- **url** - use for inputs that take urls\n\nExplicitly exclude the following input types:\n\n- **button** - use PdsButton component with `type=\"button\"`\n- **checkbox** - use the PdsCheckbox component\n- **color**\n- **date**\n- **datetime-local**\n- **file**\n- **hidden** - not needed for a design system\n- **tel** - use the PDSPhoneNumberInput instead\n- **image**\n- **month**\n- **radio** - use the PdsRadioGroup component\n- **range**\n- **reset** - use the PdsButton component with `type=\"reset\"`\n- **submit** - use the PdsButton component with `type=\"submit\"`\n- **time**\n- **week**",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input min attribute.\nSee [HTML attribute: min](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input max attribute.\nSee [HTML attribute: max](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input minlength attribute.\nSee [HTML attribute: minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)",
              "attribute": "minLength"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "attribute": "maxLength"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Standard input pattern attribute.\nSee [HTML attribute: pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input step attribute.\nSee [HTML attribute: step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "| 'none'\n    | 'text'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url' | undefined"
              },
              "description": "Standard input inputmode attribute.\nSee [HTML attribute: inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/inputmode)",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "| 'off'\n    | 'on'\n    | 'name'\n    | 'honorific-prefix'\n    | 'given-name'\n    | 'additional-name'\n    | 'family-name'\n    | 'honorific-suffix'\n    | 'nickname'\n    | 'email'\n    | 'username'\n    | 'new-password'\n    | 'current-password'\n    | 'one-time-code'\n    | 'organization-title'\n    | 'organization'\n    | 'street-address'\n    | 'address-line1'\n    | 'address-line2'\n    | 'address-line3'\n    | 'address-level4'\n    | 'address-level3'\n    | 'address-level2'\n    | 'address-level1'\n    | 'country'\n    | 'country-name'\n    | 'postal-code'\n    | 'cc-name'\n    | 'cc-given-name'\n    | 'cc-additional-name'\n    | 'cc-family-name'\n    | 'cc-number'\n    | 'cc-exp'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-csc'\n    | 'cc-type'\n    | 'transaction-currency'\n    | 'transaction-amount'\n    | 'language'\n    | 'bday'\n    | 'bday-day'\n    | 'bday-month'\n    | 'bday-year'\n    | 'sex'\n    | 'impp'\n    | 'url'\n    | 'photo'"
              },
              "description": "Standard input autocomplete attribute.\nSee [HTML attribute: autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\nNote: this explicitly excludes the tel autocomplete values since type tel is not a valid option for this component.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "maskType",
              "type": {
                "text": "'ssn' | 'tax-id' | undefined"
              },
              "description": "The masking pattern to apply to the input field.\n\n- **ssn**\n- **tax-id**\n\nIf using `maskType`, then `type` property must be set to \"text\".",
              "attribute": "maskType"
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createMask",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "maskType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-text-input-change",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on change"
            },
            {
              "name": "pds-text-input-input",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on input"
            },
            {
              "name": "pds-text-input-blur",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on blur"
            },
            {
              "name": "pds-text-input-focus",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on focus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the form field.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the input\n\nNOTE: This is NOT the HTML size attribute that controls the width of the input.",
              "fieldName": "size"
            },
            {
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'password' | 'search' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "Standard input type attribute.\nSee [HTML attribute: type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n\n- **email** - use for inputs that take an email\n- **number** - use for inputs that take number values\n- **password** - use for inputs that take passwords\n- **search** - use for inputs used for searches\n- **text** - use for inputs that take alphanumeric text\n- **url** - use for inputs that take urls\n\nExplicitly exclude the following input types:\n\n- **button** - use PdsButton component with `type=\"button\"`\n- **checkbox** - use the PdsCheckbox component\n- **color**\n- **date**\n- **datetime-local**\n- **file**\n- **hidden** - not needed for a design system\n- **tel** - use the PDSPhoneNumberInput instead\n- **image**\n- **month**\n- **radio** - use the PdsRadioGroup component\n- **range**\n- **reset** - use the PdsButton component with `type=\"reset\"`\n- **submit** - use the PdsButton component with `type=\"submit\"`\n- **time**\n- **week**",
              "fieldName": "type"
            },
            {
              "name": "min",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input min attribute.\nSee [HTML attribute: min](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min)",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input max attribute.\nSee [HTML attribute: max](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max)",
              "fieldName": "max"
            },
            {
              "name": "minLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input minlength attribute.\nSee [HTML attribute: minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength)",
              "fieldName": "minLength"
            },
            {
              "name": "maxLength",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "fieldName": "maxLength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Standard input pattern attribute.\nSee [HTML attribute: pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)",
              "fieldName": "pattern"
            },
            {
              "name": "step",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Standard input step attribute.\nSee [HTML attribute: step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)",
              "fieldName": "step"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "| 'none'\n    | 'text'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url' | undefined"
              },
              "description": "Standard input inputmode attribute.\nSee [HTML attribute: inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/inputmode)",
              "fieldName": "inputmode"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "| 'off'\n    | 'on'\n    | 'name'\n    | 'honorific-prefix'\n    | 'given-name'\n    | 'additional-name'\n    | 'family-name'\n    | 'honorific-suffix'\n    | 'nickname'\n    | 'email'\n    | 'username'\n    | 'new-password'\n    | 'current-password'\n    | 'one-time-code'\n    | 'organization-title'\n    | 'organization'\n    | 'street-address'\n    | 'address-line1'\n    | 'address-line2'\n    | 'address-line3'\n    | 'address-level4'\n    | 'address-level3'\n    | 'address-level2'\n    | 'address-level1'\n    | 'country'\n    | 'country-name'\n    | 'postal-code'\n    | 'cc-name'\n    | 'cc-given-name'\n    | 'cc-additional-name'\n    | 'cc-family-name'\n    | 'cc-number'\n    | 'cc-exp'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-csc'\n    | 'cc-type'\n    | 'transaction-currency'\n    | 'transaction-amount'\n    | 'language'\n    | 'bday'\n    | 'bday-day'\n    | 'bday-month'\n    | 'bday-year'\n    | 'sex'\n    | 'impp'\n    | 'url'\n    | 'photo'"
              },
              "description": "Standard input autocomplete attribute.\nSee [HTML attribute: autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\nNote: this explicitly excludes the tel autocomplete values since type tel is not a valid option for this component.",
              "fieldName": "autocomplete"
            },
            {
              "name": "maskType",
              "type": {
                "text": "'ssn' | 'tax-id' | undefined"
              },
              "description": "The masking pattern to apply to the input field.\n\n- **ssn**\n- **tax-id**\n\nIf using `maskType`, then `type` property must be set to \"text\".",
              "fieldName": "maskType"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The Principal text input component",
          "tagName": "pds-text-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTextInput",
          "declaration": {
            "name": "PdsTextInput",
            "module": "packages/web-components/src/lib/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-text-input",
          "declaration": {
            "name": "PdsTextInput",
            "module": "packages/web-components/src/lib/components/text-input/text-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-area/text-area.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-area/text-area.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Basic",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'basicTextArea',\n    label: 'A sample basic PDS text area',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Required",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'requiredTextArea',\n    label: 'A sample required PDS text area',\n    required: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Error",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'errorTextArea',\n    label: 'A sample basic PDS text area with error message',\n    errorMessage: 'Error message goes here.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HelpText",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Help text',\n  args: {\n    name: 'helpTextArea',\n    label: 'A sample basic PDS text area with help text',\n    helpText: 'This is the help text.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'disabledTextArea',\n    label: 'A sample disabled PDS text area',\n    disabled: true,\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            // Disabled textareas should have less color contrast, but axe doesn't like it.\n            // @link https://dequeuniversity.com/rules/axe/4.6/color-contrast\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Readonly",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Readonly',\n  args: {\n    name: 'readonlyTextArea',\n    label:\n      'A sample readonly PDS text area with default text set via \"value\" attribute',\n    readonly: true,\n    value:\n      'Set the value attribute on PDS text area to render default text. The default text is fully editable, unless you set the \"readonly\" or \"disabled\" attributes to TRUE.',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Small",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    name: 'smallTextArea',\n    label: 'A sample small PDS text area',\n    size: 'sm',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HiddenLabel",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Hidden label',\n  args: {\n    name: 'hiddenLabelTextArea',\n    label: 'A sample hidden label PDS text area',\n    hideLabel: true,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ResizeSmart",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Resize smart',\n  args: {\n    name: 'resizeSmart',\n    label: 'A sample PDS text area with resize of \"smart\"',\n    resize: 'smart',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ResizeManual",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Resize manual',\n  args: {\n    name: 'resizeManual',\n    label: 'A sample PDS text area with resize of \"manual\"',\n    resize: 'manual',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ResizeVertical",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Resize vertical',\n  args: {\n    name: 'resizeVertical',\n    label: 'A sample PDS text area with resize of \"vertical\"',\n    resize: 'vertical',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "ResizeNone",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Resize none',\n  args: {\n    name: 'resizeNone',\n    label: 'A sample PDS text area with resize of \"none\"',\n    resize: 'none',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Required",
          "declaration": {
            "name": "Required",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HelpText",
          "declaration": {
            "name": "HelpText",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Readonly",
          "declaration": {
            "name": "Readonly",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Small",
          "declaration": {
            "name": "Small",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HiddenLabel",
          "declaration": {
            "name": "HiddenLabel",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ResizeSmart",
          "declaration": {
            "name": "ResizeSmart",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ResizeManual",
          "declaration": {
            "name": "ResizeManual",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ResizeVertical",
          "declaration": {
            "name": "ResizeVertical",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ResizeNone",
          "declaration": {
            "name": "ResizeNone",
            "module": "packages/web-components/src/lib/components/text-area/text-area.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-area/text-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTextArea",
          "slots": [
            {
              "description": "Use this slot instead of the label property, if the label requires additional markup.",
              "name": "label"
            },
            {
              "description": "Use this slot if markup should be inserted after the label.",
              "name": "label-after"
            },
            {
              "description": "Use this slot instead of the helpText property, if the help text requires additional markup.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "description": "The default text value.\n\nThere is no HTML \"value\" attribute on the native `<textarea>` element.\nSet the \"value\" on the `<pds-text-area>` web component to render default text content.\nThe default text is wrapped in the `<textarea>` tags, ie `<textarea>Default text content.</textarea>`.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the textarea\n\nNOTE: This is NOT the HTML size attribute that controls the width of the textarea.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Standard textarea minlength attribute.\nSee [HTML attribute: minlenth](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlenth)",
              "attribute": "minLength"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Standard textarea maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "attribute": "maxLength"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'smart' | 'manual' | 'horizontal' | 'vertical' | 'none'"
              },
              "default": "'smart'",
              "description": "Resize controls.\nSet to an allowed value of 'smart', 'manual', 'horizontal', 'vertical' or 'none'.\nThe default value is 'smart' which automatically resizes based on content height.\nWorks via CSS style rule that targets the attribute name and value.\nSee [Controlling whether a textarea is resizable](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#controlling_whether_a_textarea_is_resizable)\n- **smart** causes automatic resizing of height based on content entry\n- **manual** allows for resizing in all directions\n- **horizontal** allows for resizing horizontally\n- **vertical** allows for resizing vertically\n- **none** disables resizing",
              "attribute": "resize"
            },
            {
              "kind": "method",
              "name": "updateField",
              "privacy": "protected",
              "description": "update the actual field's value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSmartHeight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "customSetterSetAttribute",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean | string | number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "attribute": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "attribute": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "attribute": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "attribute": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the field's value to it's value attribute.\nThis gets called when `form.reset()` is invoked\n(typically by clicking a type=\"reset\" button).",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInternalValidity",
              "description": "Calls `setValidity` on the element internals\nwith the appropriate options depending on whether\nthe element has an `errorMessage` or not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasHelpText",
              "description": "Determines whether the element includes `helpText`",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAriaDescribedBy",
              "description": "Gets the appropriate `aria-describedby` value\nbased on the existence of `helpText` and `errorMessage`.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFieldId",
              "description": "Gets the \"fieldId\" value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "verifyLabel",
              "description": "Determines whether the element has a label.\nConsole logs an error, if not.",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for the label\nthat is tied to the form field via the `for`\nattribute and adds the required indicator,\nif applicable.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "helpTextTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for help text,\nif the element has help text.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "errorMessageTemplate",
              "privacy": "protected",
              "description": "Creates an HTML template for error message,\nif the `errorMessage` prop is defined.\nAdds an `id` that is included in the form field's\naria-describedby attribute.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "pds-text-area-change",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on change"
            },
            {
              "name": "pds-text-area-input",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on input"
            },
            {
              "name": "pds-text-area-blur",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on blur"
            },
            {
              "name": "pds-text-area-focus",
              "type": {
                "text": "Event"
              },
              "description": "an event dispatched on focus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The default text value.\n\nThere is no HTML \"value\" attribute on the native `<textarea>` element.\nSet the \"value\" on the `<pds-text-area>` web component to render default text content.\nThe default text is wrapped in the `<textarea>` tags, ie `<textarea>Default text content.</textarea>`.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'default'"
              },
              "default": "'default'",
              "description": "The size of the component.\n\n- **default**\n- **sm** renders a the small version of the textarea\n\nNOTE: This is NOT the HTML size attribute that controls the width of the textarea.",
              "fieldName": "size"
            },
            {
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Standard textarea minlength attribute.\nSee [HTML attribute: minlenth](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlenth)",
              "fieldName": "minLength"
            },
            {
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Standard textarea maxlength attribute.\nSee [HTML attribute: maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength)",
              "fieldName": "maxLength"
            },
            {
              "name": "resize",
              "type": {
                "text": "'smart' | 'manual' | 'horizontal' | 'vertical' | 'none'"
              },
              "default": "'smart'",
              "description": "Resize controls.\nSet to an allowed value of 'smart', 'manual', 'horizontal', 'vertical' or 'none'.\nThe default value is 'smart' which automatically resizes based on content height.\nWorks via CSS style rule that targets the attribute name and value.\nSee [Controlling whether a textarea is resizable](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#controlling_whether_a_textarea_is_resizable)\n- **smart** causes automatic resizing of height based on content entry\n- **manual** allows for resizing in all directions\n- **horizontal** allows for resizing horizontally\n- **vertical** allows for resizing vertically\n- **none** disables resizing",
              "fieldName": "resize"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the form field.\nMust be plain text.\nIf label requires additional markup (e.g., superscript),\nthen use the label slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the label screen-reader-only and visually hidden.\nHiding the label is **strongly discouraged** and should only\nbe used when descriptive text exists elsewhere on the page.",
              "fieldName": "hideLabel",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the form field. This is a **required** property.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "fieldId",
              "type": {
                "text": "string | undefined"
              },
              "description": "The id of the form field.\n\nOverrides the auto-generated id.",
              "fieldName": "fieldId",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the form field is readonly.",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "helpText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The additional context used to assist the\nuser in filling out the form field.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message to display when the form\nfield is in an invalid state.",
              "fieldName": "errorMessage",
              "inheritedFrom": {
                "name": "PdsFormElement",
                "module": "packages/web-components/src/lib/components/pds-form-element/PdsFormElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsFormElement",
            "module": "/packages/web-components/src/lib/components/pds-form-element/PdsFormElement"
          },
          "summary": "The Principal text area component",
          "tagName": "pds-text-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTextArea",
          "declaration": {
            "name": "PdsTextArea",
            "module": "packages/web-components/src/lib/components/text-area/text-area.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-text-area",
          "declaration": {
            "name": "PdsTextArea",
            "module": "packages/web-components/src/lib/components/text-area/text-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-passage/text-passage.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-passage/text-passage.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "SmallLineLength",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Small linelength',\n  args: { lineLength: 'sm' },\n}"
        },
        {
          "kind": "variable",
          "name": "DefaultNoCap",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Remove linelength',\n  args: {\n    lineLength: 'none',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SmallLineLength",
          "declaration": {
            "name": "SmallLineLength",
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultNoCap",
          "declaration": {
            "name": "DefaultNoCap",
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/text-passage/text-passage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTextPassage",
          "slots": [
            {
              "description": "The content of the text passage",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "lineLength",
              "type": {
                "text": "'sm' | 'none' | 'default'"
              },
              "default": "'default'",
              "description": "**default** default linelength cap\n- **sm** small linelength cap\n- **none** no linelength cap",
              "attribute": "lineLength"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders the text-passage with default body text size\n- **sm** renders the text-passage with body text smaller than the default\n- **lg** renders the text-passage with body text larger than the default",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "lineLength",
              "type": {
                "text": "'sm' | 'none' | 'default'"
              },
              "default": "'default'",
              "description": "**default** default linelength cap\n- **sm** small linelength cap\n- **none** no linelength cap",
              "fieldName": "lineLength"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'lg' | 'default'"
              },
              "default": "'default'",
              "description": "**default** renders the text-passage with default body text size\n- **sm** renders the text-passage with body text smaller than the default\n- **lg** renders the text-passage with body text larger than the default",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A wrapping element to help apply text styles",
          "tagName": "pds-text-passage",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTextPassage",
          "declaration": {
            "name": "PdsTextPassage",
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-text-passage",
          "declaration": {
            "name": "PdsTextPassage",
            "module": "packages/web-components/src/lib/components/text-passage/text-passage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tooltip/tooltip.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'default',\n  },\n  render: (args: any) =>\n    html`<br /><br /><br /><pds-tooltip\n        variant=\"${args.variant || nothing}\"\n        placement=\"${args.placement || nothing}\"\n      >\n        <pds-button\n          slot=\"trigger\"\n          variant=\"icon\"\n          size=\"sm\"\n          ariaLabel=\"This button triggers a tooltip\"\n        >\n          <pds-icon-help-circle></pds-icon-help-circle\n        ></pds-button>\n        Tooltip content</pds-tooltip\n      >`,\n}"
        },
        {
          "kind": "variable",
          "name": "SubtleTop",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle top',\n  args: {\n    variant: 'subtle',\n    placement: 'top',\n  },\n  render: (args: any) =>\n    html`<br /><br /><br /><pds-tooltip\n        variant=\"${args.variant || nothing}\"\n        placement=\"${args.placement || nothing}\"\n      >\n        <pds-button\n          slot=\"trigger\"\n          variant=\"icon\"\n          size=\"sm\"\n          ariaLabel=\"This button triggers a tooltip\"\n        >\n          <pds-icon-help-circle></pds-icon-help-circle\n        ></pds-button>\n        Tooltip content</pds-tooltip\n      >`,\n}"
        },
        {
          "kind": "variable",
          "name": "SubtleLeft",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle left',\n  args: {\n    variant: 'subtle',\n    placement: 'left',\n  },\n  render: (args: any) =>\n    html`<span style=\"margin-right: 100px;\"></span>\n      <pds-tooltip\n        variant=\"${args.variant || nothing}\"\n        placement=\"${args.placement || nothing}\"\n      >\n        <pds-button\n          slot=\"trigger\"\n          variant=\"icon\"\n          size=\"sm\"\n          ariaLabel=\"This button triggers a tooltip\"\n        >\n          <pds-icon-help-circle></pds-icon-help-circle\n        ></pds-button>\n        Tooltip</pds-tooltip\n      >`,\n}"
        },
        {
          "kind": "variable",
          "name": "SubtleRight",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle right',\n  args: {\n    variant: 'subtle',\n    placement: 'right',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "SubtleBottom",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Subtle bottom',\n  args: {\n    variant: 'subtle',\n    placement: 'bottom',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Link",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Link',\n  args: {\n    variant: 'default',\n    placement: 'bottom',\n  },\n  render: (args: any) =>\n    html`<pds-tooltip\n      variant=\"${args.variant || nothing}\"\n      placement=\"${args.placement || nothing}\"\n      ><pds-button\n        slot=\"trigger\"\n        link=\"default\"\n        ariaLabel=\"This button triggers a tooltip\"\n        >This is a button that looks like a link</pds-button\n      >Tooltip content</pds-tooltip\n    >`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SubtleTop",
          "declaration": {
            "name": "SubtleTop",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SubtleLeft",
          "declaration": {
            "name": "SubtleLeft",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SubtleRight",
          "declaration": {
            "name": "SubtleRight",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "SubtleBottom",
          "declaration": {
            "name": "SubtleBottom",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsTooltip",
          "slots": [
            {
              "description": "Provides the inner contents of the tooltip",
              "name": "default"
            },
            {
              "description": "This slot contains the element from which the tooltip is triggered",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard variant, with dark-colored tooltips.\n- **subtle** renders the subtle variant, with light-colored tooltips.",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left'"
              },
              "default": "'top'",
              "description": "Position for tooltip\n- **top** renders the tooltip at top.\n- **right** renders the tooltip at right.\n- **bottom** renders the tooltip at bottom.\n- **left** renders the tooltip at left.",
              "attribute": "placement"
            },
            {
              "kind": "method",
              "name": "createInstance"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            },
            {
              "kind": "method",
              "name": "handleToggle"
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'subtle'"
              },
              "default": "'default'",
              "description": "Style variant\n- **default** renders the standard variant, with dark-colored tooltips.\n- **subtle** renders the subtle variant, with light-colored tooltips.",
              "fieldName": "variant"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left'"
              },
              "default": "'top'",
              "description": "Position for tooltip\n- **top** renders the tooltip at top.\n- **right** renders the tooltip at right.\n- **bottom** renders the tooltip at bottom.\n- **left** renders the tooltip at left.",
              "fieldName": "placement"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "This component provides a tooltip when a user hovers or focuses on an icon",
          "tagName": "pds-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsTooltip",
          "declaration": {
            "name": "PdsTooltip",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-tooltip",
          "declaration": {
            "name": "PdsTooltip",
            "module": "packages/web-components/src/lib/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/video-player/video-player-utils-mock.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ALLOWED_TAGS_LIST",
          "type": {
            "text": "array"
          },
          "default": "[]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ALLOWED_TAGS_LIST",
          "declaration": {
            "name": "ALLOWED_TAGS_LIST",
            "module": "packages/web-components/src/lib/components/video-player/video-player-utils-mock.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/video-player/video-player-utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ALLOWED_TAGS_LIST"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ALLOWED_TAGS_LIST",
          "declaration": {
            "name": "ALLOWED_TAGS_LIST",
            "module": "packages/web-components/src/lib/components/video-player/video-player-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/video-player/video-player.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/video-player/video-player.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    videoTitle: 'This is an optional video title',\n    videoDescription:\n      '<p>This is an optional <strong>video description</strong>. It should only be added if there is also a video title.</p>',\n  },\n  parameters: {\n    actions: {\n      handles: [\n        'pds-video-player-play',\n        'pds-video-player-ended',\n        'pds-video-player-progress',\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Alt",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Alt',\n  args: { variant: 'alt', hideVideoDuration: true },\n  parameters: {\n    actions: {\n      handles: [\n        'pds-video-player-play',\n        'pds-video-player-ended',\n        'pds-video-player-progress',\n      ],\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/src/lib/components/video-player/video-player.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/src/lib/components/video-player/video-player.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Alt",
          "declaration": {
            "name": "Alt",
            "module": "packages/web-components/src/lib/components/video-player/video-player.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/src/lib/components/video-player/video-player.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PdsVideoPlayer",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'alt'"
              },
              "default": "'default'",
              "description": "Style variant\n- Default The video displays with rounded corners\n- **alt** The video displays with square corners",
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "type": {
                "text": "string"
              },
              "default": "'16:9'",
              "description": "Aspect ratio for the video to display in",
              "attribute": "aspectRatio"
            },
            {
              "kind": "field",
              "name": "videoUrl",
              "type": {
                "text": "string"
              },
              "description": "The URL to the brightcove video",
              "attribute": "videoUrl"
            },
            {
              "kind": "field",
              "name": "videoPlayerTextTracks",
              "type": {
                "text": "string"
              },
              "description": "The URL to the video transcript",
              "attribute": "videoPlayerTextTracks"
            },
            {
              "kind": "field",
              "name": "videoTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A title to display under the video; if provided, will also be used to replace the video title for screen readers",
              "attribute": "videoTitle"
            },
            {
              "kind": "field",
              "name": "videoDescription",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description to display under the video; should only be used if videoTitle is provided, and it will display between the title and transcript link\nShould be passed in as a string of HTML, sanitization is handled within PDS",
              "attribute": "videoDescription"
            },
            {
              "kind": "field",
              "name": "hideVideoDuration",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether to show the video duration beneath the video or not",
              "attribute": "hideVideoDuration"
            },
            {
              "kind": "field",
              "name": "formatDuration"
            },
            {
              "kind": "method",
              "name": "compareTimeProgress",
              "parameters": [
                {
                  "name": "percentage",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "currentTime",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "videoLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "percentageSetterFunction",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "description": "This method compares the current timestamp of a video with the total length of the video\nIt then returns a boolean so we can dispatch an event when a user gets to 25%, 50%, 75%, and 90% of a video"
            },
            {
              "kind": "field",
              "name": "retrieveVideoInformationFromUrl"
            },
            {
              "kind": "field",
              "name": "handleLoadstart"
            },
            {
              "kind": "field",
              "name": "handleTimeupdate"
            },
            {
              "kind": "field",
              "name": "handleEnded"
            },
            {
              "kind": "field",
              "name": "handlePlay"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "events": [
            {
              "description": "A custom event dispatched on playing the video",
              "name": "pds-video-player-play"
            },
            {
              "description": "A custom event dispatched on the video ending",
              "name": "pds-video-player-ended"
            },
            {
              "description": "A custom event dispatched on hitting 25%/50%/75%/90% progress milestones of the video",
              "name": "pds-video-player-progress"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'alt'"
              },
              "default": "'default'",
              "description": "Style variant\n- Default The video displays with rounded corners\n- **alt** The video displays with square corners",
              "fieldName": "variant"
            },
            {
              "name": "aspectRatio",
              "type": {
                "text": "string"
              },
              "default": "'16:9'",
              "description": "Aspect ratio for the video to display in",
              "fieldName": "aspectRatio"
            },
            {
              "name": "videoUrl",
              "type": {
                "text": "string"
              },
              "description": "The URL to the brightcove video",
              "fieldName": "videoUrl"
            },
            {
              "name": "videoPlayerTextTracks",
              "type": {
                "text": "string"
              },
              "description": "The URL to the video transcript",
              "fieldName": "videoPlayerTextTracks"
            },
            {
              "name": "videoTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A title to display under the video; if provided, will also be used to replace the video title for screen readers",
              "fieldName": "videoTitle"
            },
            {
              "name": "videoDescription",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description to display under the video; should only be used if videoTitle is provided, and it will display between the title and transcript link\nShould be passed in as a string of HTML, sanitization is handled within PDS",
              "fieldName": "videoDescription"
            },
            {
              "name": "hideVideoDuration",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether to show the video duration beneath the video or not",
              "fieldName": "hideVideoDuration"
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "summary": "A brightcove video player component",
          "tagName": "pds-video-player",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PdsVideoPlayer",
          "declaration": {
            "name": "PdsVideoPlayer",
            "module": "packages/web-components/src/lib/components/video-player/video-player.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pds-video-player",
          "declaration": {
            "name": "PdsVideoPlayer",
            "module": "packages/web-components/src/lib/components/video-player/video-player.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/components/placeholder-element/placeholder-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PLACEHOLDERELEMENT",
          "members": [
            {
              "kind": "field",
              "name": "styleModifier",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "styleModifier"
            },
            {
              "kind": "field",
              "name": "inlineStyle",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "inlineStyle"
            },
            {
              "kind": "field",
              "name": "tight",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "tight"
            }
          ],
          "attributes": [
            {
              "name": "styleModifier",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "styleModifier"
            },
            {
              "name": "inlineStyle",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "inlineStyle"
            },
            {
              "name": "tight",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "tight"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "placeholder-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PLACEHOLDERELEMENT",
          "declaration": {
            "name": "PLACEHOLDERELEMENT",
            "module": "packages/web-components/.storybook/components/placeholder-element/placeholder-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "placeholder-element",
          "declaration": {
            "name": "PLACEHOLDERELEMENT",
            "module": "packages/web-components/.storybook/components/placeholder-element/placeholder-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/components/system-docs/system-docs.stories.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "CodeGuidelines"
        },
        {
          "kind": "function",
          "name": "GeneratorGuidelines"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/components/system-docs/system-docs.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CodeGuidelines",
          "declaration": {
            "name": "CodeGuidelines",
            "module": "packages/web-components/.storybook/components/system-docs/system-docs.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "GeneratorGuidelines",
          "declaration": {
            "name": "GeneratorGuidelines",
            "module": "packages/web-components/.storybook/components/system-docs/system-docs.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/components/system-docs/system-docs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ColorTokens",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "system-docs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ColorTokens",
          "declaration": {
            "name": "ColorTokens",
            "module": "packages/web-components/.storybook/components/system-docs/system-docs.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "system-docs",
          "declaration": {
            "name": "ColorTokens",
            "module": "packages/web-components/.storybook/components/system-docs/system-docs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-card/article-card.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-card/article-card.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Bare",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Bare',\n  args: { variant: 'bare' },\n  argTypes: { variant: { table: { disable: true } } },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-card/article-card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-card/article-card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Bare",
          "declaration": {
            "name": "Bare",
            "module": "packages/web-components/.storybook/recipes/article-card/article-card.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-card/article-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticleCard",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticleCard",
          "declaration": {
            "name": "ArticleCard",
            "module": "packages/web-components/.storybook/recipes/article-card/article-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-card",
          "declaration": {
            "name": "ArticleCard",
            "module": "packages/web-components/.storybook/recipes/article-card/article-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "function",
          "name": "Subtle"
        },
        {
          "kind": "variable",
          "name": "FullWidthDefault",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Full width default',\n  args: {},\n  render: () =>\n    html`<pds-feature-block fullwidth>\n      <span slot=\"media\">\n        <img\n          class=\"c-article-feature-block__image pds-u-block\"\n          src=\"${process.env.IMAGES_PATH}image_border.svg\"\n          alt=\"placeholder\"\n        />\n      </span>\n      <div class=\"c-article-feature-block__body pds-u-position-relative\">\n        <pds-layout-container>\n          <div class=\"c-article-feature-block__body-inner\">\n            <span\n              class=\"c-article-feature-block__eyebrow pds-u-typography-meta-sm pds-u-margin-bottom-16\"\n            >\n              1:00 PM CT | May 18, 2022\n            </span>\n            <pds-heading slot=\"heading\" headingTag=\"h3\" variant=\"title-default\">\n              A beginner's guide to investing\n            </pds-heading>\n            <div\n              class=\"c-article-feature-block__description pds-u-margin-top-24\"\n            >\n              <pds-text-passage>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc\n                vulputate libero et velit interdum, ac aliquet odio mattis.\n                Lorem ipsum dolor amet, consectetur adipiscing\n                elit.</pds-text-passage\n              >\n            </div>\n            <div\n              class=\"c-article-feature-block__cta pds-u-block pds-u-margin-top-40\"\n            >\n              <pds-button>Register for the upcoming webinar</pds-button>\n            </div>\n          </div>\n        </pds-layout-container>\n      </div>\n    </pds-feature-block>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Subtle",
          "declaration": {
            "name": "Subtle",
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FullWidthDefault",
          "declaration": {
            "name": "FullWidthDefault",
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticleFeatureBlock",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-feature-block",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticleFeatureBlock",
          "declaration": {
            "name": "ArticleFeatureBlock",
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-feature-block",
          "declaration": {
            "name": "ArticleFeatureBlock",
            "module": "packages/web-components/.storybook/recipes/article-feature-block/article-feature-block.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-intro/article-intro.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-intro/article-intro.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-intro/article-intro.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-intro/article-intro.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-intro/article-intro.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticleIntro",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-intro",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticleIntro",
          "declaration": {
            "name": "ArticleIntro",
            "module": "packages/web-components/.storybook/recipes/article-intro/article-intro.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-intro",
          "declaration": {
            "name": "ArticleIntro",
            "module": "packages/web-components/.storybook/recipes/article-intro/article-intro.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticlePreviewSection",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-preview-section",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticlePreviewSection",
          "declaration": {
            "name": "ArticlePreviewSection",
            "module": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-preview-section",
          "declaration": {
            "name": "ArticlePreviewSection",
            "module": "packages/web-components/.storybook/recipes/article-preview-section/article-preview-section.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Bare",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Bare',\n  args: { variant: 'bare' },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Bare",
          "declaration": {
            "name": "Bare",
            "module": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticleMediaBlock",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-media-block",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticleMediaBlock",
          "declaration": {
            "name": "ArticleMediaBlock",
            "module": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-media-block",
          "declaration": {
            "name": "ArticleMediaBlock",
            "module": "packages/web-components/.storybook/recipes/article-media-block/article-media-block.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "Bare",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Bare',\n  args: { variant: 'bare' },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Bare",
          "declaration": {
            "name": "Bare",
            "module": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArticleSeriesCard",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "article-series-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArticleSeriesCard",
          "declaration": {
            "name": "ArticleSeriesCard",
            "module": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "article-series-card",
          "declaration": {
            "name": "ArticleSeriesCard",
            "module": "packages/web-components/.storybook/recipes/article-series-card/article-series-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AlignedContentCards",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "aligned-content-cards",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AlignedContentCards",
          "declaration": {
            "name": "AlignedContentCards",
            "module": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "aligned-content-cards",
          "declaration": {
            "name": "AlignedContentCards",
            "module": "packages/web-components/.storybook/recipes/aligned-content-cards/aligned-content-cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardCustomPadding",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "card-custom-padding",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardCustomPadding",
          "declaration": {
            "name": "CardCustomPadding",
            "module": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "card-custom-padding",
          "declaration": {
            "name": "CardCustomPadding",
            "module": "packages/web-components/.storybook/recipes/card-custom-padding/card-custom-padding.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Default',\n  args: {\n    variant: 'inverted',\n    title: 'Account/Product Name',\n    description: 'Optional description placeholder',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PageNavigation",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "page-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PageNavigation",
          "declaration": {
            "name": "PageNavigation",
            "module": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "page-navigation",
          "declaration": {
            "name": "PageNavigation",
            "module": "packages/web-components/.storybook/recipes/page-navigation/page-navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Solid background',\n  args: {},\n}"
        },
        {
          "kind": "variable",
          "name": "HeroCentered",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Centered',\n  args: {},\n  render: () => html`\n    <pds-band\n      variant=\"brand-xstrong\"\n      spacing=\"default\"\n      class=\"pds-u-typography-color-inverted-default pds-u-text-align-center\"\n    >\n      <pds-layout-container variant=\"default\"\n        ><pds-heading\n          class=\"pds-u-margin-top-8 pds-u-margin-left-40 pds-u-margin-right-40\"\n          headingTag=\"h1\"\n          variant=\"display-default\"\n        >\n          This is a display.\n        </pds-heading>\n        <div\n          class=\"pds-u-margin-left-40 pds-u-margin-right-40 pds-u-margin-top-24\"\n        >\n          <pds-text-passage linelength=\"none\">\n            This is body text. Lorem ipsum dolor sit amet, consectetur\n            adipiscing elit.</pds-text-passage\n          >\n        </div>\n        <div\n          class=\"pds-u-margin-top-40 pds-u-margin-left-40 pds-u-margin-right-40 pds-u-margin-bottom-8\"\n        >\n          <pds-button variant=\"primary-inverted\"><span>Label</span></pds-button>\n        </div></pds-layout-container\n      >\n    </pds-band>\n  `,\n}"
        },
        {
          "kind": "variable",
          "name": "HeroWithImage",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Image',\n  args: {},\n  render: () => html`\n  <pds-feature-block\n    fullwidth\n  >\n      <img slot=\"media\"\n        class=\"pds-u-block\"\n        src=\"${process.env.IMAGES_PATH}image.svg\"\n        alt=\"placeholder\"\n        style=\"object-fit:cover; height:100%; width:100%;\"\n      />\n    <div class=\"pds-u-position-relative\">\n      <pds-feature-block fullwidth>\n        <pds-band\n          variant=\"brand-xstrong\"\n          spacing=\"default\"\n          class=\"c-hero-section__band pds-u-typography-color-inverted-default\" style=\"opacity:0.9;\"\n          >\n          <pds-layout-container>\n          <pds-heading\n                    class=\"pds-u-margin-top-8 pds-u-margin-left-40 pds-u-margin-right-40\"\n                    headingTag=\"h1\"\n                    variant=\"display-default\"\n                  >\n                    This is a display.\n                  </pds-heading>\n                  <div\n                    class=\"pds-u-margin-left-40 pds-u-margin-right-40 pds-u-margin-top-24\"\n                  >\n                    <pds-text-passage linelength=\"none\">\n                      This is body text. Lorem ipsum dolor sit amet, consectetur\n                      adipiscing elit.</pds-text-passage\n                    >\n                  </div>\n                  <div\n                    class=\"pds-u-margin-top-40 pds-u-margin-left-40 pds-u-margin-right-40 pds-u-margin-bottom-8\"\n                  >\n                    <pds-button variant=\"primary-inverted\"><span>Label</span></pds-button>\n                  </div>\n            </div>\n          </pds-layout-container></pds-band\n        ></pds-feature-block\n      >\n    </div>\n  </pds-feature-block>`,\n}"
        },
        {
          "kind": "variable",
          "name": "HeroAudience",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Audience',\n  args: {},\n  render: () =>\n    html`\n      <pds-feature-block fullwidth>\n        <img\n          slot=\"media\"\n          class=\"pds-u-block pds-image\"\n          src=\"${process.env.IMAGES_PATH}image.svg\"\n          alt=\"placeholder\"\n          style=\"object-fit:cover; height:100%; width:100%;\"\n        />\n        <div class=\"pds-u-position-relative\">\n          <pds-feature-block fullwidth>\n            <pds-band\n              variant=\"brand-xstrong\"\n              spacing=\"default\"\n              class=\"c-hero-audience__band pds-u-typography-color-inverted-default\"\n            >\n              <pds-layout-container>\n                <div class=\"pds-u-margin-left-40 pds-u-margin-right-40\">\n                  <pds-heading\n                    class=\"pds-u-margin-top-8\"\n                    headingTag=\"h1\"\n                    variant=\"display-default\"\n                  >\n                    This is a display.\n                  </pds-heading>\n                  <div class=\"pds-u-margin-top-24\">\n                    <pds-text-passage linelength=\"none\">\n                      This is body text. Lorem ipsum dolor sit amet, consectetur\n                      adipiscing elit.\n                    </pds-text-passage>\n                  </div>\n                  <div class=\"pds-u-margin-top-40 pds-u-margin-bottom-8\">\n                    <pds-button variant=\"primary-inverted\">Label</pds-button>\n                  </div>\n                </div>\n              </pds-layout-container>\n            </pds-band>\n          </pds-feature-block>\n        </div>\n      </pds-feature-block>\n      <pds-card\n        variant=\"bare\"\n        removepadding=\"\"\n        target=\"_blank\"\n        class=\"pds-card-quickLinks pds-u-background-brand-xstrong\"\n      >\n        <pds-heading\n          headingtag=\"h2\"\n          variant=\"title-sm\"\n          class=\"pds-u-typography-color-inverted-default\"\n        >\n          Quick links\n        </pds-heading>\n        <pds-list class=\"pds-u-margin-top-20\" spacing=\"sm\" size=\"md\">\n          <pds-list-item size=\"md\"\n            ><pds-link\n              href=\"https://principal.com\"\n              variant=\"emphasis-inverted\"\n              >Link 1</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item size=\"md\"\n            ><pds-link\n              href=\"https://principal.com\"\n              variant=\"emphasis-inverted\"\n              >Link 2</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item size=\"md\"\n            ><pds-link\n              href=\"https://principal.com\"\n              variant=\"emphasis-inverted\"\n              >Link 3</pds-link\n            ></pds-list-item\n          >\n          <pds-list-item size=\"md\"\n            ><pds-link\n              href=\"https://principal.com\"\n              variant=\"emphasis-inverted\"\n              >Link 4</pds-link\n            ></pds-list-item\n          >\n        </pds-list>\n      </pds-card>\n    </div>`,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeroCentered",
          "declaration": {
            "name": "HeroCentered",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeroWithImage",
          "declaration": {
            "name": "HeroWithImage",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeroAudience",
          "declaration": {
            "name": "HeroAudience",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/hero-section/hero-section.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HeroSection",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "hero-section",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HeroSection",
          "declaration": {
            "name": "HeroSection",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "hero-section",
          "declaration": {
            "name": "HeroSection",
            "module": "packages/web-components/.storybook/recipes/hero-section/hero-section.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/form-example/form-example.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/form-example/form-example.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Recipes/Form example',\n  component: 'form-example',\n  tags: ['autodocs'],\n  argTypes: {},\n  parameters: {\n    actions: {\n      handles: [\n        'pds-select-change',\n        'pds-text-input-input',\n        'pds-text-input-change',\n        'pds-radio-group-change',\n        'pds-date-picker-select-date',\n        'pds-date-picker-change-view',\n        'pds-date-picker-escape',\n        'pds-date-picker-input-change',\n        'pds-date-picker-input-input',\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Sample",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  name: 'Sample',\n  render() {\n    return html`<form-example>\n      <form>\n        <pds-text-input\n          name=\"name\"\n          label=\"Enter your name\"\n          value=\"Harry Potter\"\n          class=\"pds-u-padding-bottom-12\"\n        ></pds-text-input>\n        <pds-date-picker-input\n          class=\"pds-u-padding-vertical-12\"\n          name=\"start date\"\n          dateformat=\"MM/DD/YYYY\"\n          helptext=\"Please follow the MM/DD/YYYY format.\"\n          label=\"Select a start date\"\n          ><pds-date-picker slot=\"datepicker\"></pds-date-picker\n        ></pds-date-picker-input>\n        <pds-select\n          name=\"house\"\n          label=\"Select a house\"\n          value=\"Hufflepuff\"\n          class=\"pds-u-padding-vertical-12\"\n        >\n          <option value=\"Slytherin\">Slytherin</option>\n          <option value=\"Hufflepuff\">Hufflepuff</option>\n          <option value=\"Ravenclaw\">Ravenclaw</option>\n          <option value=\"Gryffindor\">Gryffindor</option>\n        </pds-select>\n        <pds-radio-group\n          class=\"pds-u-padding-vertical-12\"\n          name=\"pet\"\n          label=\"Select your pet\"\n          value=\"Frog\"\n        >\n          <pds-radio value=\"Cat\" label=\"Cat\"></pds-radio>\n          <pds-radio value=\"Frog\" label=\"Frog\"></pds-radio>\n          <pds-radio value=\"Owl\" label=\"Owl\"></pds-radio>\n        </pds-radio-group>\n        <pds-text-area\n          class=\"pds-u-padding-vertical-12\"\n          name=\"ingredients\"\n          label=\"List the ingredients for Polyjuice potion\"\n          value=\"Lacewing flies, etc...\"\n        ></pds-text-area>\n        <pds-checkbox\n          class=\"pds-u-padding-top-12 pds-u-padding-bottom-48\"\n          name=\"oath\"\n          label=\"I solemnly swear I'm up to no good.\"\n          checked\n        ></pds-checkbox>\n        <pds-button type=\"submit\" variant=\"primary\">Submit</pds-button>\n      </form>\n    </form-example>`;\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "packages/web-components/.storybook/recipes/form-example/form-example.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Sample",
          "declaration": {
            "name": "Sample",
            "module": "packages/web-components/.storybook/recipes/form-example/form-example.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/form-example/form-example.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormExample",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "form-example",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormExample",
          "declaration": {
            "name": "FormExample",
            "module": "packages/web-components/.storybook/recipes/form-example/form-example.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "form-example",
          "declaration": {
            "name": "FormExample",
            "module": "packages/web-components/.storybook/recipes/form-example/form-example.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.stories.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SkeletonLoaderTable",
          "members": [
            {
              "kind": "method",
              "name": "isComponent",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClassNamespace",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate namespace to the class: 'pds-' Components or '' Recipes",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classMod",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class name as a BEM modifier",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "classEl",
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Prepends the appropriate prefix to the class as a BEM element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClass",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Wraps the classNames object in Lit's classMap directive,\nadding the appropriate prefix to each class name",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "slotNotEmpty",
              "parameters": [
                {
                  "name": "slotName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if a slot is not empty",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocale",
              "description": "Get the current locale for language localization",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLocale",
              "description": "Set the locale for language localization",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "cloneLitElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Clone a lit element",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "setWindowResizeHandler",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "duplicateSlotMarkup",
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Used to duplicate slot markup if the markup differs between mobile and desktop views.",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDynamicSlotMarkup",
              "return": {
                "type": {
                  "text": "Node[] | undefined"
                }
              },
              "description": "Returns the duplicated slot markup",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotValidation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Checks if a slotted element is valid for its slot",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateSlottedElements",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "allowedElements",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Checks if an element's tag name is valid, based on a list of valid tag namesubstrings",
              "inheritedFrom": {
                "name": "PdsElement",
                "module": "packages/web-components/src/lib/components/PdsElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "PdsElement",
            "module": "/packages/web-components/src/lib/components/PdsElement"
          },
          "tagName": "skeleton-loader-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonLoaderTable",
          "declaration": {
            "name": "SkeletonLoaderTable",
            "module": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "skeleton-loader-table",
          "declaration": {
            "name": "SkeletonLoaderTable",
            "module": "packages/web-components/.storybook/recipes/skeleton-loader-table/skeleton-loader-table.ts"
          }
        }
      ]
    }
  ]
}
